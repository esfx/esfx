const fs = require("fs");
const path = require("path");
const ts = require("typescript");
const inputFile = require.resolve("typescript/lib/lib.dom.d.ts");
const outputFile = path.resolve(__dirname, "../src/dom.types.generated.ts");

const inputModified = fs.statSync(inputFile).mtimeMs;
const scriptModified = fs.statSync(__filename).mtimeMs;
const outputModified = tryGetLastModified(outputFile);
if (inputModified > outputModified || scriptModified > outputModified) {
    const sourceFile = ts.createSourceFile(inputFile, fs.readFileSync(inputFile, "utf8"), ts.ScriptTarget.Latest);
    const printer = ts.createPrinter({ removeComments: true }, {});

    let text = "";
    for (const statement of sourceFile.statements) {
        if (!ts.isInterfaceDeclaration(statement)) continue;
        const addEventListenerOverloads = statement.members.filter(member =>
            ts.isMethodSignature(member) &&
            ts.isIdentifier(member.name) &&
            ts.idText(member.name) === "addEventListener");
        if (!addEventListenerOverloads.length) continue;

        const updated = ts.factory.updateInterfaceDeclaration(
            statement,
            statement.decorators,
            statement.modifiers,
            statement.name,
            statement.typeParameters,
            [],
            ts.visitNodes(ts.factory.createNodeArray(addEventListenerOverloads), overload => {
                const visited = ts.visitNode(overload, function visitor(node) {
                    if (ts.isIdentifier(node) && ts.idText(node) === "AddEventListenerOptions") {
                        return ts.factory.createIdentifier("AddEventListenerOptionsWithCancelToken");
                    }
                    return ts.visitEachChild(node, visitor, ts.nullTransformationContext);
                });
                return visited !== overload ? visited : undefined;
            })
        );

        if (text) text += `\n`;
        text += printer.printNode(ts.EmitHint.Unspecified, updated, sourceFile);
        text += `\n`;
    }

    text = `// NOTE: This file was autogenerated by 'scripts/generateDomEventTypes.js' and should not be modified by hand.\n\n/// <reference lib="dom" />\n\n${text}`;
    fs.writeFileSync(outputFile, text, "utf8");
}


function tryGetLastModified(file) {
    try {
        const stats = fs.statSync(file);
        return stats.mtimeMs;
    }
    catch {
        return 0;
    }
}