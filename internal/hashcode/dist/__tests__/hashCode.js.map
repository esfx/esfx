{"version":3,"file":"hashCode.js","sourceRoot":"","sources":["../../src/__tests__/hashCode.ts"],"names":[],"mappings":"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","sourcesContent":["import { hashUnknown } from \"../index\";\r\n\r\nconst state = hashUnknown.getState();\r\n\r\nbeforeEach(() => {\r\n    hashUnknown.setState({ \r\n        objectSeed: 0x1dc8529e,\r\n        stringSeed: 0x6744b005,\r\n        bigIntSeed: 0x6c9503bc,\r\n        localSymbolSeed: 0x78819b01,\r\n        globalSymbolSeed: 0x1875c170\r\n    });\r\n});\r\n\r\nafterEach(() => {\r\n    hashUnknown.setState(state);\r\n});\r\n\r\nit(\"null\", () => expect(hashUnknown(null)).toBe(0));\r\nit(\"undefined\", () => expect(hashUnknown(undefined)).toBe(0));\r\nit(\"true\", () => expect(hashUnknown(true)).toBe(1));\r\nit(\"false\", () => expect(hashUnknown(false)).toBe(0));\r\nit(\"0\", () => expect(hashUnknown(0)).toBe(0));\r\nit(\"1\", () => expect(hashUnknown(1)).toBe(1));\r\nit(\"1.2\", () => expect(hashUnknown(1.2)).toBe(49164));\r\nit('\"\"', () => expect(hashUnknown(\"\")).toBe(-293397629));\r\nit('\"abc\"', () => expect(hashUnknown(\"abc\")).toBe(38704718));\r\nit(\"123n\", () => expect(hashUnknown(123n)).toBe(251));\r\nit(\"{}\", () => expect(hashUnknown({})).toBe(-467054833));\r\nit(\"same {}\", () => (obj => expect(hashUnknown(obj)).toBe(hashUnknown(obj)))({}));\r\nit(\"different {}\", () => expect(hashUnknown({})).not.toBe(hashUnknown({})));\r\nit(\"symbol\", () => expect(hashUnknown(Symbol())).toBe(1087209661));\r\nit(\"same symbol\", () => (sym => expect(hashUnknown(sym)).toBe(hashUnknown(sym)))(Symbol()));\r\nit(\"different symbols\", () => expect(hashUnknown(Symbol())).not.toBe(hashUnknown(Symbol())));\r\nit(\"built-in symbol\", () => expect(hashUnknown(Symbol.iterator)).toBe(-925861680));\r\nit(\"symbol.for\", () => expect(hashUnknown(Symbol.for(\"foo\"))).toBe(-1197376351));"]}