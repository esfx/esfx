name: publish
on:
  workflow_dispatch:
    inputs:
      version:
        description: Version number to publish
        required: true
        type: string
        default: 1.0.0-dev.0
      dist_tag:
        description: npm dist-tag
        required: true
        type: choice
        default: dev
        options:
          - latest
          - next
          - nightly
          - dev
      force_publish:
        description: force publish all packages
        required: false
        type: boolean
        default: false
      prerelease:
        description: prerelease
        required: false
        type: boolean
        default: true
      draft:
        description: draft
        required: false
        type: boolean
        default: true

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.detect_changes.outputs.changed_files }}
      changed_packages: ${{ steps.detect_changes.outputs.changed_packages }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: 16
        registry-url: 'https://registry.npmjs.org'
        cache: 'yarn'
    - name: yarn install
      run: yarn install --ignore-scripts --non-interactive
    - name: lerna version
      run: lerna version ${{ github.event.inputs.version }} --no-git-tag-version --no-push --yes $([ ${{github.event.inputs.force_publish }} == true ] && echo "--force-publish")
    - name: upload version artifacts
      uses: actions/upload-artifact@v3
      with:
        name: version-artifacts
        path: |
          internal/*/package*.json
          packages/*/package*.json
          package.json
          lerna.json
          yarn.lock
    - name: detect changes
      id: detect_changes
      run: |
        CHANGED_FILES=$(git status --porcelain -- package.json lerna.json yarn.lock internal/*/package*.json packages/*/package*.json | cut -c 4-);
        CHANGED_FILES_JSON=$(CHANGED_FILES=$CHANGED_FILES node -e 'process.stdout.write(JSON.stringify(process.env.CHANGED_FILES.split(/\n/g).filter(Boolean)))')
        echo "changed_files=$CHANGED_FILES_JSON" >> $GITHUB_OUTPUT;

        CHANGED_PACKAGES=$(git status --porcelain -- internal/*/package.json packages/*/package.json | cut -c 4-);
        CHANGED_PACKAGES_JSON=$(CHANGED_PACKAGES=$CHANGED_PACKAGES node -e 'process.stdout.write(JSON.stringify(process.env.CHANGED_PACKAGES.split(/\n/g).filter(Boolean).reduce((obj, path) => ({ ...obj, [path]: true }), {})))');
        echo "changed_packages=$CHANGED_PACKAGES_JSON" >> $GITHUB_OUTPUT;

  native:
    strategy:
      matrix:
        os:
        - name: windows
          target: windows-2019
        - name: linux
          target: ubuntu-latest
        - name: macos
          target: macos-latest
        node:
        - 16
        - 18
    name: "${{ matrix.os.name }} (node v${{ matrix.node }})"
    runs-on: ${{ matrix.os.target }}
    needs:
    - version
    # TODO: Do not build if binary packages not included in changed packages
    # TODO: Test binaries
    steps:
    - uses: actions/checkout@v3
    - name: use node v16
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'yarn'
    - name: sync version
      uses: actions/download-artifact@v3
      with:
        name: version-artifacts
        path: ${{ github.workspace }}
    - name: yarn install
      run: yarn install --ignore-scripts --frozen-lockfile --non-interactive
    - name: build native binaries
      run: yarn run build-${{ matrix.os.name }}
    - name: upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: native-artifacts
        path: |
          internal/*/build/stage/**
          packages/*/build/stage/**

  docs:
    runs-on: windows-2019
    needs:
    - version
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: 16
        registry-url: 'https://registry.npmjs.org'
        cache: 'yarn'
    - name: version
      uses: actions/download-artifact@v3
      with:
        name: version-artifacts
        path: ${{ github.workspace }}
    - name: install
      run: |
        yarn install --ignore-scripts --frozen-lockfile --non-interactive

        # manually run post-install scripts:
        pushd node_modules/wasm-opt
        node bin/index.js
        popd
    - name: link
      run: lerna link
    - name: build
      run: |
        gulp clean
        yarn run prebuild
        gulp build
    - name: docs
      run: gulp docs
    - name: upload docs artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docs-artifacts
        path: |
          docs/**

  package:
    runs-on: ubuntu-latest
    needs:
    - version
    - native
    - docs
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: 16
        registry-url: 'https://registry.npmjs.org'
        cache: 'yarn'
    - name: version
      uses: actions/download-artifact@v3
      with:
        name: version-artifacts
        path: ${{ github.workspace }}
    - name: install
      run: |
        yarn install --ignore-scripts --frozen-lockfile --non-interactive

        # manually run post-install scripts:
        pushd node_modules/wasm-opt
        node bin/index.js
        popd
    - name: link
      run: lerna link
    - name: build
      run: |
        gulp clean
        yarn run prebuild
        gulp build
    - name: test
      run: |
        yarn run test --selectProjects "collections-hash ts-worker"
        yarn run test --selectProjects "async-autoresetevent async-barrier async-conditionvariable async-countdown async-deferred async-manualresetevent async-mutex async-queue async-readerwriterlock async-semaphore async-stack canceltoken"
        yarn run test --selectProjects "collection-core collection-core-shim collections-hashmap collections-hashset collections-multimap collections-sortedmap collections-sortedset"
        yarn run test --selectProjects "async-iter-fn async-iter-fromsync async-iter-query iter-fn iter-lookup iter-query"
        yarn run test --selectProjects "threading-autoresetevent threading-conditionvariable threading-manualresetevent threading-mutex threading-sleep"
        yarn run test --selectProjects "decorators disposable equatable equatable-shim fn fn-partial indexed-object lazy ref reflect-metadata-compat struct-type"
    - name: test (esm output)
      run: |
        yarn run test-esm --selectProjects "async-autoresetevent async-barrier async-conditionvariable async-countdown async-deferred async-manualresetevent async-mutex async-queue async-readerwriterlock async-semaphore async-stack canceltoken"
        yarn run test-esm --selectProjects "collections-hash collection-core collection-core-shim collections-hashmap collections-hashset collections-multimap collections-sortedmap collections-sortedset"
        yarn run test-esm --selectProjects "async-iter-fn async-iter-fromsync async-iter-query iter-fn iter-lookup iter-query"
        yarn run test-esm --selectProjects "threading-autoresetevent threading-conditionvariable threading-manualresetevent threading-mutex threading-sleep"
        yarn run test-esm --selectProjects "decorators disposable equatable equatable-shim fn fn-partial indexed-object lazy ref reflect-metadata-compat struct-type"
    - name: verify
      run: |
        gulp verify
        node node_modules/workspaces-foreach run prepack
    - name: docs
      uses: actions/download-artifact@v3
      with:
        name: docs-artifacts
        path: docs

    - name: commit and tag version
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        git add -- ${{ join(fromJson(needs.version.outputs.changed_files), ' ') }}
        git add -- docs
        git commit -m "v${{ github.event.inputs.version }}"
        git tag -f "v${{ github.event.inputs.version }}" -m "v${{ github.event.inputs.version }}"
        git push --follow-tags --no-verify --atomic origin ${{ github.ref_name }}

    - name: download native artifacts
      uses: actions/download-artifact@v3
      with:
        name: native-artifacts
        path: ${{ github.workspace }}
    - name: collect native artifacts
      run: |
        NATIVE_ARTIFACTS=$(find packages/* internal/* -path '*/*/build/stage/*/*.tar.gz');
        NATIVE_ARTIFACTS_JSON=$(NATIVE_ARTIFACTS=$NATIVE_ARTIFACTS node -e 'process.stdout.write(JSON.stringify(process.env.NATIVE_ARTIFACTS.split(/\n/g).filter(Boolean)))');
        echo "NATIVE_ARTIFACTS<<EOF" >> $GITHUB_ENV
        echo $NATIVE_ARTIFACTS_JSON >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    - name: create release
      uses: ncipollo/release-action@v1
      with:
        tag: "v${{ github.event.inputs.version }}"
        commit: ${{ github.sha }}
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
        artifacts: ${{ join(fromJson(env.NATIVE_ARTIFACTS)) }}
        allowUpdates: true
    - name: publish
      if: ${{ github.event.inputs.draft != true }}
      run: |
        lerna publish from-git --yes --no-verify-access --dist-tag ${{ github.event.inputs.dist_tag }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
