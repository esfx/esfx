{
  "api/async.html": {
    "href": "api/async.html",
    "title": "@esfx/async Package | @esfx API Reference",
    "keywords": "@esfx/async Package Provides a number of asynchronous coordination primitives from the following packages: @esfx/canceltoken @esfx/async-autoresetevent @esfx/async-barrier @esfx/async-conditionvariable @esfx/async-countdown @esfx/async-deferred @esfx/async-delay @esfx/async-lazy @esfx/async-lockable @esfx/async-manualresetevent @esfx/async-mutex @esfx/async-queue @esfx/async-readerwriterlock @esfx/async-semaphore @esfx/async-stack @esfx/async-waitqueue Installation npm i @esfx/async"
  },
  "api/async-autoresetevent.html": {
    "href": "api/async-autoresetevent.html",
    "title": "@esfx/async-autoresetevent Package | @esfx API Reference",
    "keywords": "@esfx/async-autoresetevent Package The @esfx/async-autoresetevent package provides the AsyncAutoResetEvent class, an async coordination primitive. Installation npm i @esfx/async-autoresetevent Usage TypeScript JavaScript (CommonJS) import { AsyncAutoResetEvent } from \"@esfx/async-autoresetevent\"; const event = new AsyncAutoResetEvent(); async function doSomeActivity() { while (true) { // do some work asynchronously... // indicate 'waitForActivity' can resume. Event is immediately reset to // the signaled state. event.set(); } } async function waitForActivity() { while (true) { // wait for 'doSomeActivity' to set the event... await event.wait(); // do something asynchronous... } } doSomeActivity(); waitForActivity(); const { AsyncAutoResetEvent } = require(\"@esfx/async-autoresetevent\"); const event = new AsyncAutoResetEvent(); async function doSomeActivity() { while (true) { // do some work asynchronously... // indicate 'waitForActivity' can resume. Event is immediately reset to // the signaled state. event.set(); } } async function waitForActivity() { while (true) { // wait for 'doSomeActivity' to set the event... await event.wait(); // do something asynchronous... } } doSomeActivity(); waitForActivity(); Classes AsyncAutoResetEvent Represents a synchronization event that, when signaled, resets automatically after releasing a single waiting asynchronous operation."
  },
  "api/async-autoresetevent/asyncautoresetevent.html": {
    "href": "api/async-autoresetevent/asyncautoresetevent.html",
    "title": "AsyncAutoResetEvent Class | @esfx API Reference",
    "keywords": "AsyncAutoResetEvent Class Package : @esfx/async-autoresetevent Represents a synchronization event that, when signaled, resets automatically after releasing a single waiting asynchronous operation. Declaration export declare class AsyncAutoResetEvent Examples The following example shows how to use AsyncAutoResetEvent to release one asynchronous operation at a time whenever the user presses Enter . Because the first event is initially signaled, the first operation is released immediately. This resets the signaled state, causing the remaining operations to pause until the event is once again signaled. Note The following example is derived from https://docs.microsoft.com/en-us/dotnet/api/system.threading.autoresetevent?view=net-6.0#examples TypeScript JavaScript (CommonJS) import { AsyncAutoResetEvent } from \"@esfx/async-autoresetevent\"; import { delay } from \"@esfx/async-delay\"; import * as readline from \"readline\"; const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const question = (text: string) => new Promise<string>(resolve => rl.question(text, resolve)); const first = new AsyncAutoResetEvent(/*initialState*/ true); const second = new AsyncAutoResetEvent(/*initialState*/ false); async function main() { await question(`Press Enter to start three asynchronous operations.`); const promises: Promise<void>[] = []; for (let i = 0; i < 3; i++) { promises.push(asyncOperation(`operation #${i + 1}`)); } await delay(250); for (let i = 0; i < 2; i++) { await question(`Press Enter to release an operation.`); first.set(); await delay(250); } console.log(\"All operations are now waiting on the second event.\"); for (let i = 0; i < 3; i++) { await question(`Press Enter to release an operation.`); second.set(); await delay(250); } await Promise.all(promises); } async function asyncOperation(name: string) { console.log(`${name} is waiting on the first event.`); await first.wait(); console.log(`${name} was released from the first event.`); console.log(`${name} is waiting on the second event.`); await second.wait(); console.log(`${name} was released from the second event.`); console.log(`${name} is complete.`); } await main(); const { AsyncAutoResetEvent } = require(\"@esfx/async-autoresetevent\"); const { delay } = require(\"@esfx/async-delay\"); const readline = require(\"readline\"); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const question = (text) => new Promise(resolve => rl.question(text, resolve)); const first = new AsyncAutoResetEvent(/*initialState*/ true); const second = new AsyncAutoResetEvent(/*initialState*/ false); async function main() { await question(`Press Enter to start three asynchronous operations.`); const promises = []; for (let i = 0; i < 3; i++) { promises.push(asyncOperation(`operation #${i + 1}`)); } await delay(250); for (let i = 0; i < 2; i++) { await question(`Press Enter to release an operation.`); first.set(); await delay(250); } console.log(\"All operations are now waiting on the second event.\"); for (let i = 0; i < 3; i++) { await question(`Press Enter to release an operation.`); second.set(); await delay(250); } await Promise.all(promises); } async function asyncOperation(name) { console.log(`${name} is waiting on the first event.`); await first.wait(); console.log(`${name} was released from the first event.`); console.log(`${name} is waiting on the second event.`); await second.wait(); console.log(`${name} was released from the second event.`); console.log(`${name} is complete.`); } main().catch(e => { console.error(e); process.exit(-1); }); Remarks The AsyncAutoResetEvent and AsyncManualResetEvent classes are used to provide signaling between concurrent asynchronous operations. An asynchronous operation can wait until an event is signaled by awaiting the result of wait(cancelable) . This causes the operation to pause until the event becomes signaled. Calling set() will signal and release a single waiting operation, immediately returning the event to the non-signaled state. If there are no operations currently waiting on the event, the event will remain signaled until the next call to wait(cancelable) . Calling reset() resets the event to the non-signaled state. Constructors constructor(initialState) Initializes a new instance of the AutoResetEvent class. Declaration constructor(initialState?: boolean); Parameters initialState boolean A value indicating whether to set the initial state to signaled. Methods reset() Sets the state of the event to nonsignaled, causing asynchronous operations to pause. Declaration reset(): void; Returns void set() Sets the state of the event to signaled, resolving at most one waiting Promise. The event is then automatically reset. Declaration set(): boolean; Returns boolean true if the operation successfully resolved a waiting Promise; otherwise, false <!-- --> . wait(cancelable) Asynchronously waits for the event to become signaled. Declaration wait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise <void>"
  },
  "api/async-barrier.html": {
    "href": "api/async-barrier.html",
    "title": "@esfx/async-barrier Package | @esfx API Reference",
    "keywords": "@esfx/async-barrier Package The @esfx/async-barrier package provides the AsyncBarrier class, an async coordination primitive. Installation npm i @esfx/async-barrier Usage Note The following example is derived from https://docs.microsoft.com/en-us/dotnet/api/system.threading.barrier?view=net-6.0#examples TypeScript JavaScript (CommonJS) import { AsyncBarrier } from \"@esfx/async-barrier\"; async function main() { let count = 0; // Create a barrier with 3 participants and a post-phase action to print results. // When phase 2 completes, throw an exception to be observed by all participants. const barrier = new AsyncBarrier(3, b => { console.log(`Post-phase action: count=${count}, phase=${b.currentPhaseNumber}`); if (b.currentPhaseNumber === 2) throw new Error(\"Oops\"); }); // Add two participants barrier.add(2); barrier.participantCount; // 5 // Remove one participant barrier.remove(); barrier.participantCount; // 4 const action = async () => { count++; // Wait for the current phase to end. During the post-phase action 'count' will be 4 // and 'phase' will be 0. await barrier.signalAndWait(); count++; // Wait for the current phase to end. During the post-phase action 'count' will be 8 // and 'phase' will be 1. await barrier.signalAndWait(); count++; // When phase 2 ends an exception is thrown to all participants: try { await barrier.signalAndWait(); } catch (e) { console.log(`Caught error: ${e.message}`); } // Wait for the current phase to end. During the post-phase action 'count' will be 16 // and 'phase' will be 3. await barrier.signalAndWait(); }; // Start 4 async actions to serve as the 4 participants. await Promise.all([action(), action(), action(), action()]); } main().catch(e => console.error(e)); // prints: // Post-phase action: count=4, phase=0 // Post-phase action: count=8, phase=1 // Post-phase action: count=12, phase=2 // Caught error: Oops // Post-phase action: count=16, phase=3 const { AsyncBarrier } = require(\"@esfx/async-barrier\"); async function main() { let count = 0; // Create a barrier with 3 participants and a post-phase action to print results. // When phase 2 completes, throw an exception to be observed by all participants. const barrier = new AsyncBarrier(3, b => { console.log(`Post-phase action: count=${count}, phase=${b.currentPhaseNumber}`); if (b.currentPhaseNumber === 2) throw new Error(\"Oops\"); }); // Add two participants barrier.add(2); barrier.participantCount; // 5 // Remove one participant barrier.remove(); barrier.participantCount; // 4 const action = async () => { count++; // Wait for the current phase to end. During the post-phase action 'count' will be 4 // and 'phase' will be 0. await barrier.signalAndWait(); count++; // Wait for the current phase to end. During the post-phase action 'count' will be 8 // and 'phase' will be 1. await barrier.signalAndWait(); count++; // When phase 2 ends an exception is thrown to all participants: try { await barrier.signalAndWait(); } catch (e) { console.log(`Caught error: ${e.message}`); } // Wait for the current phase to end. During the post-phase action 'count' will be 16 // and 'phase' will be 3. await barrier.signalAndWait(); }; // Start 4 async actions to serve as the 4 participants. await Promise.all([action(), action(), action(), action()]); } main().catch(e => console.error(e)); // prints: // Post-phase action: count=4, phase=0 // Post-phase action: count=8, phase=1 // Post-phase action: count=12, phase=2 // Caught error: Oops // Post-phase action: count=16, phase=3 Classes AsyncBarrier Enables multiple tasks to cooperatively work on an algorithm through multiple phases."
  },
  "api/async-barrier/asyncbarrier.html": {
    "href": "api/async-barrier/asyncbarrier.html",
    "title": "AsyncBarrier Class | @esfx API Reference",
    "keywords": "AsyncBarrier Class Package : @esfx/async-barrier Enables multiple tasks to cooperatively work on an algorithm through multiple phases. Declaration export declare class AsyncBarrier Examples Note The following example is derived from https://docs.microsoft.com/en-us/dotnet/api/system.threading.barrier?view=net-6.0#examples TypeScript JavaScript (CommonJS) import { AsyncBarrier } from \"@esfx/async-barrier\"; async function main() { let count = 0; // Create a barrier with 3 participants and a post-phase action to print results. // When phase 2 completes, throw an exception to be observed by all participants. const barrier = new AsyncBarrier(3, b => { console.log(`Post-phase action: count=${count}, phase=${b.currentPhaseNumber}`); if (b.currentPhaseNumber === 2) throw new Error(\"Oops\"); }); // Add two participants barrier.add(2); barrier.participantCount; // 5 // Remove one participant barrier.remove(); barrier.participantCount; // 4 const action = async () => { count++; // Wait for the current phase to end. During the post-phase action 'count' will be 4 // and 'phase' will be 0. await barrier.signalAndWait(); count++; // Wait for the current phase to end. During the post-phase action 'count' will be 8 // and 'phase' will be 1. await barrier.signalAndWait(); count++; // When phase 2 ends an exception is thrown to all participants: try { await barrier.signalAndWait(); } catch (e) { console.log(`Caught error: ${e.message}`); } // Wait for the current phase to end. During the post-phase action 'count' will be 16 // and 'phase' will be 3. await barrier.signalAndWait(); }; // Start 4 async actions to serve as the 4 participants. await Promise.all([action(), action(), action(), action()]); } main().catch(e => console.error(e)); // prints: // Post-phase action: count=4, phase=0 // Post-phase action: count=8, phase=1 // Post-phase action: count=12, phase=2 // Caught error: Oops // Post-phase action: count=16, phase=3 const { AsyncBarrier } = require(\"@esfx/async-barrier\"); async function main() { let count = 0; // Create a barrier with 3 participants and a post-phase action to print results. // When phase 2 completes, throw an exception to be observed by all participants. const barrier = new AsyncBarrier(3, b => { console.log(`Post-phase action: count=${count}, phase=${b.currentPhaseNumber}`); if (b.currentPhaseNumber === 2) throw new Error(\"Oops\"); }); // Add two participants barrier.add(2); barrier.participantCount; // 5 // Remove one participant barrier.remove(); barrier.participantCount; // 4 const action = async () => { count++; // Wait for the current phase to end. During the post-phase action 'count' will be 4 // and 'phase' will be 0. await barrier.signalAndWait(); count++; // Wait for the current phase to end. During the post-phase action 'count' will be 8 // and 'phase' will be 1. await barrier.signalAndWait(); count++; // When phase 2 ends an exception is thrown to all participants: try { await barrier.signalAndWait(); } catch (e) { console.log(`Caught error: ${e.message}`); } // Wait for the current phase to end. During the post-phase action 'count' will be 16 // and 'phase' will be 3. await barrier.signalAndWait(); }; // Start 4 async actions to serve as the 4 participants. await Promise.all([action(), action(), action(), action()]); } main().catch(e => console.error(e)); // prints: // Post-phase action: count=4, phase=0 // Post-phase action: count=8, phase=1 // Post-phase action: count=12, phase=2 // Caught error: Oops // Post-phase action: count=16, phase=3 Remarks An AsyncBarrier allows you to coordinate multiple asynchronous operations that should advance from one phase to the next at the same time. Each participant calls and awaits the result of signalAndWait(cancelable) to indicate it has reached the barrier. Once all participants have arrived at the barrier, each participant is resumed and continue processing. As each phase completes, the currentPhaseNumber is incremented and any registerd post-phase action is executed prior to the participants being released. You can use add(participantCount) and remove(participantCount) to change the number of expected participants during execution. Constructors constructor(participantCount, postPhaseAction) Initializes a new instance of the Barrier class. Declaration constructor(participantCount: number, postPhaseAction?: (barrier: AsyncBarrier) => void | PromiseLike<void>); Parameters participantCount number The initial number of participants for the barrier. postPhaseAction (barrier: AsyncBarrier ) => void | PromiseLike <void> An action to execute between each phase. Properties currentPhaseNumber Gets the number of the Barrier's current phase. Declaration get currentPhaseNumber(): number; Property Value number participantCount Gets the total number of participants in the barrier. Declaration get participantCount(): number; Property Value number remainingParticipants Gets the number of participants in the barrier that haven't yet signaled in the current phase. Declaration get remainingParticipants(): number; Property Value number Methods add(participantCount) Notifies the Barrier there will be additional participants. Declaration add(participantCount?: number): void; Parameters participantCount number The number of additional participants. Returns void remove(participantCount) Notifies the Barrier there will be fewer participants. Declaration remove(participantCount?: number): void; Parameters participantCount number The number of participants to remove. Returns void signalAndWait(cancelable) Signals that a participant has reached the barrier and waits for all other participants to reach the barrier. Declaration signalAndWait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable An optional Cancelable used to cancel the request. Returns Promise <void>"
  },
  "api/async-canceltoken.html": {
    "href": "api/async-canceltoken.html",
    "title": "@esfx/async-canceltoken Package | @esfx API Reference",
    "keywords": "@esfx/async-canceltoken Package The @esfx/async-canceltoken package has been renamed to @esfx/canceltoken . Please update your references. See Also Please see here for documentation on the @esfx/canceltoken package."
  },
  "api/async-conditionvariable.html": {
    "href": "api/async-conditionvariable.html",
    "title": "@esfx/async-conditionvariable Package | @esfx API Reference",
    "keywords": "@esfx/async-conditionvariable Package Provides AsyncConditionVariable , an async coordination primitive. Installation npm i @esfx/async-conditionvariable Usage TypeScript JavaScript (CommonJS) import { AsyncConditionVariable } from \"@esfx/async-conditionvariable\"; import { AsyncMutex } from \"@esfx/async-mutex\"; // create a mutex used to lock a resource const m = new AsyncMutex(); // create a condition variable to maintain a list of waiters for a resource const cv = new AsyncConditionVariable(); let tasks = getTasksToPerform(); // get some array of tasks to perform. let ready = false; let currentTask!: () => Promise<number>; let taskResult!: number; async function worker() { // pause worker until we can acquire a lock on 'm'. const lk = await m.lock(); try { // pause execution and release the lock on 'm' until we are ready. await cv.wait(lk, () => ready); while (ready) { // pause execution and release the lock on 'm' until we are notified await cv.wait(lk); // We should now have the lock again for 'm', so do more work... taskResult = await currentTask(); } } finally { lk.unlock(); } } async function main() { const pWorker = worker(); // start the worker // get the next task to perform let task: (() => Promise<number>) | undefined; while (task = tasks.shift()) { // pause main until we can acquire a lock on 'm'. let lk = await m.lock(); try { currentTask = task; } finally { lk.unlock(); } cv.notifyOne(); // pause main until we can acquire a lock on 'm'. lk = await m.lock(); try { // we should now have the lock again for 'm', so process the result... console.log(taskResult); } finally { lk.unlock(); } } await pWorker; // wait for worker to complete } const { AsyncConditionVariable } = require(\"@esfx/async-conditionvariable\"); const { AsyncMutex } = require(\"@esfx/async-mutex\"); // create a mutex used to lock a resource const m = new AsyncMutex(); // create a condition variable to maintain a list of waiters for a resource const cv = new AsyncConditionVariable(); let tasks = getTasksToPerform(); // get some array of tasks to perform. let ready = false; let currentTask; let taskResult; async function worker() { // pause worker until we can acquire a lock on 'm'. const lk = await m.lock(); try { // pause execution and release the lock on 'm' until we are ready. await cv.wait(lk, () => ready); while (ready) { // pause execution and release the lock on 'm' until we are notified await cv.wait(lk); // We should now have the lock again for 'm', so do more work... taskResult = await currentTask(); } } finally { lk.unlock(); } } async function main() { const pWorker = worker(); // start the worker // get the next task to perform let task; while (task = tasks.shift()) { // pause main until we can acquire a lock on 'm'. let lk = await m.lock(); try { currentTask = task; } finally { lk.unlock(); } cv.notifyOne(); // pause main until we can acquire a lock on 'm'. lk = await m.lock(); try { // we should now have the lock again for 'm', so process the result... console.log(taskResult); } finally { lk.unlock(); } } await pWorker; // wait for worker to complete } Classes AsyncConditionVariable"
  },
  "api/async-conditionvariable/asyncconditionvariable.html": {
    "href": "api/async-conditionvariable/asyncconditionvariable.html",
    "title": "AsyncConditionVariable Class | @esfx API Reference",
    "keywords": "AsyncConditionVariable Class Package : @esfx/async-conditionvariable Declaration export declare class AsyncConditionVariable Methods notifyAll() Notifies all current waiters to reacquire their locks. Declaration notifyAll(): void; Returns void notifyOne() Notifies one waiter to reacquire its lock. Declaration notifyOne(): void; Returns void wait(lock, cancelable) Releases lock <!-- --> , waiting until notified before reacquiring lock <!-- --> . Declaration wait(lock: AsyncLockable, cancelable?: Cancelable): Promise<void>; Parameters lock AsyncLockable An AsyncLockable to release and reacquire. cancelable Cancelable A Cancelable object that can be used to cancel the request. Returns Promise <void> wait(lock, condition, cancelable) Releases lock <!-- --> , waiting until notified before reacquiring lock <!-- --> . Declaration wait(lock: AsyncLockable, condition?: () => boolean, cancelable?: Cancelable): Promise<void>; Parameters lock AsyncLockable An AsyncLockable to release and reacquire. condition () => boolean When specified, loops until condition returns true <!-- --> . cancelable Cancelable A Cancelable object that can be used to cancel the request. Returns Promise <void>"
  },
  "api/async-countdown.html": {
    "href": "api/async-countdown.html",
    "title": "@esfx/async-countdown Package | @esfx API Reference",
    "keywords": "@esfx/async-countdown Package The @esfx/async-countdown package provides the AsyncCountdownEvent class, an async coordination primitive. Installation npm i @esfx/async-countdown Usage TypeScript JavaScript (CommonJS) import { AsyncCountdownEvent } from \"@esfx/async-countdown\"; async function main() { // create an AsyncCountdownEvent with 4 participants const countdown = new AsyncCountdownEvent(4); const worker = async () => { // dome some work async... // signal completion countdown.signal(); } // start 4 workers worker(); worker(); worker(); worker(); // wait for all 4 workers to signal completion... await countdown.wait(); } main().catch(e => console.error(e)); const { AsyncCountdownEvent } = require(\"@esfx/async-countdown\"); async function main() { // create an AsyncCountdownEvent with 4 participants const countdown = new AsyncCountdownEvent(4); const worker = async () => { // dome some work async... // signal completion countdown.signal(); } // start 4 workers worker(); worker(); worker(); worker(); // wait for all 4 workers to signal completion... await countdown.wait(); } main().catch(e => console.error(e)); Classes AsyncCountdownEvent An event that is set when all participants have signaled."
  },
  "api/async-countdown/asynccountdownevent.html": {
    "href": "api/async-countdown/asynccountdownevent.html",
    "title": "AsyncCountdownEvent Class | @esfx API Reference",
    "keywords": "AsyncCountdownEvent Class Package : @esfx/async-countdown An event that is set when all participants have signaled. Declaration export declare class AsyncCountdownEvent Constructors constructor(initialCount) Initializes a new instance of the CountdownEvent class. Declaration constructor(initialCount: number); Parameters initialCount number The initial participant count. Properties initialCount Gets the number of signals initially required to set the event. Declaration get initialCount(): number; Property Value number remainingCount Gets the number of remaining signals required to set the event. Declaration get remainingCount(): number; Property Value number Methods add(count) Increments the event's current count by one or more. Declaration add(count?: number): void; Parameters count number An optional count specifying the additional number of signals for which the event will wait. Returns void reset(count) Resets the remaining and initial count to the specified value, or the initial count. Declaration reset(count?: number): void; Parameters count number An optional count specifying the number of required signals. Returns void signal(count) Registers one or more signals with the CountdownEvent, decrementing the remaining count. Declaration signal(count?: number): boolean; Parameters count number An optional count specifying the number of signals to register. Returns boolean wait(cancelable) Asynchronously waits for the event to become signaled. Declaration wait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable An optional Cancelable used to cancel the request. Returns Promise <void>"
  },
  "api/async-deferred.html": {
    "href": "api/async-deferred.html",
    "title": "@esfx/async-deferred Package | @esfx API Reference",
    "keywords": "@esfx/async-deferred Package The @esfx/async-deferred package provides the Deferred class, an async coordination primitive. Installation npm i @esfx/async-deferred Usage TypeScript JavaScript (CommonJS) import { Deferred } from \"@esfx/async-deferred\"; const deferred = new Deferred<number>(); // to resolve the deferred: deferred.resolve(1); // to reject the deferred: deferred.reject(new Error()); // get the promise for the deferred: deferred.promise; const { Deferred } = require(\"@esfx/async-deferred\"); const deferred = new Deferred(); // to resolve the deferred: deferred.resolve(1); // to reject the deferred: deferred.reject(new Error()); // get the promise for the deferred: deferred.promise; Classes Deferred Encapsulates a Promise and exposes its resolve and reject callbacks."
  },
  "api/async-deferred/deferred.html": {
    "href": "api/async-deferred/deferred.html",
    "title": "Deferred Class | @esfx API Reference",
    "keywords": "Deferred Class Package : @esfx/async-deferred Encapsulates a Promise and exposes its resolve and reject callbacks. Declaration export declare class Deferred<T> Constructors constructor() Initializes a new instance of the Deferred class. Declaration constructor(); Properties callback Gets a NodeJS-style callback that can be used to resolve or reject the promise. Declaration get callback(): T extends void ? (err: Error | null | undefined) => void : (err: Error | null | undefined, value: T) => void; Property Value T extends void ? (err: Error | null | undefined) => void : (err: Error | null | undefined, value: T) => void promise Gets the promise. Declaration get promise(): Promise<T>; Property Value Promise <T> reject Gets the callback used to reject the promise. Declaration get reject(): (reason: any) => void; Property Value (reason: any) => void resolve Gets the callback used to resolve the promise. Declaration get resolve(): (value: T | PromiseLike<T>) => void; Property Value (value: T | PromiseLike <T>) => void Methods createCallback(selector) Creates a NodeJS-style callback that can be used to resolve or reject the promise with multiple values. Declaration createCallback<A extends any[]>(selector: (...args: A) => T): (err: Error | null | undefined, ...args: A) => void; Type Parameters A Parameters selector (...args: A) => T Returns (err: Error | null | undefined, ...args: A) => void"
  },
  "api/async-delay.html": {
    "href": "api/async-delay.html",
    "title": "@esfx/async-delay Package | @esfx API Reference",
    "keywords": "@esfx/async-delay Package The @esfx/async-delay package provides the delay(msec) function. Installation npm i @esfx/async-delay Usage TypeScript JavaScript (CommonJS) import { delay } from \"@esfx/async-delay\"; async function doSomeAction() { // wait 10 seconds await delay(10 * 1000); } const { delay } = require(\"@esfx/async-delay\"); async function doSomeAction() { // wait 10 seconds await delay(10 * 1000); } Functions delay(msec) Waits the specified number of milliseconds before resolving. Declaration export declare function delay(msec: number): Promise<void>; Parameters msec number The number of milliseconds to wait before resolving. Returns Promise <void> delay(msec, value) Waits the specified number of milliseconds before resolving with the provided value. Declaration export declare function delay<T>(msec: number, value: T | PromiseLike<T>): Promise<T>; Type Parameters T Parameters msec number The number of milliseconds to wait before resolving. value T | PromiseLike <T> An optional value for the resulting Promise. Returns Promise <T> delay(cancelable, msec) Waits the specified number of milliseconds before resolving. Declaration export declare function delay(cancelable: Cancelable, msec: number): Promise<void>; Parameters cancelable Cancelable A Cancelable msec number The number of milliseconds to wait before resolving. Returns Promise <void> delay(cancelable, msec, value) Waits the specified number of milliseconds before resolving with the provided value. Declaration export declare function delay<T>(cancelable: Cancelable, msec: number, value: T | PromiseLike<T>): Promise<T>; Type Parameters T Parameters cancelable Cancelable A Cancelable msec number The number of milliseconds to wait before resolving. value T | PromiseLike <T> An optional value for the resulting Promise. Returns Promise <T>"
  },
  "api/async-iter.html": {
    "href": "api/async-iter.html",
    "title": "@esfx/async-iter Package | @esfx API Reference",
    "keywords": "@esfx/async-iter Package A collection of iteration and query APIs for ECMAScript async iterables. @esfx/async-iter-fn @esfx/async-iter-hierarchy @esfx/async-iter-ordered @esfx/async-iter-query @esfx/fn @esfx/iter-fn @esfx/iter-grouping @esfx/iter-hierarchy @esfx/iter-lookup @esfx/iter-ordered @esfx/iter-page @esfx/iter-query @esfx/equatable @esfx/collection-core @esfx/collections-hashmap @esfx/collections-hashset Installation npm i @esfx/async-iter"
  },
  "api/async-iter-fn.html": {
    "href": "api/async-iter-fn.html",
    "title": "@esfx/async-iter-fn Package | @esfx API Reference",
    "keywords": "@esfx/async-iter-fn Package An iteration and query API for ECMAScript async iterables. Installation npm i @esfx/async-iter-fn Usage TypeScript JavaScript (CommonJS) import { mapAsync, filterAsync } from \"@esfx/async-iter-fn\"; // nested const computerIsbns = mapAsync(filterAsync(books, book => book.categories.includes(\"computers\")), book => book.isbn); // or, pipe-like let _; const computerIsbns = ( _= books, _= filterAsync(_, book => book.categories.includes(\"computers\")), _= mapAsync(_, book => book.isbn), _); // or, with actual pipes (if you are using a transpiler with support for Hack-style) const computerIsbns = books |> filterAsync(%, book => book.categories.includes(\"computers\")) |> mapAsync(%, book => book.isbn); const { mapAsync, filterAsync } = require(\"@esfx/async-iter-fn\"); // nested const computerIsbns = mapAsync(filterAsync(books, book => book.categories.includes(\"computers\")), book => book.isbn); // or, pipe-like let _; const computerIsbns = ( _= books, _= filterAsync(_, book => book.categories.includes(\"computers\")), _= mapAsync(_, book => book.isbn), _); // or, with actual pipes (if you are using a transpiler with support for Hack-style) const computerIsbns = books |> filterAsync(%, book => book.categories.includes(\"computers\")) |> mapAsync(%, book => book.isbn); Interfaces ConsumeAsyncOptions Functions ancestorsAndSelfAsync(source, predicate) Selects the ancestors of each node in the iterable, along with the node itself. This is equivalent to the ancestor-or-self::* selector in XPath. Hierarchy Declaration export declare function ancestorsAndSelfAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> ancestorsAndSelfAsync(source, predicate) Declaration export declare function ancestorsAndSelfAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> ancestorsAsync(source, predicate) Selects the ancestors of each node in the iterable. This is equivalent to the ancestor::* selector in XPath. Hierarchy Declaration export declare function ancestorsAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> ancestorsAsync(source, predicate) Declaration export declare function ancestorsAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> appendAsync(source, value) Creates an AsyncIterable for the elements of source with the provided value appended to the end. Declaration export declare function appendAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, value: PromiseLike<T> | T): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> The AsyncIterable or Iterable object to append to. value PromiseLike <T> | T The value to append. Subquery Returns AsyncHierarchyIterable <TNode, T> appendAsync(source, value) Creates an AsyncIterable for the elements of source with the provided value appended to the end. Declaration export declare function appendAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, value: PromiseLike<T> | T): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> The AsyncIterable or Iterable object to append to. value PromiseLike <T> | T The value to append. Subquery Returns AsyncIterable <T> averageAsync(source) Computes the average for a series of numbers. NOTE: If any element is not a number <!-- --> , this overload will throw. Declaration export declare function averageAsync(source: AsyncIterable<number> | Iterable<PromiseLike<number> | number>): Promise<number>; Parameters source AsyncIterable <number> | Iterable < PromiseLike <number> | number> An AsyncIterable or Iterable object. Scalar Returns Promise <number> averageAsync(source, elementSelector) Computes the average for a series of numbers. Declaration export declare function averageAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, elementSelector: (element: T) => PromiseLike<number> | number): Promise<number>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. elementSelector (element: T) => PromiseLike <number> | number A callback used to convert a value in source to a number. Scalar Returns Promise <number> bottomMostAsync(source, predicate, equaler) Creates an AsyncHierarchyIterable for the bottom-most elements. Elements of source that are an ancestor of any other element of source are removed. Declaration export declare function bottomMostAsync<TNode, T extends TNode, U extends T>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => element is U, equaler?: Equaler<TNode>): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncHierarchyIterable or HierarchyIterable object. predicate (element: T) => element is U An optional callback used to filter the results. equaler Equaler <TNode> An optional Equaler used to compare equality between nodes. Hierarchy Returns AsyncHierarchyIterable <TNode, U> bottomMostAsync(source, predicate, equaler) Creates an AsyncHierarchyIterable for the bottom-most elements. Elements of source that are an ancestor of any other element of source are removed. Declaration export declare function bottomMostAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate?: (element: T) => PromiseLike<boolean> | boolean, equaler?: Equaler<TNode>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncHierarchyIterable or HierarchyIterable object. predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to filter the results. equaler Equaler <TNode> An optional Equaler used to compare equality between nodes. Hierarchy Returns AsyncHierarchyIterable <TNode, T> childrenAsync(source, predicate) Selects the children of each node in the iterable. This is equivalent to the child::* selector in XPath, or the > combinator in CSS. Hierarchy Declaration export declare function childrenAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> childrenAsync(source, predicate) Declaration export declare function childrenAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> concatAsync(left, right) Creates an AsyncIterable that concatenates a AsyncIterable or Iterable object with an AsyncIterable or Iterable object. Declaration export declare function concatAsync<TNode, T extends TNode>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. Subquery Returns AsyncHierarchyIterable <TNode, T> concatAsync(left, right) Creates an AsyncIterable that concatenates an AsyncIterable or Iterable object with a AsyncIterable or Iterable object. Declaration export declare function concatAsync<TNode, T extends TNode>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. Subquery Returns AsyncHierarchyIterable <TNode, T> concatAsync(left, right) Creates an AsyncIterable that concatenates two AsyncIterable or Iterable objects. Declaration export declare function concatAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncIterable<T>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. Subquery Returns AsyncIterable <T> consumeAsync(iterator, options) Creates an [[AsyncIterable]] that, when iterated, consumes the provided [[AsyncIterator]]. Declaration export declare function consumeAsync<T>(iterator: AsyncIterator<T>, options?: ConsumeAsyncOptions): AsyncIterable<T>; Type Parameters T Parameters iterator AsyncIterator <T> An [[AsyncIterator]] object. Query options ConsumeAsyncOptions Returns AsyncIterable <T> continuousAsync(value) Creates an [[AsyncIterable]] that repeats the provided value forever. Declaration export declare function continuousAsync<T>(value: PromiseLike<T> | T): AsyncIterable<T>; Type Parameters T Parameters value PromiseLike <T> | T The value for each element of the [[AsyncIterable]]. Query Returns AsyncIterable <T> copyToAsync(source, collection, start, count) Writes each element of a source iterable to a destination array. Declaration export declare function copyToAsync<T, U extends IndexedCollection<T> | T[]>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, collection: U, start?: number, count?: number): Promise<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. collection U The destination array or IndexedCollection <!-- --> . start number The offset into the array at which to start writing. count number The number of elements to write to the array. Scalar Returns Promise <U> correspondsAsync(left, right, equaler) Computes a scalar value indicating whether every element in left corresponds to a matching element in right at the same position. Declaration export declare function correspondsAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> correspondsAsync(left, right, equaler) Computes a scalar value indicating whether every element in left corresponds to a matching element in right at the same position. Declaration export declare function correspondsAsync<T, U>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters T U Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> correspondsByAsync(left, right, keySelector) Computes a scalar value indicating whether the key for every element in left corresponds to a matching key in right at the same position. Declaration export declare function correspondsByAsync<T, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K): Promise<boolean>; Type Parameters T K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. Scalar Returns Promise <boolean> correspondsByAsync(left, right, leftKeySelector, rightKeySelector, keyEqualer) Computes a scalar value indicating whether the key for every element in left corresponds to a matching key in right at the same position. Declaration export declare function correspondsByAsync<T, U, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, leftKeySelector: (element: T) => K, rightKeySelector: (element: U) => K, keyEqualer?: EqualityComparison<K> | Equaler<K>): Promise<boolean>; Type Parameters T U K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. leftKeySelector (element: T) => K A callback used to select the key for each element in left <!-- --> . rightKeySelector (element: U) => K A callback used to select the key for each element in right <!-- --> . keyEqualer EqualityComparison <K> | Equaler <K> An optional callback used to compare the equality of two keys. Scalar Returns Promise <boolean> countAsync(source, predicate) Counts the number of elements, optionally filtering elements using the supplied callback. Declaration export declare function countAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<number>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <number> defaultIfEmptyAsync(source, defaultValue) Creates an AsyncIterable that contains the provided default value if source contains no elements. Declaration export declare function defaultIfEmptyAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, defaultValue: PromiseLike<T> | T): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. defaultValue PromiseLike <T> | T The default value. Subquery Returns AsyncHierarchyIterable <TNode, T> defaultIfEmptyAsync(source, defaultValue) Creates an AsyncIterable that contains the provided default value if source contains no elements. Declaration export declare function defaultIfEmptyAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, defaultValue: PromiseLike<T> | T): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. defaultValue PromiseLike <T> | T The default value. Subquery Returns AsyncIterable <T> descendantsAndSelfAsync(source, predicate) Selects the descendents of each node in the iterable, along with the node itself. This is equivalent to the descendant-or-self::* selector in XPath. Hierarchy Declaration export declare function descendantsAndSelfAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> descendantsAndSelfAsync(source, predicate) Declaration export declare function descendantsAndSelfAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> descendantsAsync(source, predicate) Selects the descendents of each node in the iterable. This is equivalent to the descendant::* selector in XPath, or the (space) combinator in CSS. Hierarchy Declaration export declare function descendantsAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> descendantsAsync(source, predicate) Declaration export declare function descendantsAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> distinctAsync(source, equaler) Creates an AsyncIterable for the distinct elements of source <!-- --> . Declaration export declare function distinctAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, equaler?: Equaler<T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare element equality. Subquery Returns AsyncHierarchyIterable <TNode, T> distinctAsync(source, equaler) Creates an AsyncIterable for the distinct elements of source. Declaration export declare function distinctAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare element equality. Subquery Returns AsyncIterable <T> distinctByAsync(source, keySelector, keyEqualer) Creates an AsyncIterable for the distinct elements of source <!-- --> . Declaration export declare function distinctByAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (value: T) => K, keyEqualer?: Equaler<K>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. keySelector (value: T) => K A callback used to select the key to determine uniqueness. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncHierarchyIterable <TNode, T> distinctByAsync(source, keySelector, keyEqualer) Creates an AsyncIterable for the distinct elements of source <!-- --> . Declaration export declare function distinctByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (value: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<T>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (value: T) => K A callback used to select the key to determine uniqueness. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable <T> dropAsync(source, count) Creates an AsyncIterable containing all elements except the first elements up to the supplied count. Declaration export declare function dropAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, count: number): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. count number The number of elements to skip. Subquery Returns AsyncHierarchyIterable <TNode, T> dropAsync(source, count) Creates an AsyncIterable containing all elements except the first elements up to the supplied count. Declaration export declare function dropAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, count: number): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. count number The number of elements to skip. Subquery Returns AsyncIterable <T> dropRightAsync(source, count) Creates an AsyncIterable containing all elements except the first elements up to the supplied count. Declaration export declare function dropRightAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, count: number): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. count number The number of elements to skip. Subquery Returns AsyncHierarchyIterable <TNode, T> dropRightAsync(source, count) Creates an AsyncIterable containing all elements except the first elements up to the supplied count. Declaration export declare function dropRightAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, count: number): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. count number The number of elements to skip. Subquery Returns AsyncIterable <T> dropUntilAsync(source, predicate) Creates an AsyncIterable containing all elements except the first elements that do not match the supplied predicate. Declaration export declare function dropUntilAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, T> dropUntilAsync(source, predicate) Creates an AsyncIterable containing all elements except the first elements that do not match the supplied predicate. Declaration export declare function dropUntilAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncIterable <T> dropWhileAsync(source, predicate) Creates an AsyncIterable containing all elements except the first elements that match the supplied predicate. Declaration export declare function dropWhileAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, T> dropWhileAsync(source, predicate) Creates an AsyncIterable containing all elements except the first elements that match the supplied predicate. Declaration export declare function dropWhileAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncIterable <T> elementAtAsync(source, offset) Finds the value at the provided offset. A negative offset starts from the last element. Declaration export declare function elementAtAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, offset: number | Index): Promise<T | undefined>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. offset number | Index An offset from the start of the iterable. Scalar Returns Promise <T | undefined> emptyAsync() Creates an AsyncIterable with no elements. Query Declaration export declare function emptyAsync<T>(): AsyncIterable<T>; Type Parameters T Returns AsyncIterable <T> endsWithAsync(left, right, equaler) Computes a scalar value indicating whether the elements of left end with the same sequence of elements in right <!-- --> . Declaration export declare function endsWithAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> endsWithAsync(left, right, equaler) Computes a scalar value indicating whether the elements of left end with the same sequence of elements in right <!-- --> . Declaration export declare function endsWithAsync<T, U>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters T U Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> everyAsync(source, predicate) Computes a scalar value indicating whether all elements match the supplied callback. Declaration export declare function everyAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => PromiseLike<boolean> | boolean): Promise<boolean>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Scalar Returns Promise <boolean> exceptAsync(left, right, equaler) Creates an AsyncIterable for the set difference between two AsyncIterable or Iterable objects. Declaration export declare function exceptAsync<TNode, T extends TNode>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncHierarchyIterable <TNode, T> exceptAsync(left, right, equaler) Creates an AsyncIterable for the set difference between two AsyncIterable or Iterable objects. Declaration export declare function exceptAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncIterable<T>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncIterable <T> exceptByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the set difference between two AsyncIterable or Iterable objects, where set identity is determined by the selected key. Declaration export declare function exceptByAsync<TNode, T extends TNode, K>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncHierarchyIterable <TNode, T> exceptByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the set difference between two AsyncIterable or Iterable objects, where set identity is determined by the selected key. Declaration export declare function exceptByAsync<T, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<T>; Type Parameters T K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable <T> excludeAsync(source, values) Creates an AsyncIterable with every instance of the specified value removed. Declaration export declare function excludeAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, ...values: [PromiseLike<T> | T, ...(PromiseLike<T> | T)[]]): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. values [ PromiseLike <T> | T, ...( PromiseLike <T> | T)[]] The values to exclude. Subquery Returns AsyncHierarchyIterable <TNode, T> excludeAsync(source, values) Creates an AsyncIterable with every instance of the specified value removed. Declaration export declare function excludeAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, ...values: [PromiseLike<T> | T, ...(PromiseLike<T> | T)[]]): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. values [ PromiseLike <T> | T, ...( PromiseLike <T> | T)[]] The values to exclude. Subquery Returns AsyncIterable <T> filterAsync(source, predicate) Creates an AsyncIterable whose elements match the supplied predicate. Declaration export declare function filterAsync<TNode, T extends TNode, U extends T>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. predicate (element: T, offset: number) => element is U A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, U> filterAsync(source, predicate) Creates an AsyncIterable whose elements match the supplied predicate. Declaration export declare function filterAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. predicate (element: T, offset: number) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, T> filterAsync(source, predicate) Creates an AsyncIterable whose elements match the supplied predicate. Declaration export declare function filterAsync<T, U extends T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T, offset: number) => element is U): AsyncIterable<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => element is U A callback used to match each element. Subquery Returns AsyncIterable <U> filterAsync(source, predicate) Creates an AsyncIterable whose elements match the supplied predicate. Declaration export declare function filterAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncIterable <T> filterByAsync(source, keySelector, predicate) Creates an AsyncIterable where the selected key for each element matches the supplied predicate. Declaration export declare function filterByAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, predicate: (key: K, offset: number) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => PromiseLike <boolean> | boolean A callback used to match each key. Subquery Returns AsyncHierarchyIterable <TNode, T> filterByAsync(source, keySelector, predicate) Creates an AsyncIterable where the selected key for each element matches the supplied predicate. Declaration export declare function filterByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, predicate: (key: K, offset: number) => PromiseLike<boolean> | boolean): AsyncIterable<T>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => PromiseLike <boolean> | boolean A callback used to match each key. Subquery Returns AsyncIterable <T> filterDefinedAsync(source) Creates an AsyncIterable whose elements are neither null nor undefined <!-- --> . Declaration export declare function filterDefinedAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>): AsyncHierarchyIterable<TNode, NonNullable<T>>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. Subquery Returns AsyncHierarchyIterable <TNode, NonNullable <T>> filterDefinedAsync(source) Creates an AsyncIterable whose elements are neither null nor undefined <!-- --> . Declaration export declare function filterDefinedAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncIterable<NonNullable<T>>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. Subquery Returns AsyncIterable < NonNullable <T>> filterDefinedByAsync(source, keySelector) Creates an AsyncIterable where the selected key for each element is neither null nor undefined <!-- --> . Declaration export declare function filterDefinedByAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (value: T) => K): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (value: T) => K A callback used to select the key for each element. Subquery Returns AsyncHierarchyIterable <TNode, T> filterDefinedByAsync(source, keySelector) Creates an AsyncIterable where the selected key for each element is neither null nor undefined <!-- --> . Declaration export declare function filterDefinedByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (value: T) => K): AsyncIterable<T>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (value: T) => K A callback used to select the key for each element. Subquery Returns AsyncIterable <T> filterNotAsync(source, predicate) Creates an AsyncIterable whose elements do not match the supplied predicate. Declaration export declare function filterNotAsync<TNode, T extends TNode, U extends T>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. predicate (element: T, offset: number) => element is U A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, U> filterNotAsync(source, predicate) Creates an AsyncIterable whose elements do not match the supplied predicate. Declaration export declare function filterNotAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. predicate (element: T, offset: number) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, T> filterNotAsync(source, predicate) Creates an AsyncIterable whose elements do not match the supplied predicate. Declaration export declare function filterNotAsync<T, U extends T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T, offset: number) => element is U): AsyncIterable<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => element is U A callback used to match each element. Subquery Returns AsyncIterable <U> filterNotAsync(source, predicate) Creates an AsyncIterable whose elements do not match the supplied predicate. Declaration export declare function filterNotAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncIterable <T> filterNotByAsync(source, keySelector, predicate) Creates an AsyncIterable where the selected key for each element does not match the supplied predicate. Declaration export declare function filterNotByAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, predicate: (key: K, offset: number) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => PromiseLike <boolean> | boolean A callback used to match each key. Subquery Returns AsyncHierarchyIterable <TNode, T> filterNotByAsync(source, keySelector, predicate) Creates an AsyncIterable where the selected key for each element does not match the supplied predicate. Declaration export declare function filterNotByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, predicate: (key: K, offset: number) => PromiseLike<boolean> | boolean): AsyncIterable<T>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => PromiseLike <boolean> | boolean A callback used to match each key. Subquery Returns AsyncIterable <T> filterNotDefinedByAsync(source, keySelector) Creates an AsyncIterable where the selected key for each element is either null or undefined <!-- --> . Declaration export declare function filterNotDefinedByAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (value: T) => K): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (value: T) => K A callback used to select the key for each element. Subquery Returns AsyncHierarchyIterable <TNode, T> filterNotDefinedByAsync(source, keySelector) Creates an AsyncIterable where the selected key for each element is either null or undefined <!-- --> . Declaration export declare function filterNotDefinedByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (value: T) => K): AsyncIterable<T>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (value: T) => K A callback used to select the key for each element. Subquery Returns AsyncIterable <T> firstAsync(source, predicate) Gets the first element, optionally filtering elements using the supplied callback. Declaration export declare function firstAsync<T, U extends T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => element is U): Promise<U | undefined>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns Promise <U | undefined> firstAsync(source, predicate) Gets the first element, optionally filtering elements using the supplied callback. Declaration export declare function firstAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<T | undefined>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <T | undefined> firstChildAsync(source, predicate) Selects the first child of each node in the iterable. This is equivalent to the child::*[first()] selector in XPath, or the :first-child pseudo class in CSS. Hierarchy Declaration export declare function firstChildAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> firstChildAsync(source, predicate) Declaration export declare function firstChildAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> flatMapAsync(source, projection) Creates an AsyncIterable that iterates the results of applying a callback to each element of source <!-- --> . Declaration export declare function flatMapAsync<T, U>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, projection: (element: T) => AsyncIterable<U> | Iterable<PromiseLike<U> | U>): AsyncIterable<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> A [[Queryable]] object. projection (element: T) => AsyncIterable <U> | Iterable < PromiseLike <U> | U> A callback used to map each element into an iterable. Subquery Returns AsyncIterable <U> flatMapAsync(source, projection, resultSelector) Creates an AsyncIterable that iterates the results of applying a callback to each element of source <!-- --> . Declaration export declare function flatMapAsync<T, U, R>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, projection: (element: T) => AsyncIterable<U> | Iterable<PromiseLike<U> | U>, resultSelector: (element: T, innerElement: U) => PromiseLike<R> | R): AsyncIterable<R>; Type Parameters T U R Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> A [[Queryable]] object. projection (element: T) => AsyncIterable <U> | Iterable < PromiseLike <U> | U> A callback used to map each element into an iterable. Subquery resultSelector (element: T, innerElement: U) => PromiseLike <R> | R Returns AsyncIterable <R> followingAsync(source, predicate) Selects the nodes that follow each node in the iterable. This is equivalent to the following-sibling::* selector in XPath or the ~ combinator in CSS. Hierarchy Declaration export declare function followingAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> followingAsync(source, predicate) Declaration export declare function followingAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> followingSiblingsAsync(source, predicate) Selects the siblings that follow each node in the iterable. This is equivalent to the following-sibling::* selector in XPath or the ~ combinator in CSS. Hierarchy Declaration export declare function followingSiblingsAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> followingSiblingsAsync(source, predicate) Declaration export declare function followingSiblingsAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> forEachAsync(source, callback) Invokes a callback for each element of source <!-- --> . Declaration export declare function forEachAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, callback: (element: T, offset: number) => void | PromiseLike<void>): Promise<void>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. callback (element: T, offset: number) => void | PromiseLike <void> The callback to invoke. Scalar Returns Promise <void> fullJoinAsync(outer, inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates an [[AsyncIterable]] for the correlated elements between an outer [[AsyncQueryable]] object and an inner [[AsyncQueryable]] object. Declaration export declare function fullJoinAsync<O, I, K, R>(outer: AsyncIterable<O> | Iterable<PromiseLike<O> | O>, inner: AsyncIterable<I> | Iterable<PromiseLike<I> | I>, outerKeySelector: (element: O) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: O | undefined, inner: I | undefined) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncIterable<R>; Type Parameters O I K R Parameters outer AsyncIterable <O> | Iterable < PromiseLike <O> | O> An [[AsyncQueryable]] object. inner AsyncIterable <I> | Iterable < PromiseLike <I> | I> An [[AsyncQueryable]] object. outerKeySelector (element: O) => K A callback used to select the key for an element in outer <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in inner <!-- --> . resultSelector (outer: O | undefined, inner: I | undefined) => PromiseLike <R> | R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An [[Equaler]] object used to compare key equality. Join Returns AsyncIterable <R> generateAsync(count, generator) Creates an [[AsyncIterable]] whose values are provided by a callback executed a provided number of times. Declaration export declare function generateAsync<T>(count: number, generator: (offset: number) => PromiseLike<T> | T): AsyncIterable<T>; Type Parameters T Parameters count number The number of times to execute the callback. generator (offset: number) => PromiseLike <T> | T The callback to execute. Query Returns AsyncIterable <T> groupByAsync(source, keySelector, keyEqualer) Groups each element of an AsyncIterable by its key. Declaration export declare function groupByAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<HierarchyGrouping<K, TNode, T>>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable < HierarchyGrouping <K, TNode, T>> groupByAsync(source, keySelector, elementSelector, resultSelector, keyEqualer) Groups each element of an AsyncIterable by its key. Declaration export declare function groupByAsync<TNode, T extends TNode, K, R>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, elementSelector: undefined, resultSelector: (key: K, elements: HierarchyIterable<TNode, T>) => R, keyEqualer?: Equaler<K>): AsyncIterable<R>; Type Parameters TNode T K R Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector undefined A callback used to select a value for an element. resultSelector (key: K, elements: HierarchyIterable <TNode, T>) => R A callback used to select a result from a group. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable <R> groupByAsync(source, keySelector, keyEqualer) Groups each element of an AsyncIterable by its key. Declaration export declare function groupByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<Grouping<K, T>>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable < Grouping <K, T>> groupByAsync(source, keySelector, elementSelector, keyEqualer) Groups each element of an AsyncIterable by its key. Declaration export declare function groupByAsync<T, K, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, keyEqualer?: Equaler<K>): AsyncIterable<Grouping<K, V>>; Type Parameters T K V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => PromiseLike <V> | V A callback used to select a value for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable < Grouping <K, V>> groupByAsync(source, keySelector, elementSelector, resultSelector, keyEqualer) Groups each element of an AsyncIterable by its key. Declaration export declare function groupByAsync<T, K, V, R>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, resultSelector: (key: K, elements: Iterable<V>) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncIterable<R>; Type Parameters T K V R Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => PromiseLike <V> | V A callback used to select a value for an element. resultSelector (key: K, elements: Iterable <V>) => PromiseLike <R> | R A callback used to select a result from a group. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable <R> groupJoinAsync(outer, inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates a grouped [[AsyncIterable]] for the correlated elements between an outer [[AsyncQueryable]] object and an inner [[AsyncQueryable]] object. Declaration export declare function groupJoinAsync<O, I, K, R>(outer: AsyncIterable<O> | Iterable<PromiseLike<O> | O>, inner: AsyncIterable<I> | Iterable<PromiseLike<I> | I>, outerKeySelector: (element: O) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: O, inner: Iterable<I>) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncIterable<R>; Type Parameters O I K R Parameters outer AsyncIterable <O> | Iterable < PromiseLike <O> | O> An [[AsyncQueryable]] object. inner AsyncIterable <I> | Iterable < PromiseLike <I> | I> An [[AsyncQueryable]] object. outerKeySelector (element: O) => K A callback used to select the key for an element in outer <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in inner <!-- --> . resultSelector (outer: O, inner: Iterable <I>) => PromiseLike <R> | R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An [[Equaler]] object used to compare key equality. Join Returns AsyncIterable <R> includesAsync(source, value, equaler) Computes a scalar value indicating whether the provided value is included in an AsyncIterable <!-- --> . Declaration export declare function includesAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, value: T, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. value T A value. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> includesAsync(source, value, equaler) Computes a scalar value indicating whether the provided value is included in an AsyncIterable <!-- --> . Declaration export declare function includesAsync<T, U>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, value: U, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. value U A value. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> includesSequenceAsync(left, right, equaler) Computes a scalar value indicating whether the elements of left include an exact sequence of elements from right <!-- --> . Declaration export declare function includesSequenceAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns Promise <boolean> includesSequenceAsync(left, right, equaler) Computes a scalar value indicating whether the elements of left include an exact sequence of elements from right <!-- --> . Declaration export declare function includesSequenceAsync<T, U>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters T U Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns Promise <boolean> intersectAsync(left, right, equaler) Creates an AsyncIterable for the set intersection of a AsyncIterable or Iterable object and another AsyncIterable or Iterable object. Declaration export declare function intersectAsync<TNode, T extends TNode>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncHierarchyIterable <TNode, T> intersectAsync(left, right, equaler) Creates an AsyncIterable for the set intersection of two AsyncIterable or Iterable objects. Declaration export declare function intersectAsync<TNode, T extends TNode>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, equaler?: Equaler<T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncHierarchyIterable <TNode, T> intersectAsync(left, right, equaler) Creates an AsyncIterable for the set intersection of two AsyncIterable or Iterable objects. Declaration export declare function intersectAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncIterable<T>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncIterable <T> intersectByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the set intersection of a AsyncIterable or Iterable object and another AsyncIterable or Iterable object, where set identity is determined by the selected key. Declaration export declare function intersectByAsync<TNode, T extends TNode, K>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncHierarchyIterable <TNode, T> intersectByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the set intersection of two AsyncIterable or Iterable objects, where set identity is determined by the selected key. Declaration export declare function intersectByAsync<TNode, T extends TNode, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncHierarchyIterable <TNode, T> intersectByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the set intersection of two AsyncIterable or Iterable objects, where set identity is determined by the selected key. Declaration export declare function intersectByAsync<T, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<T>; Type Parameters T K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable <T> intoAsync(source, callback) Pass the entire source to the provided callback, returning the result. Declaration export declare function intoAsync<T, S extends AsyncIterable<T> | Iterable<PromiseLike<T> | T>, R>(source: S, callback: (source: S) => R): R; Type Parameters T S R Parameters source S An AsyncIterable or Iterable object. callback (source: S) => R A callback function. Sub AsyncIterable Returns R joinAsync(outer, inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates an [[AsyncIterable]] for the correlated elements of two [[AsyncQueryable]] objects. Declaration export declare function joinAsync<O, I, K, R>(outer: AsyncIterable<O> | Iterable<PromiseLike<O> | O>, inner: AsyncIterable<I> | Iterable<PromiseLike<I> | I>, outerKeySelector: (element: O) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: O, inner: I) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncIterable<R>; Type Parameters O I K R Parameters outer AsyncIterable <O> | Iterable < PromiseLike <O> | O> An [[AsyncQueryable]]. inner AsyncIterable <I> | Iterable < PromiseLike <I> | I> An [[AsyncQueryable]]. outerKeySelector (element: O) => K A callback used to select the key for an element in outer <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in inner <!-- --> . resultSelector (outer: O, inner: I) => PromiseLike <R> | R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An [[Equaler]] object used to compare key equality. Join Returns AsyncIterable <R> lastAsync(source, predicate) Gets the last element of an AsyncIterable or Iterable <!-- --> , optionally filtering elements using the supplied callback. Declaration export declare function lastAsync<T, U extends T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => element is U): Promise<U | undefined>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns Promise <U | undefined> lastAsync(source, predicate) Gets the last element of an AsyncIterable or Iterable <!-- --> , optionally filtering elements using the supplied callback. Declaration export declare function lastAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<T | undefined>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <T | undefined> lastChildAsync(source, predicate) Selects the last child of each node in the iterable. This is equivalent to the child::*[last()] selector in XPath, or the :last-child pseudo class in CSS. Hierarchy Declaration export declare function lastChildAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> lastChildAsync(source, predicate) Declaration export declare function lastChildAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> mapAsync(source, selector) Creates an AsyncIterable by applying a callback to each element of an AsyncIterable or Iterable object. Declaration export declare function mapAsync<T, U>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, selector: (element: T, offset: number) => PromiseLike<U> | U): AsyncIterable<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. selector (element: T, offset: number) => PromiseLike <U> | U A callback used to map each element. Subquery Returns AsyncIterable <U> materializeAsync(source) Eagerly evaluate an AsyncIterable or Iterable object, returning an AsyncIterable for the resolved elements of the original sequence. Declaration export declare function materializeAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object. Scalar Returns AsyncHierarchyIterable <TNode, T> materializeAsync(source) Eagerly evaluate an AsyncIterable or Iterable object, returning an AsyncIterable for the resolved elements of the original sequence. Declaration export declare function materializeAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> A AsyncIterable or Iterable object. Scalar Returns AsyncIterable <T> maxAsync(source, comparer) Gets the maximum element of an AsyncIterable <!-- --> , optionally comparing elements using the supplied callback. Declaration export declare function maxAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, comparer?: Comparison<T> | Comparer<T>): Promise<T | undefined>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. comparer Comparison <T> | Comparer <T> An optional callback used to compare two elements. Scalar Returns Promise <T | undefined> maxByAsync(source, keySelector, keyComparer) Gets the maximum element of an AsyncIterable <!-- --> , optionally comparing the keys of each element using the supplied callback. Declaration export declare function maxByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (value: T) => K, keyComparer?: Comparison<K> | Comparer<K>): Promise<T | undefined>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (value: T) => K A callback used to choose the key to compare. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare the keys. Scalar Returns Promise <T | undefined> minAsync(source, comparer) Gets the minimum element of an AsyncIterable <!-- --> , optionally comparing elements using the supplied callback. Declaration export declare function minAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, comparer?: Comparison<T> | Comparer<T>): Promise<T | undefined>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. comparer Comparison <T> | Comparer <T> An optional callback used to compare two elements. Scalar Returns Promise <T | undefined> minByAsync(source, keySelector, keyComparer) Gets the minimum element of an AsyncIterable <!-- --> , optionally comparing the keys of each element using the supplied callback. Declaration export declare function minByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (value: T) => K, keyComparer?: Comparison<K> | Comparer<K>): Promise<T | undefined>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (value: T) => K A callback used to choose the key to compare. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare the keys. Scalar Returns Promise <T | undefined> nthChildAsync(source, offset, predicate) Creates an AsyncHierarchyIterable for the child of each element at the specified offset. A negative offset starts from the last child. Declaration export declare function nthChildAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode, U> | HierarchyIterable<TNode, U>, offset: number | Index, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode, U> | HierarchyIterable <TNode, U> An AsyncHierarchyIterable or HierarchyIterable object. offset number | Index The offset for the child. predicate (element: TNode) => element is U An optional callback used to filter the results. Hierarchy Returns AsyncHierarchyIterable <TNode, U> nthChildAsync(source, offset, predicate) Creates an AsyncHierarchyIterable for the child of each element at the specified offset. A negative offset starts from the last child. Declaration export declare function nthChildAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, offset: number | Index, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> An AsyncHierarchyIterable or HierarchyIterable object. offset number | Index The offset for the child. predicate (element: TNode) => PromiseLike <boolean> | boolean An optional callback used to filter the results. Hierarchy Returns AsyncHierarchyIterable <TNode> onceAsync(value) Creates an [[AsyncIterable]] over a single element. Declaration export declare function onceAsync<T>(value: PromiseLike<T> | T): AsyncIterable<T>; Type Parameters T Parameters value PromiseLike <T> | T The only element for the [[AsyncIterable]]. Query Returns AsyncIterable <T> orderByAsync(source, keySelector, keyComparer) Creates an AsyncOrderedIterable whose elements are sorted in ascending order by the provided key. Declaration export declare function orderByAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): AsyncOrderedHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedHierarchyIterable <TNode, T> orderByAsync(source, keySelector, keyComparer) Creates an AsyncOrderedIterable whose elements are sorted in ascending order by the provided key. Declaration export declare function orderByAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): AsyncOrderedIterable<T>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedIterable <T> orderByDescendingAsync(source, keySelector, keyComparer) Creates an AsyncOrderedIterable whose elements are sorted in descending order by the provided key. Declaration export declare function orderByDescendingAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): AsyncOrderedHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedHierarchyIterable <TNode, T> orderByDescendingAsync(source, keySelector, keyComparer) Creates an AsyncOrderedIterable whose elements are sorted in descending order by the provided key. Declaration export declare function orderByDescendingAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): AsyncOrderedIterable<T>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedIterable <T> pageByAsync(source, pageSize) Creates an AsyncIterable that splits an AsyncIterable into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration export declare function pageByAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, pageSize: number): AsyncIterable<HierarchyPage<TNode, T>>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable object. pageSize number The number of elements per page. Subquery Returns AsyncIterable < HierarchyPage <TNode, T>> pageByAsync(source, pageSize, pageSelector) Creates an AsyncIterable that splits an AsyncIterable into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration export declare function pageByAsync<TNode, T extends TNode, R>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, pageSize: number, pageSelector: (page: number, offset: number, values: HierarchyIterable<TNode, T>) => R): AsyncIterable<R>; Type Parameters TNode T R Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable object. pageSize number The number of elements per page. pageSelector (page: number, offset: number, values: HierarchyIterable <TNode, T>) => R A callback used to create a result for a page. Subquery Returns AsyncIterable <R> pageByAsync(source, pageSize) Creates an AsyncIterable that splits an AsyncIterable into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration export declare function pageByAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, pageSize: number): AsyncIterable<Page<T>>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable object. pageSize number The number of elements per page. Subquery Returns AsyncIterable < Page <T>> pageByAsync(source, pageSize, pageSelector) Creates an AsyncIterable that splits an AsyncIterable into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration export declare function pageByAsync<T, R>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, pageSize: number, pageSelector: (page: number, offset: number, values: Iterable<T>) => R): AsyncIterable<R>; Type Parameters T R Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable object. pageSize number The number of elements per page. pageSelector (page: number, offset: number, values: Iterable <T>) => R A callback used to create a result for a page. Subquery Returns AsyncIterable <R> parentsAsync(source, predicate) Selects the parent of each node in the iterable. This is equivalent to the parent::* or .. selectors in XPath. Hierarchy Declaration export declare function parentsAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> parentsAsync(source, predicate) Declaration export declare function parentsAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> patchAsync(source, start, skipCount, range) Creates an AsyncIterable for the elements of the source with the provided range patched into the results. Declaration export declare function patchAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, start: number, skipCount?: number, range?: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> A AsyncIterable or Iterable object to patch. start number The offset at which to patch the range. skipCount number The number of elements to skip from start. range AsyncIterable <T> | Iterable < PromiseLike <T> | T> The range to patch into the result. Subquery Returns AsyncHierarchyIterable <TNode, T> patchAsync(source, start, skipCount, range) Creates an AsyncIterable for the elements of the source with the provided range patched into the results. Declaration export declare function patchAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, start: number, skipCount?: number, range?: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object to patch. start number The offset at which to patch the range. skipCount number The number of elements to skip from start. range AsyncIterable <T> | Iterable < PromiseLike <T> | T> The range to patch into the result. Subquery Returns AsyncIterable <T> precedingAsync(source, predicate) Selects the nodes that precede each node in the iterable. This is equivalent to the preceding::** selector in XPath. Hierarchy Declaration export declare function precedingAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> precedingAsync(source, predicate) Declaration export declare function precedingAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> precedingSiblingsAsync(source, predicate) Selects the siblings that precede each node in the iterable. This is equivalent to the preceding-sibling::** selector in XPath. Hierarchy Declaration export declare function precedingSiblingsAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> precedingSiblingsAsync(source, predicate) Declaration export declare function precedingSiblingsAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> prependAsync(source, value) Creates an AsyncIterable for the elements of source with the provided value prepended to the beginning. Declaration export declare function prependAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, value: T): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object value. value T The value to prepend. Subquery Returns AsyncHierarchyIterable <TNode, T> prependAsync(source, value) Creates an AsyncIterable for the elements of source with the provided value prepended to the beginning. Declaration export declare function prependAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, value: PromiseLike<T> | T): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object value. value PromiseLike <T> | T The value to prepend. Subquery Returns AsyncIterable <T> reduceAsync(source, accumulator) Computes a scalar value by applying an accumulator callback over each element. Declaration export declare function reduceAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: T, element: T, offset: number) => PromiseLike<T> | T): Promise<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: T, element: T, offset: number) => PromiseLike <T> | T the callback used to compute the result. Scalar Returns Promise <T> reduceAsync(source, accumulator, seed) Computes a scalar value by applying an accumulator callback over each element. Declaration export declare function reduceAsync<T, U>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U): Promise<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U the callback used to compute the result. Scalar seed U An optional seed value. Returns Promise <U> reduceAsync(source, accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element. Declaration export declare function reduceAsync<T, U, R>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U, resultSelector: (result: U, count: number) => R | PromiseLike<R>): Promise<R>; Type Parameters T U R Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U the callback used to compute the result. seed U An optional seed value. resultSelector (result: U, count: number) => R | PromiseLike <R> An optional callback used to compute the final result. Scalar Returns Promise <R> reduceRightAsync(source, accumulator) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration export declare function reduceRightAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: T, element: T, offset: number) => PromiseLike<T> | T): Promise<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: T, element: T, offset: number) => PromiseLike <T> | T the callback used to compute the result. Scalar Returns Promise <T> reduceRightAsync(source, accumulator, seed) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration export declare function reduceRightAsync<T, U>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U): Promise<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U the callback used to compute the result. seed U An optional seed value. Scalar Returns Promise <U> reduceRightAsync(source, accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration export declare function reduceRightAsync<T, U, R>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U, resultSelector: (result: U, count: number) => R | PromiseLike<R>): Promise<R>; Type Parameters T U R Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U the callback used to compute the result. seed U An optional seed value. resultSelector (result: U, count: number) => R | PromiseLike <R> An optional callback used to compute the final result. Scalar Returns Promise <R> repeatAsync(value, count) Creates an Iterable for a value repeated a provided number of times. Declaration export declare function repeatAsync<T>(value: PromiseLike<T> | T, count: number): AsyncIterable<T>; Type Parameters T Parameters value PromiseLike <T> | T The value for each element of the Iterable. count number The number of times to repeat the value. Query Returns AsyncIterable <T> reverseAsync(source) Creates an AsyncIterable whose elements are in the reverse order. Subquery Declaration export declare function reverseAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> Returns AsyncHierarchyIterable <TNode, T> reverseAsync(source) Creates an AsyncIterable whose elements are in the reverse order. Subquery Declaration export declare function reverseAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> Returns AsyncIterable <T> rootAsync(source, predicate) Selects the root element of each node in the iterable. This is equivalent to the / selector in XPath, or the :root selector in CSS. Hierarchy Declaration export declare function rootAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> rootAsync(source, predicate) Declaration export declare function rootAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> scanAsync(source, accumulator) Creates an AsyncIterable containing the cumulative results of applying the provided callback to each element. Declaration export declare function scanAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: T, element: T, offset: number) => PromiseLike<T> | T): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: T, element: T, offset: number) => PromiseLike <T> | T The callback used to compute each result. Subquery Returns AsyncIterable <T> scanAsync(source, accumulator, seed) Creates an AsyncIterable containing the cumulative results of applying the provided callback to each element. Declaration export declare function scanAsync<T, U>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U): AsyncIterable<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U The callback used to compute each result. seed U An optional seed value. Subquery Returns AsyncIterable <U> scanRightAsync(source, accumulator) Creates an AsyncIterable containing the cumulative results of applying the provided callback to each element in reverse. Declaration export declare function scanRightAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: T, element: T, offset: number) => PromiseLike<T> | T): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: T, element: T, offset: number) => PromiseLike <T> | T The callback used to compute each result. Subquery Returns AsyncIterable <T> scanRightAsync(source, accumulator, seed) Creates an AsyncIterable containing the cumulative results of applying the provided callback to each element in reverse. Declaration export declare function scanRightAsync<T, U>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U): AsyncIterable<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U The callback used to compute each result. seed U An optional seed value. Subquery Returns AsyncIterable <U> selfAsync(source, predicate) Selects each node in the iterable. This is equivalent to the self::* or . selectors in XPath. Hierarchy Declaration export declare function selfAsync<TNode, T extends TNode, U extends T>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> predicate (element: T) => element is U Returns AsyncHierarchyIterable <TNode, U> selfAsync(source, predicate) Declaration export declare function selfAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate?: (element: T) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> predicate (element: T) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode, T> siblingsAndSelfAsync(source, predicate) Selects the siblings of each node in the iterable, including the node itself. This equivalent to the ../* selector in XPath. Hierarchy Declaration export declare function siblingsAndSelfAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> siblingsAndSelfAsync(source, predicate) Declaration export declare function siblingsAndSelfAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> siblingsAsync(source, predicate) Selects the siblings of each node in the iterable, excluding the node itself. Hierarchy Declaration export declare function siblingsAsync<TNode, U extends TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns AsyncHierarchyIterable <TNode, U> siblingsAsync(source, predicate) Declaration export declare function siblingsAsync<TNode>(source: AsyncHierarchyIterable<TNode> | HierarchyIterable<TNode>, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode>; Type Parameters TNode Parameters source AsyncHierarchyIterable <TNode> | HierarchyIterable <TNode> predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyIterable <TNode> singleAsync(source, predicate) Gets the only element, or returns undefined <!-- --> . Declaration export declare function singleAsync<T, U extends T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => element is U): Promise<U | undefined>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns Promise <U | undefined> singleAsync(source, predicate) Gets the only element, or returns undefined <!-- --> . Declaration export declare function singleAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<T | undefined>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <T | undefined> someAsync(source, predicate) Computes a scalar value indicating whether source contains any elements, optionally filtering the elements using the supplied callback. Declaration export declare function someAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<boolean>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <boolean> spanAsync(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that match the supplied predicate, and whose second element is an AsyncIterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second AsyncIterable is lazily evaluated. Declaration export declare function spanAsync<TNode, T extends TNode, U extends T>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => element is U): Promise<[HierarchyIterable<TNode, U>, AsyncHierarchyIterable<TNode, T>]>; Type Parameters TNode T U Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => element is U The predicate used to match elements. Scalar Returns Promise <[ HierarchyIterable <TNode, U>, AsyncHierarchyIterable <TNode, T>]> spanAsync(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that match the supplied predicate, and whose second element is an AsyncIterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second AsyncIterable is lazily evaluated. Declaration export declare function spanAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): Promise<[HierarchyIterable<TNode, T>, AsyncHierarchyIterable<TNode, T>]>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => PromiseLike <boolean> | boolean The predicate used to match elements. Scalar Returns Promise <[ HierarchyIterable <TNode, T>, AsyncHierarchyIterable <TNode, T>]> spanAsync(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that match the supplied predicate, and whose second element is an AsyncIterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second AsyncIterable is lazily evaluated. Declaration export declare function spanAsync<T, U extends T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T, offset: number) => element is U): Promise<[Iterable<U>, AsyncIterable<T>]>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => element is U The predicate used to match elements. Scalar Returns Promise <[ Iterable <U>, AsyncIterable <T>]> spanAsync(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that match the supplied predicate, and whose second element is an AsyncIterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second AsyncIterable is lazily evaluated. Declaration export declare function spanAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): Promise<[Iterable<T>, AsyncIterable<T>]>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => PromiseLike <boolean> | boolean The predicate used to match elements. Scalar Returns Promise <[ Iterable <T>, AsyncIterable <T>]> spanMapAsync(source, keySelector, keyEqualer) Creates a subquery whose elements are the contiguous ranges of elements that share the same key. Declaration export declare function spanMapAsync<TNode, T extends TNode, K>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<HierarchyGrouping<K, TNode, T>>; Type Parameters TNode T K Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler used to compare key equality. Grouping Returns AsyncIterable < HierarchyGrouping <K, TNode, T>> spanMapAsync(source, keySelector, elementSelector, spanSelector, keyEqualer) Creates a subquery whose elements are the contiguous ranges of elements that share the same key. Declaration export declare function spanMapAsync<TNode, T extends TNode, K, R>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, elementSelector: undefined, spanSelector: (key: K, elements: HierarchyIterable<TNode, T>) => R, keyEqualer?: Equaler<K>): AsyncIterable<R>; Type Parameters TNode T K R Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector undefined A callback used to select a value for an element. spanSelector (key: K, elements: HierarchyIterable <TNode, T>) => R A callback used to select a result from a contiguous range. keyEqualer Equaler <K> An Equaler used to compare key equality. Grouping Returns AsyncIterable <R> spanMapAsync(source, keySelector, keyEqualer) Creates a subquery whose elements are the contiguous ranges of elements that share the same key. Declaration export declare function spanMapAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<Grouping<K, T>>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An [[AsyncQueryable]] object. keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler used to compare key equality. Subquery Returns AsyncIterable < Grouping <K, T>> spanMapAsync(source, keySelector, elementSelector, keyEqualer) Creates a subquery whose values are computed from each element of the contiguous ranges of elements that share the same key. Declaration export declare function spanMapAsync<T, K, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, keyEqualer?: Equaler<K>): AsyncIterable<Grouping<K, V>>; Type Parameters T K V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An [[AsyncQueryable]] object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => PromiseLike <V> | V A callback used to select a value for an element. keyEqualer Equaler <K> An Equaler used to compare key equality. Subquery Returns AsyncIterable < Grouping <K, V>> spanMapAsync(source, keySelector, elementSelector, spanSelector, keyEqualer) Creates a subquery whose values are computed from the contiguous ranges of elements that share the same key. Declaration export declare function spanMapAsync<T, K, V, R>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, spanSelector: (key: K, elements: Iterable<V>) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncIterable<R>; Type Parameters T K V R Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An [[AsyncQueryable]] object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => PromiseLike <V> | V A callback used to select a value for an element. spanSelector (key: K, elements: Iterable <V>) => PromiseLike <R> | R A callback used to select a result from a contiguous range. keyEqualer Equaler <K> An Equaler used to compare key equality. Subquery Returns AsyncIterable <R> spanUntilAsync(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that do not match the supplied predicate, and whose second element is an AsyncIterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second AsyncIterable is lazily evaluated. Declaration export declare function spanUntilAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): Promise<[HierarchyIterable<T>, AsyncHierarchyIterable<T>]>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => PromiseLike <boolean> | boolean The predicate used to match elements. Scalar Returns Promise <[ HierarchyIterable <T>, AsyncHierarchyIterable <T>]> spanUntilAsync(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that do not match the supplied predicate, and whose second element is an Iterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second AsyncIterable is lazily evaluated. Declaration export declare function spanUntilAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): Promise<[Iterable<T>, AsyncIterable<T>]>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T, offset: number) => PromiseLike <boolean> | boolean The predicate used to match elements. Scalar Returns Promise <[ Iterable <T>, AsyncIterable <T>]> startsWithAsync(left, right, equaler) Computes a scalar value indicating whether the elements of this AsyncIterable start with the same sequence of elements in another AsyncIterable <!-- --> . Declaration export declare function startsWithAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback or Equaler object used to compare the equality of two elements. Scalar Returns Promise <boolean> startsWithAsync(left, right, equaler) Computes a scalar value indicating whether the elements of this AsyncIterable start with the same sequence of elements in another AsyncIterable <!-- --> . Declaration export declare function startsWithAsync<T, U>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters T U Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. equaler (left: T, right: U) => boolean A callback or Equaler object used to compare the equality of two elements. Scalar Returns Promise <boolean> sumAsync(source) Computes the sum for a series of numbers. NOTE: If any element is not a number <!-- --> , this overload will throw. Declaration export declare function sumAsync(source: AsyncIterable<number> | Iterable<PromiseLike<number> | number>): Promise<number>; Parameters source AsyncIterable <number> | Iterable < PromiseLike <number> | number> An AsyncIterable or Iterable object. Scalar Returns Promise <number> sumAsync(source, elementSelector) Computes the sum for a series of numbers. Declaration export declare function sumAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, elementSelector: (element: T) => PromiseLike<number> | number): Promise<number>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. elementSelector (element: T) => PromiseLike <number> | number A callback used to convert a value in source to a number. Scalar Returns Promise <number> symmetricDifferenceAsync(left, right, equaler) Creates an AsyncIterable for the symmetric difference between two [[Queryable]] objects. The result is an AsyncIterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceAsync<TNode, T extends TNode>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncHierarchyIterable <TNode, T> symmetricDifferenceAsync(left, right, equaler) Creates an AsyncIterable for the symmetric difference between two [[Queryable]] objects. The result is an AsyncIterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceAsync<TNode, T extends TNode>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, equaler?: Equaler<T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncHierarchyIterable <TNode, T> symmetricDifferenceAsync(left, right, equaler) Creates an AsyncIterable for the symmetric difference between two [[Queryable]] objects. The result is an AsyncIterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncIterable<T>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncIterable <T> symmetricDifferenceByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the symmetric difference between two AsyncIterable or Iterable objects, where set identity is determined by the selected key. The result is an AsyncIterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceByAsync<TNode, T extends TNode, K>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncHierarchyIterable <TNode, T> symmetricDifferenceByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the symmetric difference between two AsyncIterable or Iterable objects, where set identity is determined by the selected key. The result is an AsyncIterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceByAsync<TNode, T extends TNode, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncHierarchyIterable <TNode, T> symmetricDifferenceByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the symmetric difference between two AsyncIterable or Iterable objects, where set identity is determined by the selected key. The result is an AsyncIterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceByAsync<T, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<T>; Type Parameters T K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable <T> takeAsync(source, count) Creates an AsyncIterable containing the first elements up to the supplied count. Declaration export declare function takeAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, count: number): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. count number The number of elements to take. Subquery Returns AsyncHierarchyIterable <TNode, T> takeAsync(source, count) Creates an AsyncIterable containing the first elements up to the supplied count. Declaration export declare function takeAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, count: number): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. count number The number of elements to take. Subquery Returns AsyncIterable <T> takeRightAsync(source, count) Creates an AsyncIterable containing the last elements up to the supplied count. Declaration export declare function takeRightAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, count: number): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. count number The number of elements to take. Subquery Returns AsyncHierarchyIterable <TNode, T> takeRightAsync(source, count) Creates an AsyncIterable containing the last elements up to the supplied count. Declaration export declare function takeRightAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, count: number): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. count number The number of elements to take. Subquery Returns AsyncIterable <T> takeUntilAsync(source, predicate) Creates an AsyncIterable containing the first elements that do not match the supplied predicate. Declaration export declare function takeUntilAsync<TNode, T extends TNode, U extends T>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T) => element is U A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, U> takeUntilAsync(source, predicate) Creates an AsyncIterable containing the first elements that do not match the supplied predicate. Declaration export declare function takeUntilAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, T> takeUntilAsync(source, predicate) Creates an AsyncIterable containing the first elements that do not match the supplied predicate. Declaration export declare function takeUntilAsync<T, U extends T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => element is U): AsyncIterable<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => element is U A callback used to match each element. Subquery Returns AsyncIterable <U> takeUntilAsync(source, predicate) Creates an AsyncIterable containing the first elements that do not match the supplied predicate. Declaration export declare function takeUntilAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncIterable <T> takeWhileAsync(source, predicate) Creates an AsyncIterable containing the first elements that match the supplied predicate. Declaration export declare function takeWhileAsync<TNode, T extends TNode, U extends T>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => element is U): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T) => element is U A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, U> takeWhileAsync(source, predicate) Creates an AsyncIterable containing the first elements that match the supplied predicate. Declaration export declare function takeWhileAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncHierarchyIterable <TNode, T> takeWhileAsync(source, predicate) Creates an AsyncIterable containing the first elements that match the supplied predicate. Declaration export declare function takeWhileAsync<T, U extends T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => element is U): AsyncIterable<U>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => element is U A callback used to match each element. Subquery Returns AsyncIterable <U> takeWhileAsync(source, predicate) Creates an AsyncIterable containing the first elements that match the supplied predicate. Declaration export declare function takeWhileAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Subquery Returns AsyncIterable <T> tapAsync(source, callback) Lazily invokes a callback as each element of the iterable is iterated. Declaration export declare function tapAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, callback: (element: T, offset: number) => PromiseLike<void> | void): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. callback (element: T, offset: number) => PromiseLike <void> | void The callback to invoke. Subquery Returns AsyncHierarchyIterable <TNode, T> tapAsync(source, callback) Lazily invokes a callback as each element of the iterable is iterated. Declaration export declare function tapAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, callback: (element: T, offset: number) => PromiseLike<void> | void): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. callback (element: T, offset: number) => PromiseLike <void> | void The callback to invoke. Subquery Returns AsyncIterable <T> thenByAsync(source, keySelector, keyComparer) Creates a subsequent AsyncOrderedIterable whose elements are also sorted in ascending order by the provided key. Declaration export declare function thenByAsync<TNode, T extends TNode, K>(source: AsyncOrderedHierarchyIterable<TNode, T> | OrderedHierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): AsyncOrderedHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncOrderedHierarchyIterable <TNode, T> | OrderedHierarchyIterable <TNode, T> An AsyncOrderedIterable or OrderedIterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedHierarchyIterable <TNode, T> thenByAsync(source, keySelector, keyComparer) Creates a subsequent AsyncOrderedIterable whose elements are also sorted in ascending order by the provided key. Declaration export declare function thenByAsync<T, K>(source: AsyncOrderedIterable<T> | OrderedIterable<T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): AsyncOrderedIterable<T>; Type Parameters T K Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> An AsyncOrderedIterable or OrderedIterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedIterable <T> thenByDescendingAsync(source, keySelector, keyComparer) Creates a subsequent AsyncOrderedIterable whose elements are also sorted in descending order by the provided key. Declaration export declare function thenByDescendingAsync<TNode, T extends TNode, K>(source: AsyncOrderedHierarchyIterable<TNode, T> | OrderedHierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): AsyncOrderedHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source AsyncOrderedHierarchyIterable <TNode, T> | OrderedHierarchyIterable <TNode, T> An AsyncOrderedIterable or OrderedIterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedHierarchyIterable <TNode, T> thenByDescendingAsync(source, keySelector, keyComparer) Creates a subsequent AsyncOrderedIterable whose elements are also sorted in descending order by the provided key. Declaration export declare function thenByDescendingAsync<T, K>(source: AsyncOrderedIterable<T> | OrderedIterable<T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): AsyncOrderedIterable<T>; Type Parameters T K Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> An AsyncOrderedIterable or OrderedIterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedIterable <T> toArrayAsync(source) Creates an Array for the elements of the AsyncIterable <!-- --> . Declaration export declare function toArrayAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): Promise<T[]>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. Scalar Returns Promise <T[]> toArrayAsync(source, elementSelector) Creates an Array for the elements of the AsyncIterable <!-- --> . Declaration export declare function toArrayAsync<T, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, elementSelector: (element: T) => PromiseLike<V> | V): Promise<V[]>; Type Parameters T V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. Scalar Returns Promise <V[]> toHashMapAsync(source, keySelector, keyEqualer) Creates a HashMap for the elements of the source. Declaration export declare function toHashMapAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Promise<HashMap<K, T>>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select a key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Promise < HashMap <K, T>> toHashMapAsync(source, keySelector, elementSelector, keyEqualer) Creates a HashMap for the elements of the source. Declaration export declare function toHashMapAsync<T, K, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, keyEqualer?: Equaler<K>): Promise<HashMap<K, V>>; Type Parameters T K V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Promise < HashMap <K, V>> toHashSetAsync(source, equaler) Creates a HashSet for the elements of the AsyncIterable <!-- --> . Declaration export declare function toHashSetAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): Promise<HashSet<T>>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Scalar Returns Promise < HashSet <T>> toHashSetAsync(source, elementSelector, equaler) Creates a HashSet for the elements of the AsyncIterable <!-- --> . Declaration export declare function toHashSetAsync<T, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, elementSelector: (element: T) => PromiseLike<V> | V, equaler?: Equaler<V>): Promise<HashSet<V>>; Type Parameters T V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. equaler Equaler <V> An Equaler object used to compare equality. Scalar Returns Promise < HashSet <V>> toHierarchyAsync(source, hierarchy) Creates an AsyncHierarchyIterable using the provided HierarchyProvider <!-- --> . Declaration export declare function toHierarchyAsync<TNode, T extends TNode = TNode>(source: AsyncOrderedIterable<T> | OrderedIterable<T>, hierarchy: HierarchyProvider<TNode>): AsyncOrderedHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> An AsyncIterable or Iterable object. hierarchy HierarchyProvider <TNode> A HierarchyProvider <!-- --> . Hierarchy Returns AsyncOrderedHierarchyIterable <TNode, T> toHierarchyAsync(source, hierarchy) Creates an AsyncHierarchyIterable using the provided HierarchyProvider <!-- --> . Declaration export declare function toHierarchyAsync<TNode, T extends TNode = TNode>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, hierarchy: HierarchyProvider<TNode>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. hierarchy HierarchyProvider <TNode> A HierarchyProvider <!-- --> . Hierarchy Returns AsyncHierarchyIterable <TNode, T> toLookupAsync(source, keySelector, keyEqualer) Creates a Lookup for the elements of the source. Declaration export declare function toLookupAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Promise<Lookup<K, T>>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select a key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Promise < Lookup <K, T>> toLookupAsync(source, keySelector, elementSelector, keyEqualer) Creates a Lookup for the elements of the source. Declaration export declare function toLookupAsync<T, K, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, keyEqualer?: Equaler<K>): Promise<Lookup<K, V>>; Type Parameters T K V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Promise < Lookup <K, V>> toMapAsync(source, keySelector) Creates a Map for the elements of the AsyncIterable <!-- --> . Declaration export declare function toMapAsync<T, K>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K): Promise<Map<K, T>>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An Iterable object. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Promise < Map <K, T>> toMapAsync(source, keySelector, elementSelector) Creates a Map for the elements of the AsyncIterable <!-- --> . Declaration export declare function toMapAsync<T, K, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V): Promise<Map<K, V>>; Type Parameters T K V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An Iterable object. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. Scalar Returns Promise < Map <K, V>> toObjectAsync(source, prototype, keySelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T, TProto extends object, K extends PropertyKey>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: TProto, keySelector: (element: T) => K): Promise<TProto & Record<K, T>>; Type Parameters T TProto K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Promise <TProto & Record <K, T>> toObjectAsync(source, prototype, keySelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T, TProto extends object>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: TProto, keySelector: (element: T) => PropertyKey): Promise<TProto & Record<PropertyKey, T>>; Type Parameters T TProto Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. Scalar Returns Promise <TProto & Record < PropertyKey , T>> toObjectAsync(source, prototype, keySelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T, K extends PropertyKey>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: object | null | undefined, keySelector: (element: T) => K): Promise<Record<K, T>>; Type Parameters T K Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Promise < Record <K, T>> toObjectAsync(source, prototype, keySelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: object | null | undefined, keySelector: (element: T) => PropertyKey): Promise<Record<PropertyKey, T>>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. Scalar Returns Promise < Record < PropertyKey , T>> toObjectAsync(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T, TProto extends object, K extends PropertyKey, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: TProto, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: K, value: V) => TypedPropertyDescriptor<V>): Promise<TProto & Record<K, V>>; Type Parameters T TProto K V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: K, value: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise <TProto & Record <K, V>> toObjectAsync(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T, TProto extends object, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: TProto, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: PropertyKey, value: V) => TypedPropertyDescriptor<V>): Promise<TProto & Record<PropertyKey, V>>; Type Parameters T TProto V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , value: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise <TProto & Record < PropertyKey , V>> toObjectAsync(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T, K extends PropertyKey, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: object | null | undefined, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: K, value: V) => TypedPropertyDescriptor<V>): Promise<Record<K, V>>; Type Parameters T K V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: K, value: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise < Record <K, V>> toObjectAsync(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: object | null | undefined, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: PropertyKey, value: V) => TypedPropertyDescriptor<V>): Promise<Record<PropertyKey, V>>; Type Parameters T V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , value: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise < Record < PropertyKey , V>> toObjectAsync(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = await toObjectAsync([Promise.resolve([\"x\", 1]), [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObjectAsync<T, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, prototype: object | null | undefined, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: PropertyKey, value: V) => PropertyDescriptor): Promise<object>; Type Parameters T V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , value: V) => PropertyDescriptor A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise <object> topMostAsync(source, predicate, equaler) Creates an AsyncHierarchyIterable for the top-most elements. Elements of source that are a descendant of any other element of source are removed. Declaration export declare function topMostAsync<TNode, T extends TNode, U extends T>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate: (element: T) => element is U, equaler?: Equaler<TNode>): AsyncHierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncHierarchyIterable or HierarchyIterable object. predicate (element: T) => element is U An optional callback used to filter the results. equaler Equaler <TNode> An optional Equaler used to compare equality between nodes. Hierarchy Returns AsyncHierarchyIterable <TNode, U> topMostAsync(source, predicate, equaler) Creates an AsyncHierarchyIterable for the top-most elements. Elements of source that are a descendant of any other element of source are removed. Declaration export declare function topMostAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, predicate?: (element: T) => PromiseLike<boolean> | boolean, equaler?: Equaler<TNode>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncHierarchyIterable or HierarchyIterable object. predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to filter the results. equaler Equaler <TNode> An optional Equaler used to compare equality between nodes. Hierarchy Returns AsyncHierarchyIterable <TNode, T> toSetAsync(source) Creates a Set for the elements of the Iterable. Declaration export declare function toSetAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): Promise<Set<T>>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An Iterable object. Scalar Returns Promise < Set <T>> toSetAsync(source, elementSelector) Creates a Set for the elements of the Iterable. Declaration export declare function toSetAsync<T, V>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, elementSelector: (element: T) => PromiseLike<V> | V): Promise<Set<V>>; Type Parameters T V Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An Iterable object. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. Scalar Returns Promise < Set <V>> unionAsync(left, right, equaler) Creates an AsyncIterable for the set union of two AsyncIterable or Iterable objects. Declaration export declare function unionAsync<TNode, T extends TNode>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncHierarchyIterable <TNode, T> unionAsync(left, right, equaler) Creates an AsyncIterable for the set union of two AsyncIterable or Iterable objects. Declaration export declare function unionAsync<TNode, T extends TNode>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, equaler?: Equaler<T>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncHierarchyIterable <TNode, T> unionAsync(left, right, equaler) Creates an AsyncIterable for the set union of two AsyncIterable or Iterable objects. Declaration export declare function unionAsync<T>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncIterable<T>; Type Parameters T Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncIterable <T> unionByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the set union of two AsyncIterable or Iterable objects, where set identity is determined by the selected key. Declaration export declare function unionByAsync<TNode, T extends TNode, K>(left: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncHierarchyIterable <TNode, T> unionByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the set union of two AsyncIterable or Iterable objects, where set identity is determined by the selected key. Declaration export declare function unionByAsync<TNode, T extends TNode, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncHierarchyIterable <TNode, T> unionByAsync(left, right, keySelector, keyEqualer) Creates an AsyncIterable for the set union of two AsyncIterable or Iterable objects, where set identity is determined by the selected key. Declaration export declare function unionByAsync<T, K>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncIterable<T>; Type Parameters T K Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncIterable <T> unzipAsync(source) Unzips a sequence of tuples into a tuple of sequences. Declaration export declare function unzipAsync<T extends readonly any[] | []>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): Promise<{ -readonly [I in keyof T]: T[I][]; }>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable Scalar Returns Promise <{ -readonly [I in keyof T]: T[I][]; }> unzipAsync(source, partSelector) Unzips a sequence of tuples into a tuple of sequences. Declaration export declare function unzipAsync<T, U extends readonly any[] | []>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, partSelector: (value: T) => PromiseLike<U> | U): Promise<{ -readonly [I in keyof U]: U[I][]; }>; Type Parameters T U Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable partSelector (value: T) => PromiseLike <U> | U A callback that converts a result into a tuple. Scalar Returns Promise <{ -readonly [I in keyof U]: U[I][]; }> zipAsync(left, right) Creates a subquery that combines two [[AsyncQueryable]] objects by combining elements in tuples. Declaration export declare function zipAsync<T, U>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>): AsyncIterable<[T, U]>; Type Parameters T U Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An [[AsyncQueryable]] object. right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An [[AsyncQueryable]] object. Join Returns AsyncIterable <[T, U]> zipAsync(left, right, selector) Creates a subquery that combines two [[AsyncQueryable]] objects by combining elements using the supplied callback. Declaration export declare function zipAsync<T, U, R>(left: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, selector: (left: T, right: U) => PromiseLike<R> | R): AsyncIterable<R>; Type Parameters T U R Parameters left AsyncIterable <T> | Iterable < PromiseLike <T> | T> An [[AsyncQueryable]] object. right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An [[AsyncQueryable]] object. selector (left: T, right: U) => PromiseLike <R> | R A callback used to combine two elements. Join Returns AsyncIterable <R>"
  },
  "api/async-iter-fn/consumeasyncoptions.html": {
    "href": "api/async-iter-fn/consumeasyncoptions.html",
    "title": "ConsumeAsyncOptions Interface | @esfx API Reference",
    "keywords": "ConsumeAsyncOptions Interface Package : @esfx/async-iter-fn Declaration export interface ConsumeAsyncOptions Properties cacheElements Indicates whether iterated elements should be cached for subsequent iterations. Declaration cacheElements?: boolean; Property Value boolean leaveOpen Indicates whether to leave the iterator open when the iterable returns. Declaration leaveOpen?: boolean; Property Value boolean"
  },
  "api/async-iter-fromsync.html": {
    "href": "api/async-iter-fromsync.html",
    "title": "@esfx/async-iter-fromsync Package | @esfx API Reference",
    "keywords": "@esfx/async-iter-fromsync Package An API to convert an ECMAScript Iterable into an AsyncIterable . Installation npm i @esfx/async-iter-fromsync Usage TypeScript JavaScript (CommonJS) import { toAsyncIterable } from \"@esfx/async-iter-fromsync\"; async function f<T>(source: AsyncIterable<T> | Iterable<T | PromiseLike<T>>) { const asyncIterable = toAsyncIterable(source); // ... } const { toAsyncIterable } = require(\"@esfx/async-iter-fromsync\"); async function f(source) { const asyncIterable = toAsyncIterable(source); // ... } Functions toAsyncIterable(source) Creates an AsyncIterable from a synchronous Iterable <!-- --> . Declaration export declare function toAsyncIterable<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncIterable<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> Returns AsyncIterable <T>"
  },
  "api/async-iter-hierarchy.html": {
    "href": "api/async-iter-hierarchy.html",
    "title": "@esfx/async-iter-hierarchy Package | @esfx API Reference",
    "keywords": "@esfx/async-iter-hierarchy Package A Symbol-based API for defining an ECMAScript AsyncIterable with an inherent hierarchy. Installation npm i @esfx/async-iter-hierarchy Usage TypeScript JavaScript (CommonJS) import { AsyncHierarchyIterable, Hierarchical, HierarchyProvider } from \"@esfx/async-iter-hierarchy\"; interface Node { parent?: Node; children?: Node[]; // ... } const hierarchyProvider: HierarchyProvider<Node> = { parent(node: Node) { return node.parent; }, children(node: Node) { return node.children; }, }; class MyAsyncHierarchyIterable implements AsyncHierarchyIterable<Node> { #nodes: AsyncIterable<Node>; constructor(nodes: AsyncIterable<Node>) { this.#nodes = nodes; } [Symbol.asyncIterator]() { return this.#nodes[Symbol.asyncIterator](); } [Hierarchical.hierarchy]() { return hierarchyProvider; } } // @ts-check const { Hierarchical } = require(\"@esfx/async-iter-hierarchy\"); const hierarchyProvider = { parent(node) { return node.parent; }, children(node) { return node.children; }, }; class MyAsyncHierarchyIterable { #nodes; constructor(nodes) { this.#nodes = nodes; } [Symbol.asyncIterator]() { return this.#nodes[Symbol.asyncIterator](); } [Hierarchical.hierarchy]() { return hierarchyProvider; } } Interfaces AsyncHierarchyIterable<TNode, T> Represents an Iterable with a navigable hierarchy. AsyncOrderedHierarchyIterable<TNode, T> Represents an AsyncIterable with a navigable hierarchy that is inherently ordered. Namespaces AsyncHierarchyIterable AsyncOrderedHierarchyIterable"
  },
  "api/async-iter-hierarchy/asynchierarchyiterable-interface.html": {
    "href": "api/async-iter-hierarchy/asynchierarchyiterable-interface.html",
    "title": "AsyncHierarchyIterable<TNode, T> Interface | @esfx API Reference",
    "keywords": "AsyncHierarchyIterable<TNode, T> Interface Package : @esfx/async-iter-hierarchy Represents an Iterable with a navigable hierarchy. Declaration export interface AsyncHierarchyIterable<TNode, T extends TNode = TNode> extends AsyncIterable<T>, Hierarchical<TNode> Inheritance AsyncIterable <T> Hierarchical <TNode> AsyncHierarchyIterable<TNode, T> Inherited Members [Hierarchical.hierarchy]()"
  },
  "api/async-iter-hierarchy/asynchierarchyiterable-namespace.html": {
    "href": "api/async-iter-hierarchy/asynchierarchyiterable-namespace.html",
    "title": "AsyncHierarchyIterable Namespace | @esfx API Reference",
    "keywords": "AsyncHierarchyIterable Namespace Package : @esfx/async-iter-hierarchy Functions create(iterable, provider) Creates an AsyncHierarchyIterable using the provided HierarchyProvider <!-- --> . Declaration function create<TNode, T extends TNode = TNode>(iterable: AsyncOrderedIterable<T> | OrderedIterable<T>, provider: HierarchyProvider<TNode>): AsyncOrderedHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters iterable AsyncOrderedIterable <T> | OrderedIterable <T> provider HierarchyProvider <TNode> Returns AsyncOrderedHierarchyIterable <TNode, T> create(iterable, provider) Declaration function create<TNode, T extends TNode = TNode>(iterable: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, provider: HierarchyProvider<TNode>): AsyncHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters iterable AsyncIterable <T> | Iterable < PromiseLike <T> | T> provider HierarchyProvider <TNode> Returns AsyncHierarchyIterable <TNode, T> hasInstance(x) Declaration function hasInstance(x: unknown): x is AsyncHierarchyIterable<unknown>; Parameters x unknown Returns x is AsyncHierarchyIterable <unknown>"
  },
  "api/async-iter-hierarchy/asyncorderedhierarchyiterable-interface.html": {
    "href": "api/async-iter-hierarchy/asyncorderedhierarchyiterable-interface.html",
    "title": "AsyncOrderedHierarchyIterable<TNode, T> Interface | @esfx API Reference",
    "keywords": "AsyncOrderedHierarchyIterable<TNode, T> Interface Package : @esfx/async-iter-hierarchy Represents an AsyncIterable with a navigable hierarchy that is inherently ordered. Declaration export interface AsyncOrderedHierarchyIterable<TNode, T extends TNode = TNode> extends AsyncOrderedIterable<T>, AsyncHierarchyIterable<TNode, T> Inheritance AsyncOrderedIterable <T> AsyncHierarchyIterable <TNode, T> AsyncOrderedHierarchyIterable<TNode, T> Inherited Members [AsyncOrderedIterable.thenByAsync](keySelector, comparer, descending) Methods [AsyncOrderedIterable.thenByAsync](keySelector, comparer, descending) Creates a subsequent AsyncOrderedHierarchyIterable whose elements are also ordered by the provided key. Declaration [AsyncOrderedIterable.thenByAsync]<K>(keySelector: (element: T) => K, comparer: Comparison<K> | Comparer<K>, descending: boolean): AsyncOrderedHierarchyIterable<TNode, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> A callback used to compare two keys. descending boolean A value indicating whether to sort in descending ( true <!-- --> ) or ascending ( false <!-- --> ) order. Returns AsyncOrderedHierarchyIterable <TNode, T>"
  },
  "api/async-iter-hierarchy/asyncorderedhierarchyiterable-namespace.html": {
    "href": "api/async-iter-hierarchy/asyncorderedhierarchyiterable-namespace.html",
    "title": "AsyncOrderedHierarchyIterable Namespace | @esfx API Reference",
    "keywords": "AsyncOrderedHierarchyIterable Namespace Package : @esfx/async-iter-hierarchy Functions hasInstance(value) Declaration function hasInstance(value: unknown): value is AsyncOrderedHierarchyIterable<unknown>; Parameters value unknown Returns value is AsyncOrderedHierarchyIterable <unknown>"
  },
  "api/async-iter-ordered.html": {
    "href": "api/async-iter-ordered.html",
    "title": "@esfx/async-iter-ordered Package | @esfx API Reference",
    "keywords": "@esfx/async-iter-ordered Package A Symbol-based API for defining an ECMAScript @\"!AsyncIterable\" with an inherent order. Installation npm i @esfx/async-iter-ordered Usage TypeScript JavaScript (CommonJS) import { AsyncOrderedIterable } from \"@esfx/async-iter-ordered\"; import { Comparer, Comparison } from \"@esfx/equatable\"; import { toArrayAsync } from \"@esfx/async-iter-fn\"; interface Book { title: string; isbn: string; // ... } class BooksAsyncOrderedIterable implements AsyncOrderedIterable<Book> { private _books: AsyncIterable<Book>; private _orderBy: readonly { keySelector: (element: Book) => unknown, keyComparer: Comparer<unknown>, descending: boolean }[]; private constructor(books: AsyncIterable<Book>, orderBy: readonly { keySelector: (element: Book) => unknown, keyComparer: Comparer<unknown>, descending: boolean }[]) { this._books = books; this._orderBy = orderBy; } static orderBy<K>(books: AsyncIterable<Book>, keySelector: (element: Book) => K, keyComparer: Comparison<K> | Comparer<K>, descending: boolean): AsyncOrderedIterable<Book> { if (typeof keyComparer === \"function\") keyComparer = Comparer.create(keyComparer); return new BooksAsyncOrderedIterable(books, [{ keySelector, keyComparer, descending }]); } [AsyncOrderedIterable.thenByAsync]<K>(keySelector: (element: Book) => K, keyComparer: Comparison<K> | Comparer<K>, descending: boolean): AsyncOrderedIterable<Book> { if (typeof keyComparer === \"function\") keyComparer = Comparer.create(keyComparer); return new BooksAsyncOrderedIterable(this._books, [...this._orderBy, { keySelector, keyComparer, descending }]); } async * [Symbol.asyncIterator]() { const books = await toArrayAsync(this._books); books.sort((a, b) => { for (const { keySelector, keyComparer, descending } of this._orderBy) { const aKey = keySelector(a); const bKey = keySelector(b); const result = descending ? keyComparer.compare(bKey, aKey) : keyComparer.compare(aKey, bKey); if (result !== 0) return result; } return 0; }); yield* books.values(); } } const { AsyncOrderedIterable } = require(\"@esfx/async-iter-ordered\"); const { Comparer } = require(\"@esfx/equatable\"); const { toArrayAsync } = require(\"@esfx/async-iter-fn\"); class BooksAsyncOrderedIterable { #books; #orderBy; /** @private */ constructor(books, orderBy) { this.#books = books; this.#orderBy = orderBy; } static orderBy(books, keySelector, descending) { if (typeof keyComparer === \"function\") keyComparer = Comparer.create(keyComparer); return new BooksAsyncOrderedIterable(books, [{ keySelector, keyComparer, descending }]); } [AsyncOrderedIterable.thenByAsync](keySelector, keyComparer, descending) { if (typeof keyComparer === \"function\") keyComparer = Comparer.create(keyComparer); return new BooksAsyncOrderedIterable(this.#books, [...this.#orderBy, { keySelector, keyComparer, descending }]); } async * [Symbol.asyncIterator]() { const books = await toArrayAsync(this.#books); books.sort((a, b) => { for (const { keySelector, keyComparer, descending } of this.#orderBy) { const aKey = keySelector(a); const bKey = keySelector(b); const result = descending ? keyComparer.compare(bKey, aKey) : keyComparer.compare(aKey, bKey); if (result !== 0) return result; } return 0; }); yield* books.values(); } } Interfaces AsyncOrderedIterable<T> Represents an AsyncIterable that is inherently ordered. Namespaces AsyncOrderedIterable"
  },
  "api/async-iter-ordered/asyncorderediterable-interface.html": {
    "href": "api/async-iter-ordered/asyncorderediterable-interface.html",
    "title": "AsyncOrderedIterable<T> Interface | @esfx API Reference",
    "keywords": "AsyncOrderedIterable<T> Interface Package : @esfx/async-iter-ordered Represents an AsyncIterable that is inherently ordered. Declaration export interface AsyncOrderedIterable<T> extends AsyncIterable<T> Inheritance AsyncIterable <T> AsyncOrderedIterable<T> Methods [AsyncOrderedIterable.thenByAsync](keySelector, comparer, descending) Creates a subsequent AsyncOrderedIterable whose elements are also ordered by the provided key. Declaration [AsyncOrderedIterable.thenByAsync]<K>(keySelector: (element: T) => K, comparer: Comparison<K> | Comparer<K>, descending: boolean): AsyncOrderedIterable<T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> A callback used to compare two keys. descending boolean A value indicating whether to sort in descending ( true <!-- --> ) or ascending ( false <!-- --> ) order. Returns AsyncOrderedIterable <T>"
  },
  "api/async-iter-ordered/asyncorderediterable-namespace.html": {
    "href": "api/async-iter-ordered/asyncorderediterable-namespace.html",
    "title": "AsyncOrderedIterable Namespace | @esfx API Reference",
    "keywords": "AsyncOrderedIterable Namespace Package : @esfx/async-iter-ordered Functions hasInstance(x) Declaration function hasInstance(x: unknown): x is AsyncOrderedIterable<unknown>; Parameters x unknown Returns x is AsyncOrderedIterable <unknown> Variables thenByAsync Declaration thenByAsync: unique symbol"
  },
  "api/async-iter-ordered-fromsync.html": {
    "href": "api/async-iter-ordered-fromsync.html",
    "title": "@esfx/async-iter-ordered-fromsync Package | @esfx API Reference",
    "keywords": "@esfx/async-iter-ordered-fromsync Package An API to convert an OrderedIterable<T> into an AsyncOrderedIterable<T> . Installation npm i @esfx/async-iter-ordered-fromsync Usage TypeScript JavaScript (CommonJS) import { toAsyncOrderedIterable } from \"@esfx/async-iter-ordered-fromsync\"; import { AsyncOrderedIterable } from \"@esfx/async-iter-ordered\"; import { OrderedIterable } from \"@esfx/iter-ordered\"; async function f<T>(source: AsyncOrderedIterable<T> | OrderedIterable<T | PromiseLike<T>>) { const asyncIterable = toAsyncOrderedIterable(source); // ... } const { toAsyncOrderedIterable } = require(\"@esfx/async-iter-ordered-fromsync\"); async function f(source) { const asyncIterable = toAsyncOrderedIterable(source); // ... } Functions toAsyncOrderedIterable(iterable) Declaration export declare function toAsyncOrderedIterable<T>(iterable: AsyncOrderedIterable<T> | OrderedIterable<T>): AsyncOrderedIterable<T>; Type Parameters T Parameters iterable AsyncOrderedIterable <T> | OrderedIterable <T> Returns AsyncOrderedIterable <T>"
  },
  "api/async-iter-query.html": {
    "href": "api/async-iter-query.html",
    "title": "@esfx/async-iter-query Package | @esfx API Reference",
    "keywords": "@esfx/async-iter-query Package An iteration and query API for ECMAscript async-iterables. Installation npm i @esfx/async-iter-query Usage TypeScript JavaScript (CommonJS) import { AsyncQuery } from \"@esfx/async-iter-query\"; let q = AsyncQuery .from(books) .filter(book => book.author === \"Alice\") .groupBy(book => book.releaseYear); // <usage> const { AsyncQuery } = require(\"@esfx/async-iter-query\"); let q = AsyncQuery .from(books) .filter(book => book.author === \"Alice\") .groupBy(book => book.releaseYear); Classes AsyncHierarchyQuery Represents a sequence of hierarchically organized values. AsyncOrderedHierarchyQuery Represents an ordered sequence of hierarchically organized values. AsyncOrderedQuery Represents an ordered sequence of elements. AsyncQuery A AsyncQuery represents a series of operations that act upon an Iterable or ArrayLike. Evaluation of these operations is deferred until the either a scalar value is requested from the AsyncQuery or the AsyncQuery is iterated. Functions fromAsync(source) Creates a AsyncQuery from an AsyncIterable or Iterable source. Declaration export declare function fromAsync<TNode, T extends TNode>(source: AsyncOrderedHierarchyIterable<TNode, T> | OrderedHierarchyIterable<TNode, T>): AsyncOrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncOrderedHierarchyIterable <TNode, T> | OrderedHierarchyIterable <TNode, T> Returns AsyncOrderedHierarchyQuery <TNode, T> fromAsync(source) Declaration export declare function fromAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>): AsyncHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> Returns AsyncHierarchyQuery <TNode, T> fromAsync(source, provider) Declaration export declare function fromAsync<TNode, T extends TNode>(source: AsyncOrderedIterable<T> | OrderedIterable<T>, provider: HierarchyProvider<TNode>): AsyncOrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> provider HierarchyProvider <TNode> Returns AsyncOrderedHierarchyQuery <TNode, T> fromAsync(source, provider) Declaration export declare function fromAsync<TNode, T extends TNode>(source: AsyncIterable<T> | Iterable<T>, provider: HierarchyProvider<TNode>): AsyncHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncIterable <T> | Iterable <T> provider HierarchyProvider <TNode> Returns AsyncHierarchyQuery <TNode, T> fromAsync(source) Declaration export declare function fromAsync<T>(source: AsyncOrderedIterable<T> | OrderedIterable<T>): AsyncOrderedQuery<T>; Type Parameters T Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> Returns AsyncOrderedQuery <T> fromAsync(source) Declaration export declare function fromAsync<T extends readonly unknown[] | []>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncQuery<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> Returns AsyncQuery <T> fromAsync(source) Declaration export declare function fromAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncQuery<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> Returns AsyncQuery <T> Type Aliases AsyncGroupedQueryFlow Declaration export declare type AsyncGroupedQueryFlow<S, K, T> = S extends Hierarchical<infer TNode> ? AsyncQuery<HierarchyGrouping<K, TNode, TNode & T>> : AsyncQuery<Grouping<K, T>>; Type Parameters S K T AsyncHierarchyQueryFlow Declaration export declare type AsyncHierarchyQueryFlow<S, TNode extends (T extends TNode ? unknown : never), T> = S extends AsyncOrderedIterable<any> | OrderedIterable<any> ? AsyncOrderedHierarchyQuery<TNode, TNode & T> : AsyncHierarchyQuery<TNode, TNode & T>; Type Parameters S TNode T AsyncMergeQueryFlow Declaration export declare type AsyncMergeQueryFlow<L, R, T> = L extends Hierarchical<infer LTNode> ? R extends Hierarchical<infer RTNode> ? AsyncHierarchyQuery<LTNode | RTNode, LTNode & T | RTNode & T> : AsyncHierarchyQuery<LTNode, LTNode & T> : R extends Hierarchical<infer RTNode> ? AsyncHierarchyQuery<RTNode, RTNode & T> : AsyncQuery<T>; Type Parameters L R T AsyncOrderedQueryFlow Declaration export declare type AsyncOrderedQueryFlow<S, T> = S extends Hierarchical<infer TNode> ? AsyncOrderedHierarchyQuery<TNode, TNode & T> : AsyncOrderedQuery<T>; Type Parameters S T AsyncPagedQueryFlow Declaration export declare type AsyncPagedQueryFlow<S, T> = S extends Hierarchical<infer TNode> ? AsyncQuery<HierarchyPage<TNode, TNode & T>> : AsyncQuery<Page<T>>; Type Parameters S T AsyncQueryFlow Declaration export declare type AsyncQueryFlow<S, T> = S extends AsyncOrderedIterable<any> | OrderedIterable<any> ? AsyncOrderedQueryFlow<S, T> : AsyncUnorderedQueryFlow<S, T>; Type Parameters S T AsyncUnorderedQueryFlow Declaration export declare type AsyncUnorderedQueryFlow<S, T> = S extends Hierarchical<infer TNode> ? AsyncHierarchyQuery<TNode, TNode & T> : AsyncQuery<T>; Type Parameters S T"
  },
  "api/async-iter-query/asynchierarchyquery.html": {
    "href": "api/async-iter-query/asynchierarchyquery.html",
    "title": "AsyncHierarchyQuery Class | @esfx API Reference",
    "keywords": "AsyncHierarchyQuery Class Package : @esfx/async-iter-query Represents a sequence of hierarchically organized values. Declaration export declare class AsyncHierarchyQuery<TNode, T extends TNode = TNode> extends AsyncQuery<T> implements AsyncHierarchyIterable<TNode, T> Inheritance AsyncQuery <T> AsyncHierarchyQuery Inherited Members _fromAsync(source) _fromAsync(source) _fromAsync(source, provider) _fromAsync(source, provider) _fromAsync(source) _fromAsync(source) _fromAsync(source) _fromSync(source) _fromSync(source) _fromSync(source, provider) _fromSync(source, provider) _fromSync(source) _fromSync(source) _fromSync(source) [Symbol.asyncIterator]() constructor(source) append(value) average() average(elementSelector) break(predicate) concat(right) concat(right) consume(iterator, options) continuous(value) copyTo(dest, start, count) corresponds(right, equaler) corresponds(right, equaler) correspondsBy(right, keySelector, keyEqualer) correspondsBy(right, leftKeySelector, rightKeySelector, keyEqualer) count(predicate) defaultIfEmpty(defaultValue) distinct(equaler) distinctBy(keySelector, keyEqualer) drop(count) dropRight(count) dropUntil(predicate) dropWhile(predicate) elementAt(offset) empty() endsWith(right, equaler) endsWith(right, equaler) every(predicate) except(right, equaler) exceptBy(right, keySelector, keyEqualer) exclude(values) filter(predicate) filter(predicate) filterBy(keySelector, predicate) filterDefined() filterDefinedBy(keySelector) filterNot(predicate) filterNot(predicate) filterNotBy(keySelector, predicate) filterNotDefinedBy(keySelector) first(predicate) first(predicate) flatMap(projection) flatMap(projection, resultSelector) forEach(callback) from(source) from(source) from(source, provider) from(source, provider) from(source) from(source) from(source) fullJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) generate(count, generator) groupBy(keySelector, keyEqualer) groupBy(keySelector, elementSelector, keyEqualer) groupBy(keySelector, elementSelector, resultSelector, keyEqualer) groupBy(keySelector, elementSelector, resultSelector, keyEqualer) groupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) includes(value, equaler) includes(value, equaler) includesSequence(right, equaler) includesSequence(right, equaler) intersect(right, equaler) intersect(right, equaler) intersectBy(right, keySelector, keyEqualer) intersectBy(right, keySelector, keyEqualer) into(callback) join(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) last(predicate) last(predicate) map(selector) materialize() max(comparer) maxBy(keySelector, keyComparer) min(comparer) minBy(keySelector, keyComparer) nth(offset) of(elements) once(value) orderBy(keySelector, comparer) orderByDescending(keySelector, comparer) pageBy(pageSize) pageBy(pageSize, pageSelector) patch(start, skipCount, range) prepend(value) range(start, end, increment) reduce(accumulator) reduce(accumulator, seed, resultSelector) reduce(accumulator, seed, resultSelector) reduceRight(accumulator) reduceRight(accumulator, seed, resultSelector) reduceRight(accumulator, seed, resultSelector) relativeComplement(right, equaler) relativeComplementBy(right, keySelector, keyEqualer) repeat(value, count) reverse() scan(accumulator) scan(accumulator, seed) scanRight(accumulator) scanRight(accumulator, seed) select(selector) selectMany(projection) selectMany(projection, resultSelector) single(predicate) single(predicate) skip(count) skipRight(count) skipUntil(predicate) skipWhile(predicate) some(predicate) span(predicate) span(predicate) spanMap(keySelector, keyEqualer) spanMap(keySelector, elementSelector, keyEqualer) spanMap(keySelector, elementSelector, spanSelector, keyEqualer) spanMap(keySelector, elementSelector, spanSelector, keyEqualer) spanUntil(predicate) startsWith(right, equaler) startsWith(right, equaler) sum() sum(elementSelector) symmetricDifference(right, equaler) symmetricDifference(right, equaler) symmetricDifferenceBy(right, keySelector, keyEqualer) symmetricDifferenceBy(right, keySelector, keyEqualer) take(count) takeRight(count) takeUntil(predicate) takeWhile(predicate) takeWhile(predicate) tap(callback) through(callback) toArray() toArray(elementSelector) toHashMap(keySelector, keyEqualer) toHashMap(keySelector, elementSelector, keyEqualer) toHashSet(equaler) toHashSet(elementSelector, equaler) toHierarchy(provider) toLookup(keySelector, keyEqualer) toLookup(keySelector, elementSelector, keyEqualer) toMap(keySelector) toMap(keySelector, elementSelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toSet() toSet(elementSelector) union(right, equaler) union(right, equaler) unionBy(right, keySelector, keyEqualer) unionBy(right, keySelector, keyEqualer) unzip() unzip(partSelector) where(predicate) where(predicate) whereBy(keySelector, predicate) whereDefined() whereDefinedBy(keySelector) whereNot(predicate) whereNot(predicate) whereNotBy(keySelector, predicate) whereNotDefinedBy(keySelector) zip(right) zip(right, selector) Constructors constructor(source) Constructs a new instance of the AsyncHierarchyQuery class Declaration constructor(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>); Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> constructor(source, provider) Constructs a new instance of the AsyncHierarchyQuery class Declaration constructor(source: AsyncIterable<T> | Iterable<T>, provider: HierarchyProvider<TNode>); Parameters source AsyncIterable <T> | Iterable <T> provider HierarchyProvider <TNode> Methods [Hierarchical.hierarchy]() Declaration [Hierarchical.hierarchy](): HierarchyProvider<TNode>; Returns HierarchyProvider <TNode> ancestors(predicate) Creates a subquery for the ancestors of each element in the hierarchy. Declaration ancestors<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> ancestors(predicate) Creates a subquery for the ancestors of each element in the hierarchy. Declaration ancestors(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> ancestorsAndSelf(predicate) Creates a subquery for the ancestors of each element as well as each element in the hierarchy. Declaration ancestorsAndSelf<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> ancestorsAndSelf(predicate) Creates a subquery for the ancestors of each element as well as each element in the hierarchy. Declaration ancestorsAndSelf(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> bottomMost(predicate) Creates a subquery for the bottom-most elements. Elements that are an ancestor of any other element are removed. Hierarchy Declaration bottomMost<U extends T>(predicate: (element: T) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: T) => element is U Returns AsyncHierarchyQuery <TNode, U> bottomMost(predicate) Creates a subquery for the bottom-most elements. Elements that are an ancestor of any other element are removed. Hierarchy Declaration bottomMost(predicate?: (element: T) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode, T>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean Returns AsyncHierarchyQuery <TNode, T> children(predicate) Creates a subquery for the children of each element in the hierarchy. Declaration children<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> children(predicate) Creates a subquery for the children of each element in the hierarchy. Declaration children(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> descendants(predicate) Creates a subquery for the descendants of each element in the hierarchy. Declaration descendants<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> descendants(predicate) Creates a subquery for the descendants of each element in the hierarchy. Declaration descendants(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> descendantsAndSelf(predicate) Creates a subquery for the descendants of each element as well as each element in the hierarchy. Declaration descendantsAndSelf<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> descendantsAndSelf(predicate) Creates a subquery for the descendants of each element as well as each element in the hierarchy. Declaration descendantsAndSelf(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> firstChild(predicate) Creates a subquery for the first child of each element in the hierarchy. Declaration firstChild<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> firstChild(predicate) Creates a subquery for the first child of each element in the hierarchy. Declaration firstChild(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> following(predicate) Creates a subquery for the nodes following each element in the hierarchy. Declaration following<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> following(predicate) Creates a subquery for the nodes following each element in the hierarchy. Declaration following(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> followingSiblings(predicate) Creates a subquery for the siblings after each element in the hierarchy. Declaration followingSiblings<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> followingSiblings(predicate) Creates a subquery for the siblings after each element in the hierarchy. Declaration followingSiblings(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> lastChild(predicate) Creates a subquery for the last child of each element in the hierarchy. Declaration lastChild<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> lastChild(predicate) Creates a subquery for the last child of each element in the hierarchy. Declaration lastChild(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> nthChild(offset, predicate) Creates a subquery for the child of each element at the specified offset. A negative offset starts from the last child. Declaration nthChild<U extends TNode>(offset: number | Index, predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters offset number | Index The offset for the child. Hierarchy predicate (element: TNode) => element is U Returns AsyncHierarchyQuery <TNode, U> nthChild(offset, predicate) Creates a subquery for the child of each element at the specified offset. A negative offset starts from the last child. Declaration nthChild(offset: number | Index, predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters offset number | Index The offset for the child. Hierarchy predicate (element: TNode) => PromiseLike <boolean> | boolean Returns AsyncHierarchyQuery <TNode> parents(predicate) Creates a subquery for the parents of each element in the hierarchy. Declaration parents<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> parents(predicate) Creates a subquery for the parents of each element in the hierarchy. Declaration parents(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> preceding(predicate) Creates a subquery for the nodes preceding each element in the hierarchy. Declaration preceding<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> preceding(predicate) Creates a subquery for the nodes preceding each element in the hierarchy. Declaration preceding(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> precedingSiblings(predicate) Creates a subquery for the siblings before each element in the hierarchy. Declaration precedingSiblings<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> precedingSiblings(predicate) Creates a subquery for the siblings before each element in the hierarchy. Declaration precedingSiblings(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> root(predicate) Creates a subquery for the roots of each element in the hierarchy. Declaration root<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> root(predicate) Creates a subquery for the roots of each element in the hierarchy. Declaration root(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> self(predicate) Creates a subquery for this Asyncquery <!-- --> . Declaration self<U extends T>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> self(predicate) Creates a subquery for this Asyncquery <!-- --> . Declaration self<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> self(predicate) Creates a subquery for this Asyncquery <!-- --> . Declaration self(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> siblings(predicate) Creates a subquery for the siblings of each element in the hierarchy. Declaration siblings<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> siblings(predicate) Creates a subquery for the siblings of each element in the hierarchy. Declaration siblings(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> siblingsAfterSelf(predicate) Creates a subquery for the siblings after each element in the hierarchy. NOTE: This is an alias for followingSiblings <!-- --> . Declaration siblingsAfterSelf<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> siblingsAfterSelf(predicate) Creates a subquery for the siblings after each element in the hierarchy. NOTE: This is an alias for followingSiblings <!-- --> . Declaration siblingsAfterSelf(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> siblingsAndSelf(predicate) Creates a subquery for the siblings of each element as well as each element in the hierarchy. Declaration siblingsAndSelf<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> siblingsAndSelf(predicate) Creates a subquery for the siblings of each element as well as each element in the hierarchy. Declaration siblingsAndSelf(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> siblingsBeforeSelf(predicate) Creates a subquery for the siblings before each element in the hierarchy. NOTE: This is an alias for precedingSiblings <!-- --> . Declaration siblingsBeforeSelf<U extends TNode>(predicate: (element: TNode) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode, U> siblingsBeforeSelf(predicate) Creates a subquery for the siblings before each element in the hierarchy. NOTE: This is an alias for precedingSiblings <!-- --> . Declaration siblingsBeforeSelf(predicate?: (element: TNode) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode>; Parameters predicate (element: TNode) => PromiseLike <boolean> | boolean A callback used to filter the results. Hierarchy Returns AsyncHierarchyQuery <TNode> topMost(predicate) Creates a subquery for the top-most elements. Elements that are a descendant of any other element are removed. Hierarchy Declaration topMost<U extends T>(predicate: (element: T) => element is U): AsyncHierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: T) => element is U Returns AsyncHierarchyQuery <TNode, U> topMost(predicate) Creates a subquery for the top-most elements. Elements that are a descendant of any other element are removed. Hierarchy Declaration topMost(predicate?: (element: T) => PromiseLike<boolean> | boolean): AsyncHierarchyQuery<TNode, T>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean Returns AsyncHierarchyQuery <TNode, T>"
  },
  "api/async-iter-query/asyncorderedhierarchyquery.html": {
    "href": "api/async-iter-query/asyncorderedhierarchyquery.html",
    "title": "AsyncOrderedHierarchyQuery Class | @esfx API Reference",
    "keywords": "AsyncOrderedHierarchyQuery Class Package : @esfx/async-iter-query Represents an ordered sequence of hierarchically organized values. Declaration export declare class AsyncOrderedHierarchyQuery<TNode, T extends TNode = TNode> extends AsyncHierarchyQuery<TNode, T> implements AsyncOrderedHierarchyIterable<TNode, T> Inheritance AsyncHierarchyQuery <TNode, T> AsyncOrderedHierarchyQuery Inherited Members [Hierarchical.hierarchy]() constructor(source) constructor(source, provider) ancestors(predicate) ancestors(predicate) ancestorsAndSelf(predicate) ancestorsAndSelf(predicate) bottomMost(predicate) bottomMost(predicate) children(predicate) children(predicate) descendants(predicate) descendants(predicate) descendantsAndSelf(predicate) descendantsAndSelf(predicate) firstChild(predicate) firstChild(predicate) following(predicate) following(predicate) followingSiblings(predicate) followingSiblings(predicate) lastChild(predicate) lastChild(predicate) nthChild(offset, predicate) nthChild(offset, predicate) parents(predicate) parents(predicate) preceding(predicate) preceding(predicate) precedingSiblings(predicate) precedingSiblings(predicate) root(predicate) root(predicate) self(predicate) self(predicate) self(predicate) siblings(predicate) siblings(predicate) siblingsAfterSelf(predicate) siblingsAfterSelf(predicate) siblingsAndSelf(predicate) siblingsAndSelf(predicate) siblingsBeforeSelf(predicate) siblingsBeforeSelf(predicate) topMost(predicate) topMost(predicate) Constructors constructor(source) Constructs a new instance of the AsyncOrderedHierarchyQuery class Declaration constructor(source: AsyncOrderedHierarchyIterable<TNode, T> | OrderedHierarchyIterable<TNode, T>); Parameters source AsyncOrderedHierarchyIterable <TNode, T> | OrderedHierarchyIterable <TNode, T> constructor(source, provider) Constructs a new instance of the AsyncOrderedHierarchyQuery class Declaration constructor(source: AsyncOrderedIterable<T> | OrderedIterable<T>, provider: HierarchyProvider<TNode>); Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> provider HierarchyProvider <TNode> Methods [AsyncOrderedIterable.thenByAsync](keySelector, comparison, descending) Declaration [AsyncOrderedIterable.thenByAsync]<K>(keySelector: (element: T) => K, comparison: Comparison<K> | Comparer<K>, descending: boolean): AsyncOrderedHierarchyIterable<TNode, T>; Type Parameters K Parameters keySelector (element: T) => K comparison Comparison <K> | Comparer <K> descending boolean Returns AsyncOrderedHierarchyIterable <TNode, T> thenBy(keySelector, comparison) Creates a subsequent ordered subquery whose elements are sorted in ascending order by the provided key. Declaration thenBy<K>(keySelector: (element: T) => K, comparison?: Comparison<K> | Comparer<K>): AsyncOrderedHierarchyQuery<TNode, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparison Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedHierarchyQuery <TNode, T> thenByDescending(keySelector, comparison) Creates a subsequent ordered subquery whose elements are sorted in descending order by the provided key. Declaration thenByDescending<K>(keySelector: (element: T) => K, comparison?: Comparison<K> | Comparer<K>): AsyncOrderedHierarchyQuery<TNode, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparison Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedHierarchyQuery <TNode, T>"
  },
  "api/async-iter-query/asyncorderedquery.html": {
    "href": "api/async-iter-query/asyncorderedquery.html",
    "title": "AsyncOrderedQuery Class | @esfx API Reference",
    "keywords": "AsyncOrderedQuery Class Package : @esfx/async-iter-query Represents an ordered sequence of elements. Declaration export declare class AsyncOrderedQuery<T> extends AsyncQuery<T> implements AsyncOrderedIterable<T> Inheritance AsyncQuery <T> AsyncOrderedQuery Inherited Members _fromAsync(source) _fromAsync(source) _fromAsync(source, provider) _fromAsync(source, provider) _fromAsync(source) _fromAsync(source) _fromAsync(source) _fromSync(source) _fromSync(source) _fromSync(source, provider) _fromSync(source, provider) _fromSync(source) _fromSync(source) _fromSync(source) [Symbol.asyncIterator]() constructor(source) append(value) average() average(elementSelector) break(predicate) concat(right) concat(right) consume(iterator, options) continuous(value) copyTo(dest, start, count) corresponds(right, equaler) corresponds(right, equaler) correspondsBy(right, keySelector, keyEqualer) correspondsBy(right, leftKeySelector, rightKeySelector, keyEqualer) count(predicate) defaultIfEmpty(defaultValue) distinct(equaler) distinctBy(keySelector, keyEqualer) drop(count) dropRight(count) dropUntil(predicate) dropWhile(predicate) elementAt(offset) empty() endsWith(right, equaler) endsWith(right, equaler) every(predicate) except(right, equaler) exceptBy(right, keySelector, keyEqualer) exclude(values) filter(predicate) filter(predicate) filterBy(keySelector, predicate) filterDefined() filterDefinedBy(keySelector) filterNot(predicate) filterNot(predicate) filterNotBy(keySelector, predicate) filterNotDefinedBy(keySelector) first(predicate) first(predicate) flatMap(projection) flatMap(projection, resultSelector) forEach(callback) from(source) from(source) from(source, provider) from(source, provider) from(source) from(source) from(source) fullJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) generate(count, generator) groupBy(keySelector, keyEqualer) groupBy(keySelector, elementSelector, keyEqualer) groupBy(keySelector, elementSelector, resultSelector, keyEqualer) groupBy(keySelector, elementSelector, resultSelector, keyEqualer) groupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) includes(value, equaler) includes(value, equaler) includesSequence(right, equaler) includesSequence(right, equaler) intersect(right, equaler) intersect(right, equaler) intersectBy(right, keySelector, keyEqualer) intersectBy(right, keySelector, keyEqualer) into(callback) join(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) last(predicate) last(predicate) map(selector) materialize() max(comparer) maxBy(keySelector, keyComparer) min(comparer) minBy(keySelector, keyComparer) nth(offset) of(elements) once(value) orderBy(keySelector, comparer) orderByDescending(keySelector, comparer) pageBy(pageSize) pageBy(pageSize, pageSelector) patch(start, skipCount, range) prepend(value) range(start, end, increment) reduce(accumulator) reduce(accumulator, seed, resultSelector) reduce(accumulator, seed, resultSelector) reduceRight(accumulator) reduceRight(accumulator, seed, resultSelector) reduceRight(accumulator, seed, resultSelector) relativeComplement(right, equaler) relativeComplementBy(right, keySelector, keyEqualer) repeat(value, count) reverse() scan(accumulator) scan(accumulator, seed) scanRight(accumulator) scanRight(accumulator, seed) select(selector) selectMany(projection) selectMany(projection, resultSelector) single(predicate) single(predicate) skip(count) skipRight(count) skipUntil(predicate) skipWhile(predicate) some(predicate) span(predicate) span(predicate) spanMap(keySelector, keyEqualer) spanMap(keySelector, elementSelector, keyEqualer) spanMap(keySelector, elementSelector, spanSelector, keyEqualer) spanMap(keySelector, elementSelector, spanSelector, keyEqualer) spanUntil(predicate) startsWith(right, equaler) startsWith(right, equaler) sum() sum(elementSelector) symmetricDifference(right, equaler) symmetricDifference(right, equaler) symmetricDifferenceBy(right, keySelector, keyEqualer) symmetricDifferenceBy(right, keySelector, keyEqualer) take(count) takeRight(count) takeUntil(predicate) takeWhile(predicate) takeWhile(predicate) tap(callback) through(callback) toArray() toArray(elementSelector) toHashMap(keySelector, keyEqualer) toHashMap(keySelector, elementSelector, keyEqualer) toHashSet(equaler) toHashSet(elementSelector, equaler) toHierarchy(provider) toLookup(keySelector, keyEqualer) toLookup(keySelector, elementSelector, keyEqualer) toMap(keySelector) toMap(keySelector, elementSelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toSet() toSet(elementSelector) union(right, equaler) union(right, equaler) unionBy(right, keySelector, keyEqualer) unionBy(right, keySelector, keyEqualer) unzip() unzip(partSelector) where(predicate) where(predicate) whereBy(keySelector, predicate) whereDefined() whereDefinedBy(keySelector) whereNot(predicate) whereNot(predicate) whereNotBy(keySelector, predicate) whereNotDefinedBy(keySelector) zip(right) zip(right, selector) Constructors constructor(source) Constructs a new instance of the AsyncOrderedQuery class Declaration constructor(source: AsyncOrderedIterable<T> | OrderedIterable<T>); Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> Methods [AsyncOrderedIterable.thenByAsync](keySelector, comparer, descending) Declaration [AsyncOrderedIterable.thenByAsync]<K>(keySelector: (element: T) => K, comparer: Comparison<K> | Comparer<K>, descending: boolean): AsyncOrderedIterable<T>; Type Parameters K Parameters keySelector (element: T) => K comparer Comparison <K> | Comparer <K> descending boolean Returns AsyncOrderedIterable <T> thenBy(keySelector, comparer) Creates a subsequent ordered subquery whose elements are sorted in ascending order by the provided key. Declaration thenBy<K>(keySelector: (element: T) => K, comparer?: Comparison<K> | Comparer<K>): AsyncOrderedQuery<T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedQuery <T> thenByDescending(keySelector, comparer) Creates a subsequent ordered subquery whose elements are sorted in descending order by the provided key. Declaration thenByDescending<K>(keySelector: (element: T) => K, comparer?: Comparison<K> | Comparer<K>): AsyncOrderedQuery<T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedQuery <T>"
  },
  "api/async-iter-query/asyncquery.html": {
    "href": "api/async-iter-query/asyncquery.html",
    "title": "AsyncQuery Class | @esfx API Reference",
    "keywords": "AsyncQuery Class Package : @esfx/async-iter-query A AsyncQuery represents a series of operations that act upon an Iterable or ArrayLike. Evaluation of these operations is deferred until the either a scalar value is requested from the AsyncQuery or the AsyncQuery is iterated. Declaration export declare class AsyncQuery<T> implements AsyncIterable<T> Constructors constructor(source) Creates an AsyncQuery from an AsyncIterable source. Declaration constructor(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>); Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable object. Methods _fromAsync(source) Declaration protected _fromAsync<TNode, T extends TNode>(source: AsyncOrderedHierarchyIterable<TNode, T> | OrderedHierarchyIterable<TNode, T>): AsyncOrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncOrderedHierarchyIterable <TNode, T> | OrderedHierarchyIterable <TNode, T> Returns AsyncOrderedHierarchyQuery <TNode, T> _fromAsync(source) Declaration protected _fromAsync<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>): AsyncHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> Returns AsyncHierarchyQuery <TNode, T> _fromAsync(source, provider) Declaration protected _fromAsync<TNode, T extends TNode>(source: AsyncOrderedIterable<T> | OrderedIterable<T>, provider: HierarchyProvider<TNode>): AsyncOrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> provider HierarchyProvider <TNode> Returns AsyncOrderedHierarchyQuery <TNode, T> _fromAsync(source, provider) Declaration protected _fromAsync<TNode, T extends TNode>(source: AsyncIterable<T> | Iterable<T>, provider: HierarchyProvider<TNode>): AsyncHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncIterable <T> | Iterable <T> provider HierarchyProvider <TNode> Returns AsyncHierarchyQuery <TNode, T> _fromAsync(source) Declaration protected _fromAsync<T>(source: AsyncOrderedIterable<T> | OrderedIterable<T>): AsyncOrderedQuery<T>; Type Parameters T Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> Returns AsyncOrderedQuery <T> _fromAsync(source) Declaration protected _fromAsync<T extends readonly unknown[] | []>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncQuery<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> Returns AsyncQuery <T> _fromAsync(source) Declaration protected _fromAsync<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncQuery<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> Returns AsyncQuery <T> _fromSync(source) Declaration protected _fromSync<TNode, T extends TNode>(source: OrderedHierarchyIterable<TNode, T>): OrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source OrderedHierarchyIterable <TNode, T> Returns OrderedHierarchyQuery <TNode, T> _fromSync(source) Declaration protected _fromSync<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>): HierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> Returns HierarchyQuery <TNode, T> _fromSync(source, provider) Declaration protected _fromSync<TNode, T extends TNode>(source: OrderedIterable<T>, provider: HierarchyProvider<TNode>): OrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source OrderedIterable <T> provider HierarchyProvider <TNode> Returns OrderedHierarchyQuery <TNode, T> _fromSync(source, provider) Declaration protected _fromSync<TNode, T extends TNode>(source: Iterable<T>, provider: HierarchyProvider<TNode>): HierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source Iterable <T> provider HierarchyProvider <TNode> Returns HierarchyQuery <TNode, T> _fromSync(source) Declaration protected _fromSync<T>(source: OrderedIterable<T>): OrderedQuery<T>; Type Parameters T Parameters source OrderedIterable <T> Returns OrderedQuery <T> _fromSync(source) Declaration protected _fromSync<T extends readonly unknown[] | []>(source: Iterable<T>): Query<T>; Type Parameters T Parameters source Iterable <T> Returns Query <T> _fromSync(source) Declaration protected _fromSync<T>(source: Iterable<T>): Query<T>; Type Parameters T Parameters source Iterable <T> Returns Query <T> [Symbol.asyncIterator]() Declaration [Symbol.asyncIterator](): AsyncIterator<T>; Returns AsyncIterator <T> append(value) Creates a subquery for the elements of this AsyncQuery with the provided value appended to the end. Declaration append(value: PromiseLike<T> | T): AsyncUnorderedQueryFlow<this, T>; Parameters value PromiseLike <T> | T The value to append. Subquery Returns AsyncUnorderedQueryFlow <this, T> average() Computes the average for a series of numbers. Scalar Declaration average(): Promise<T extends number ? number : never>; Returns Promise <T extends number ? number : never> average(elementSelector) Computes the average for a series of numbers. Scalar Declaration average(elementSelector: (element: T) => PromiseLike<number> | number): Promise<number>; Parameters elementSelector (element: T) => PromiseLike <number> | number Returns Promise <number> break(predicate) Creates a tuple whose first element is a subquery containing the first span of elements that do not match the supplied predicate, and whose second element is a subquery containing the remaining elements. The first subquery is eagerly evaluated, while the second subquery is lazily evaluated. NOTE: This is an alias for spanUntil <!-- --> . Declaration break(predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): Promise<[UnorderedQueryFlow<this, T>, AsyncUnorderedQueryFlow<this, T>]>; Parameters predicate (element: T, offset: number) => PromiseLike <boolean> | boolean The predicate used to match elements. Scalar Returns Promise <[ UnorderedQueryFlow <this, T>, AsyncUnorderedQueryFlow <this, T>]> concat(right) Creates a subquery that concatenates this AsyncQuery with another AsyncIterable or Iterable <!-- --> . Declaration concat<R extends AsyncIterable<T> | Iterable<PromiseLike<T> | T>>(right: R): AsyncMergeQueryFlow<this, R, T>; Type Parameters R Parameters right R An AsyncIterable or Iterable object. Subquery Returns AsyncMergeQueryFlow <this, R, T> concat(right) Creates a subquery that concatenates this AsyncQuery with another AsyncIterable or Iterable <!-- --> . Declaration concat(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncQuery<T>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. Subquery Returns AsyncQuery <T> consume(iterator, options) Creates a AsyncQuery that, when iterated, consumes the provided AsyncIterator <!-- --> . Declaration static consume<T>(iterator: AsyncIterator<T>, options?: ConsumeAsyncOptions): AsyncQuery<T>; Type Parameters T Parameters iterator AsyncIterator <T> An AsyncIterator object. Query options ConsumeAsyncOptions Returns AsyncQuery <T> continuous(value) Creates a AsyncQuery that repeats the provided value forever. Declaration static continuous<T>(value: PromiseLike<T> | T): AsyncQuery<T>; Type Parameters T Parameters value PromiseLike <T> | T The value for each element of the AsyncQuery <!-- --> . Query Returns AsyncQuery <T> copyTo(dest, start, count) Writes each element to a destination. The destination must already have enough space to write the requested number of elements (i.e. arrays are *not* resized). Declaration copyTo<U extends IndexedCollection<T> | T[]>(dest: U, start?: number, count?: number): Promise<U>; Type Parameters U Parameters dest U The destination array. start number The offset into the array at which to start writing. count number The number of elements to write to the array. Scalar Returns Promise <U> corresponds(right, equaler) Computes a scalar value indicating whether every element in this AsyncQuery corresponds to a matching element in another AsyncIterable or Iterable at the same position. Declaration corresponds(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> corresponds(right, equaler) Computes a scalar value indicating whether every element in this AsyncQuery corresponds to a matching element in another AsyncIterable or Iterable at the same position. Declaration corresponds<U>(right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters U Parameters right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> correspondsBy(right, keySelector, keyEqualer) Computes a scalar value indicating whether every element in this AsyncQuery corresponds to a matching element in another AsyncIterable or Iterable at the same position. Declaration correspondsBy<K>(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Promise<boolean>; Type Parameters K Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler used to compare the equality of two keys. Scalar Returns Promise <boolean> correspondsBy(right, leftKeySelector, rightKeySelector, keyEqualer) Computes a scalar value indicating whether the key for every element in this AsyncQuery corresponds to a matching key in right at the same position. Declaration correspondsBy<U, K>(right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, leftKeySelector: (element: T) => K, rightKeySelector: (element: U) => K, keyEqualer?: EqualityComparison<K> | Equaler<K>): Promise<boolean>; Type Parameters U K Parameters right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. leftKeySelector (element: T) => K A callback used to select the key for each element in this AsyncQuery <!-- --> . rightKeySelector (element: U) => K A callback used to select the key for each element in right <!-- --> . keyEqualer EqualityComparison <K> | Equaler <K> An optional callback used to compare the equality of two keys. Scalar Returns Promise <boolean> count(predicate) Counts the number of elements in the AsyncQuery <!-- --> , optionally filtering elements using the supplied callback. Declaration count(predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<number>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <number> defaultIfEmpty(defaultValue) Creates a subquery that contains the provided default value if this AsyncQuery contains no elements. Declaration defaultIfEmpty(defaultValue: PromiseLike<T> | T): AsyncUnorderedQueryFlow<this, T>; Parameters defaultValue PromiseLike <T> | T The default value. Subquery Returns AsyncUnorderedQueryFlow <this, T> distinct(equaler) Creates a subquery for the distinct elements of this AsyncQuery <!-- --> . Declaration distinct(equaler?: Equaler<T>): AsyncUnorderedQueryFlow<this, T>; Parameters equaler Equaler <T> An Equaler object used to compare key equality. Subquery Returns AsyncUnorderedQueryFlow <this, T> distinctBy(keySelector, keyEqualer) Creates a subquery for the distinct elements of this AsyncQuery <!-- --> . Declaration distinctBy<K>(keySelector: (value: T) => K, keyEqualer?: Equaler<K>): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (value: T) => K A callback used to select the key to determine uniqueness. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncUnorderedQueryFlow <this, T> drop(count) Creates a subquery containing all elements except the first elements up to the supplied count. Declaration drop(count: number): AsyncUnorderedQueryFlow<this, T>; Parameters count number The number of elements to drop. Subquery Returns AsyncUnorderedQueryFlow <this, T> dropRight(count) Creates a subquery containing all elements except the last elements up to the supplied count. Declaration dropRight(count: number): AsyncUnorderedQueryFlow<this, T>; Parameters count number The number of elements to drop. Subquery Returns AsyncUnorderedQueryFlow <this, T> dropUntil(predicate) Creates a subquery containing all elements except the first elements that don't match the supplied predicate. Declaration dropUntil(predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> dropWhile(predicate) Creates a subquery containing all elements except the first elements that match the supplied predicate. Declaration dropWhile(predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> elementAt(offset) Finds the value in the AsyncQuery at the provided offset. A negative offset starts from the last element. Declaration elementAt(offset: number | Index): Promise<T | undefined>; Parameters offset number | Index An offset. Scalar Returns Promise <T | undefined> empty() Creates a AsyncQuery with no elements. Query Declaration static empty<T>(): AsyncQuery<T>; Type Parameters T Returns AsyncQuery <T> endsWith(right, equaler) Computes a scalar value indicating whether the elements of this AsyncQuery end with the same sequence of elements in another AsyncIterable or Iterable <!-- --> . Declaration endsWith(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns Promise <boolean> endsWith(right, equaler) Computes a scalar value indicating whether the elements of this AsyncQuery end with the same sequence of elements in another AsyncIterable or Iterable <!-- --> . Declaration endsWith<U>(right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters U Parameters right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns Promise <boolean> every(predicate) Computes a scalar value indicating whether all elements of the AsyncQuery match the supplied callback. Declaration every(predicate: (element: T) => PromiseLike<boolean> | boolean): Promise<boolean>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Scalar Returns Promise <boolean> except(right, equaler) Creates a subquery for the set difference between this and another AsyncIterable or Iterable <!-- --> . Declaration except(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncUnorderedQueryFlow<this, T>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncUnorderedQueryFlow <this, T> exceptBy(right, keySelector, keyEqualer) Creates a subquery for the set difference between this and another AsyncIterable or Iterable <!-- --> , where set identity is determined by the selected key. Declaration exceptBy<K>(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncUnorderedQueryFlow <this, T> exclude(values) Creates a subquery with every instance of the specified value removed. Declaration exclude(...values: [PromiseLike<T> | T, ...(PromiseLike<T> | T)[]]): AsyncUnorderedQueryFlow<this, T>; Parameters values [ PromiseLike <T> | T, ...( PromiseLike <T> | T)[]] The values to exclude. Subquery Returns AsyncUnorderedQueryFlow <this, T> filter(predicate) Creates a subquery whose elements match the supplied predicate. Declaration filter<U extends T>(predicate: (element: T, offset: number) => element is U): AsyncUnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, U> filter(predicate) Creates a subquery whose elements match the supplied predicate. Declaration filter(predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T, offset: number) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> filterBy(keySelector, predicate) Creates a subquery where the selected key for each element matches the supplied predicate. Declaration filterBy<K>(keySelector: (element: T) => K, predicate: (key: K, offset: number) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => PromiseLike <boolean> | boolean A callback used to match each key. Returns AsyncUnorderedQueryFlow <this, T> filterDefined() Creates a subquery whose elements are neither null nor undefined <!-- --> . Subquery Declaration filterDefined(): AsyncUnorderedQueryFlow<this, NonNullable<T>>; Returns AsyncUnorderedQueryFlow <this, NonNullable <T>> filterDefinedBy(keySelector) Creates a subquery where the selected key for each element is neither null nor undefined <!-- --> . Declaration filterDefinedBy<K>(keySelector: (element: T) => K): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. Returns AsyncUnorderedQueryFlow <this, T> filterNot(predicate) Creates a subquery whose elements do not match the supplied predicate. Declaration filterNot<U extends T>(predicate: (element: T, offset: number) => element is U): AsyncUnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, U> filterNot(predicate) Creates a subquery whose elements do not match the supplied predicate. Declaration filterNot(predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T, offset: number) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> filterNotBy(keySelector, predicate) Creates a subquery where the selected key for each element does not match the supplied predicate. Declaration filterNotBy<K>(keySelector: (element: T) => K, predicate: (key: K, offset: number) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => PromiseLike <boolean> | boolean A callback used to match each key. Returns AsyncUnorderedQueryFlow <this, T> filterNotDefinedBy(keySelector) Creates a subquery where the selected key for each element is either null or undefined <!-- --> . Declaration filterNotDefinedBy<K>(keySelector: (element: T) => K): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. Returns AsyncUnorderedQueryFlow <this, T> first(predicate) Gets the first element in the AsyncQuery <!-- --> , optionally filtering elements using the supplied callback. Declaration first<U extends T>(predicate: (element: T) => element is U): Promise<U | undefined>; Type Parameters U Parameters predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns Promise <U | undefined> first(predicate) Gets the first element in the AsyncQuery <!-- --> , optionally filtering elements using the supplied callback. Declaration first(predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<T | undefined>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <T | undefined> flatMap(projection) Creates a subquery that iterates the results of applying a callback to each element. Declaration flatMap<U>(projection: (element: T) => AsyncIterable<U> | Iterable<PromiseLike<U> | U>): AsyncQuery<U>; Type Parameters U Parameters projection (element: T) => AsyncIterable <U> | Iterable < PromiseLike <U> | U> A callback used to map each element into an AsyncIterable or Iterable object. Returns AsyncQuery <U> flatMap(projection, resultSelector) Creates a subquery that iterates the results of applying a callback to each element. Declaration flatMap<U, R>(projection: (element: T) => AsyncIterable<U> | Iterable<PromiseLike<U> | U>, resultSelector: (element: T, innerElement: U) => PromiseLike<R> | R): AsyncQuery<R>; Type Parameters U R Parameters projection (element: T) => AsyncIterable <U> | Iterable < PromiseLike <U> | U> A callback used to map each element into an AsyncIterable or Iterable object. resultSelector (element: T, innerElement: U) => PromiseLike <R> | R An optional callback used to map the outer and projected inner elements. Returns AsyncQuery <R> forEach(callback) Invokes a callback for each element of the AsyncQuery <!-- --> . Declaration forEach(callback: (element: T, offset: number) => void | PromiseLike<void>): Promise<void>; Parameters callback (element: T, offset: number) => void | PromiseLike <void> The callback to invoke. Scalar Returns Promise <void> from(source) Creates an AsyncQuery from an AsyncIterable or Iterable source. Query Declaration static from<TNode, T extends TNode>(source: AsyncOrderedHierarchyIterable<TNode, T> | OrderedHierarchyIterable<TNode, T>): AsyncOrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncOrderedHierarchyIterable <TNode, T> | OrderedHierarchyIterable <TNode, T> Returns AsyncOrderedHierarchyQuery <TNode, T> from(source) Declaration static from<TNode, T extends TNode>(source: AsyncHierarchyIterable<TNode, T> | HierarchyIterable<TNode, T>): AsyncHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncHierarchyIterable <TNode, T> | HierarchyIterable <TNode, T> Returns AsyncHierarchyQuery <TNode, T> from(source, provider) Declaration static from<TNode, T extends TNode>(source: AsyncOrderedIterable<T> | OrderedIterable<T>, provider: HierarchyProvider<TNode>): AsyncOrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> provider HierarchyProvider <TNode> Returns AsyncOrderedHierarchyQuery <TNode, T> from(source, provider) Declaration static from<TNode, T extends TNode>(source: AsyncIterable<T> | Iterable<T>, provider: HierarchyProvider<TNode>): AsyncHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source AsyncIterable <T> | Iterable <T> provider HierarchyProvider <TNode> Returns AsyncHierarchyQuery <TNode, T> from(source) Declaration static from<T>(source: AsyncOrderedIterable<T> | OrderedIterable<T>): AsyncOrderedQuery<T>; Type Parameters T Parameters source AsyncOrderedIterable <T> | OrderedIterable <T> Returns AsyncOrderedQuery <T> from(source) Declaration static from<T extends readonly unknown[] | []>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncQuery<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> Returns AsyncQuery <T> from(source) Declaration static from<T>(source: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncQuery<T>; Type Parameters T Parameters source AsyncIterable <T> | Iterable < PromiseLike <T> | T> Returns AsyncQuery <T> fullJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates a subquery for the correlated elements of this AsyncQuery and another AsyncIterable or Iterable <!-- --> . Declaration fullJoin<I, K, R>(inner: AsyncIterable<I> | Iterable<PromiseLike<I> | I>, outerKeySelector: (element: T) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: T | undefined, inner: I | undefined) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncQuery<R>; Type Parameters I K R Parameters inner AsyncIterable <I> | Iterable < PromiseLike <I> | I> An AsyncIterable or Iterable object. outerKeySelector (element: T) => K A callback used to select the key for an element in this AsyncQuery <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in the other Iterable. resultSelector (outer: T | undefined, inner: I | undefined) => PromiseLike <R> | R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns AsyncQuery <R> generate(count, generator) Creates a AsyncQuery whose values are provided by a callback executed a provided number of times. Declaration static generate<T>(count: number, generator: (offset: number) => PromiseLike<T> | T): AsyncQuery<T>; Type Parameters T Parameters count number The number of times to execute the callback. generator (offset: number) => PromiseLike <T> | T The callback to execute. Query Returns AsyncQuery <T> groupBy(keySelector, keyEqualer) Groups each element of this AsyncQuery by its key. Declaration groupBy<K>(keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncGroupedQueryFlow<this, K, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncGroupedQueryFlow <this, K, T> groupBy(keySelector, elementSelector, keyEqualer) Groups each element by its key. Declaration groupBy<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, keyEqualer?: Equaler<K>): AsyncGroupedQueryFlow<this, K, V>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => PromiseLike <V> | V A callback used to select a value for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncGroupedQueryFlow <this, K, V> groupBy(keySelector, elementSelector, resultSelector, keyEqualer) Groups each element by its key. Declaration groupBy<K, V, R>(keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, resultSelector: (key: K, elements: Query<V>) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncQuery<R>; Type Parameters K V R Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => PromiseLike <V> | V A callback used to select a value for an element. resultSelector (key: K, elements: Query <V>) => PromiseLike <R> | R A callback used to select a result from a group. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncQuery <R> groupBy(keySelector, elementSelector, resultSelector, keyEqualer) Groups each element by its key. Declaration groupBy<K, R>(keySelector: (element: T) => K, elementSelector: undefined, resultSelector: (key: K, elements: Query<T>) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncQuery<R>; Type Parameters K R Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector undefined A callback used to select a value for an element. resultSelector (key: K, elements: Query <T>) => PromiseLike <R> | R A callback used to select a result from a group. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncQuery <R> groupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates a grouped subquery for the correlated elements of this AsyncQuery and another AsyncIterable or Iterable object. Declaration groupJoin<I, K, R>(inner: AsyncIterable<I> | Iterable<PromiseLike<I> | I>, outerKeySelector: (element: T) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: T, inner: Query<I>) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncQuery<R>; Type Parameters I K R Parameters inner AsyncIterable <I> | Iterable < PromiseLike <I> | I> An AsyncIterable or Iterable object. outerKeySelector (element: T) => K A callback used to select the key for an element in this AsyncQuery <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in the other Iterable object. resultSelector (outer: T, inner: Query <I>) => PromiseLike <R> | R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns AsyncQuery <R> includes(value, equaler) Computes a scalar value indicating whether the provided value is included in the AsyncQuery <!-- --> . Declaration includes(value: T, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Parameters value T A value. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> includes(value, equaler) Computes a scalar value indicating whether the provided value is included in the AsyncQuery <!-- --> . Declaration includes<U>(value: U, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters U Parameters value U A value. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns Promise <boolean> includesSequence(right, equaler) Computes a scalar value indicating whether the elements of this AsyncQuery include an exact sequence of elements from another AsyncIterable or Iterable <!-- --> . Declaration includesSequence(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns Promise <boolean> includesSequence(right, equaler) Computes a scalar value indicating whether the elements of this AsyncQuery include an exact sequence of elements from another AsyncIterable or Iterable <!-- --> . Declaration includesSequence<U>(right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters U Parameters right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns Promise <boolean> intersect(right, equaler) Creates a subquery for the set intersection of this AsyncQuery and another AsyncIterable or Iterable <!-- --> . Declaration intersect<R extends AsyncIterable<T> | Iterable<PromiseLike<T> | T>>(right: R, equaler?: Equaler<T>): AsyncMergeQueryFlow<this, R, T>; Type Parameters R Parameters right R An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncMergeQueryFlow <this, R, T> intersect(right, equaler) Creates a subquery for the set intersection of this AsyncQuery and another AsyncIterable or Iterable <!-- --> . Declaration intersect(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncQuery<T>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncQuery <T> intersectBy(right, keySelector, keyEqualer) Creates a subquery for the set intersection of this AsyncQuery and another AsyncIterable or Iterable <!-- --> , where set identity is determined by the selected key. Declaration intersectBy<K, R extends AsyncIterable<T> | Iterable<PromiseLike<T> | T>>(right: R, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncMergeQueryFlow<this, R, T>; Type Parameters K R Parameters right R An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncMergeQueryFlow <this, R, T> intersectBy(right, keySelector, keyEqualer) Creates a subquery for the set intersection of this AsyncQuery and another AsyncIterable or Iterable <!-- --> , where set identity is determined by the selected key. Declaration intersectBy<K>(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncQuery<T>; Type Parameters K Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncQuery <T> into(callback) Pass the entire AsyncQuery to the provided callback, returning the result. Declaration into<R>(callback: (source: this) => R): R; Type Parameters R Parameters callback (source: this) => R A callback function. Returns R join(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates a subquery for the correlated elements of this AsyncQuery and another AsyncIterable or Iterable <!-- --> . Declaration join<I, K, R>(inner: AsyncIterable<I> | Iterable<PromiseLike<I> | I>, outerKeySelector: (element: T) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: T, inner: I) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncQuery<R>; Type Parameters I K R Parameters inner AsyncIterable <I> | Iterable < PromiseLike <I> | I> An AsyncIterable or Iterable object. outerKeySelector (element: T) => K A callback used to select the key for an element in this AsyncQuery <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in the other Iterable. resultSelector (outer: T, inner: I) => PromiseLike <R> | R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns AsyncQuery <R> last(predicate) Gets the last element in the AsyncQuery <!-- --> , optionally filtering elements using the supplied callback. Declaration last<U extends T>(predicate: (element: T) => element is U): Promise<U | undefined>; Type Parameters U Parameters predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns Promise <U | undefined> last(predicate) Gets the last element in the AsyncQuery <!-- --> , optionally filtering elements using the supplied callback. Declaration last(predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<T | undefined>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <T | undefined> map(selector) Creates a subquery by applying a callback to each element. Declaration map<U>(selector: (element: T, offset: number) => PromiseLike<U> | U): AsyncQuery<U>; Type Parameters U Parameters selector (element: T, offset: number) => PromiseLike <U> | U A callback used to map each element. Returns AsyncQuery <U> materialize() Eagerly evaluate the AsyncQuery <!-- --> , returning a new AsyncQuery <!-- --> . Subquery Declaration materialize(): AsyncUnorderedQueryFlow<this, T>; Returns AsyncUnorderedQueryFlow <this, T> max(comparer) Gets the maximum element in the AsyncQuery <!-- --> , optionally comparing elements using the supplied callback. Declaration max(comparer?: Comparison<T> | Comparer<T>): Promise<T | undefined>; Parameters comparer Comparison <T> | Comparer <T> An optional callback used to compare two elements. Scalar Returns Promise <T | undefined> maxBy(keySelector, keyComparer) Gets the maximum element by its key in the AsyncQuery <!-- --> , optionally comparing the keys of each element using the supplied callback. Declaration maxBy<K>(keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): Promise<T | undefined>; Type Parameters K Parameters keySelector (element: T) => K A callback used to choose the key to compare. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare the keys. Scalar Returns Promise <T | undefined> min(comparer) Gets the minimum element in the AsyncQuery <!-- --> , optionally comparing elements using the supplied callback. Declaration min(comparer?: Comparison<T> | Comparer<T>): Promise<T | undefined>; Parameters comparer Comparison <T> | Comparer <T> An optional callback used to compare two elements. Scalar Returns Promise <T | undefined> minBy(keySelector, keyComparer) Gets the minimum element by its key in the AsyncQuery <!-- --> , optionally comparing the keys of each element using the supplied callback. Declaration minBy<K>(keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): Promise<T | undefined>; Type Parameters K Parameters keySelector (element: T) => K A callback used to choose the key to compare. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare the keys. Scalar Returns Promise <T | undefined> nth(offset) Finds the value in the AsyncQuery at the provided offset. A negative offset starts from the last element. NOTE: This is an alias for elementAt <!-- --> . Declaration nth(offset: number | Index): Promise<T | undefined>; Parameters offset number | Index An offset. Scalar Returns Promise <T | undefined> of(elements) Creates a AsyncQuery for the provided elements. Declaration static of<T>(...elements: (PromiseLike<T> | T)[]): AsyncQuery<T>; Type Parameters T Parameters elements ( PromiseLike <T> | T)[] The elements of the AsyncQuery <!-- --> . Query Returns AsyncQuery <T> once(value) Creates a AsyncQuery over a single element. Declaration static once<T>(value: PromiseLike<T> | T): AsyncQuery<T>; Type Parameters T Parameters value PromiseLike <T> | T The only element for the AsyncQuery <!-- --> . Query Returns AsyncQuery <T> orderBy(keySelector, comparer) Creates an ordered subquery whose elements are sorted in ascending order by the provided key. Declaration orderBy<K>(keySelector: (element: T) => K, comparer?: Comparison<K> | Comparer<K>): AsyncOrderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedQueryFlow <this, T> orderByDescending(keySelector, comparer) Creates an ordered subquery whose elements are sorted in descending order by the provided key. Declaration orderByDescending<K>(keySelector: (element: T) => K, comparer?: Comparison<K> | Comparer<K>): AsyncOrderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns AsyncOrderedQueryFlow <this, T> pageBy(pageSize) Creates a subquery that splits this AsyncQuery into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration pageBy(pageSize: number): AsyncPagedQueryFlow<this, T>; Parameters pageSize number The number of elements per page. Subquery Returns AsyncPagedQueryFlow <this, T> pageBy(pageSize, pageSelector) Creates a subquery that splits this AsyncQuery into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration pageBy<R>(pageSize: number, pageSelector: (page: number, offset: number, values: UnorderedQueryFlow<this, T>) => R): AsyncQuery<R>; Type Parameters R Parameters pageSize number The number of elements per page. Subquery pageSelector (page: number, offset: number, values: UnorderedQueryFlow <this, T>) => R Returns AsyncQuery <R> patch(start, skipCount, range) Creates a subquery for the elements of this AsyncQuery with the provided range patched into the results. Declaration patch(start: number, skipCount?: number, range?: AsyncIterable<T> | Iterable<PromiseLike<T> | T>): AsyncUnorderedQueryFlow<this, T>; Parameters start number The offset at which to patch the range. skipCount number The number of elements to skip from start. range AsyncIterable <T> | Iterable < PromiseLike <T> | T> The range to patch into the result. Subquery Returns AsyncUnorderedQueryFlow <this, T> prepend(value) Creates a subquery for the elements of this AsyncQuery with the provided value prepended to the beginning. Declaration prepend(value: PromiseLike<T> | T): AsyncUnorderedQueryFlow<this, T>; Parameters value PromiseLike <T> | T The value to prepend. Subquery Returns AsyncUnorderedQueryFlow <this, T> range(start, end, increment) Creates a AsyncQuery over a range of numbers. Declaration static range(start: number, end: number, increment?: number): AsyncQuery<number>; Parameters start number The starting number of the range. end number The ending number of the range. increment number The amount by which to change between each itereated value. Query Returns AsyncQuery <number> reduce(accumulator) Computes a scalar value by applying an accumulator callback over each element. Declaration reduce(accumulator: (current: T, element: T, offset: number) => PromiseLike<T> | T): Promise<T>; Parameters accumulator (current: T, element: T, offset: number) => PromiseLike <T> | T the callback used to compute the result. Returns Promise <T> reduce(accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element. Declaration reduce<U>(accumulator: (current: U, element: T, offset: number) => PromiseLike<U>, seed: U, resultSelector?: (result: U, count: number) => PromiseLike<U> | U): Promise<U>; Type Parameters U Parameters accumulator (current: U, element: T, offset: number) => PromiseLike <U> the callback used to compute the result. seed U An optional seed value. Scalar resultSelector (result: U, count: number) => PromiseLike <U> | U Returns Promise <U> reduce(accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element. Declaration reduce<U, R>(accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U, resultSelector: (result: U, count: number) => PromiseLike<R> | R): Promise<R>; Type Parameters U R Parameters accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U the callback used to compute the result. seed U An optional seed value. resultSelector (result: U, count: number) => PromiseLike <R> | R An optional callback used to compute the final result. Scalar Returns Promise <R> reduceRight(accumulator) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration reduceRight(accumulator: (current: T, element: T, offset: number) => PromiseLike<T> | T): Promise<T>; Parameters accumulator (current: T, element: T, offset: number) => PromiseLike <T> | T the callback used to compute the result. Scalar Returns Promise <T> reduceRight(accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration reduceRight<U>(accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U, resultSelector?: (result: U, count: number) => PromiseLike<U> | U): Promise<U>; Type Parameters U Parameters accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U the callback used to compute the result. seed U An optional seed value. Scalar resultSelector (result: U, count: number) => PromiseLike <U> | U Returns Promise <U> reduceRight(accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration reduceRight<U, R>(accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U, resultSelector: (result: U, count: number) => PromiseLike<R> | R): Promise<R>; Type Parameters U R Parameters accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U the callback used to compute the result. seed U An optional seed value. resultSelector (result: U, count: number) => PromiseLike <R> | R An optional callback used to compute the final result. Scalar Returns Promise <R> relativeComplement(right, equaler) Creates a subquery for the set difference between this and another AsyncIterable or Iterable <!-- --> . NOTE: This is an alias for except <!-- --> . Declaration relativeComplement(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncUnorderedQueryFlow<this, T>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncUnorderedQueryFlow <this, T> relativeComplementBy(right, keySelector, keyEqualer) Creates a subquery for the set difference between this and another AsyncIterable or Iterable <!-- --> , where set identity is determined by the selected key. NOTE: This is an alias for exceptBy <!-- --> . Declaration relativeComplementBy<K>(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncUnorderedQueryFlow <this, T> repeat(value, count) Creates a AsyncQuery for a value repeated a provided number of times. Declaration static repeat<T>(value: PromiseLike<T> | T, count: number): AsyncQuery<T>; Type Parameters T Parameters value PromiseLike <T> | T The value for each element of the AsyncQuery <!-- --> . count number The number of times to repeat the value. Query Returns AsyncQuery <T> reverse() Creates a subquery whose elements are in the reverse order. Subquery Declaration reverse(): AsyncUnorderedQueryFlow<this, T>; Returns AsyncUnorderedQueryFlow <this, T> scan(accumulator) Creates a subquery containing the cumulative results of applying the provided callback to each element. Declaration scan(accumulator: (current: T, element: T, offset: number) => PromiseLike<T> | T): AsyncQuery<T>; Parameters accumulator (current: T, element: T, offset: number) => PromiseLike <T> | T The callback used to compute each result. Returns AsyncQuery <T> scan(accumulator, seed) Creates a subquery containing the cumulative results of applying the provided callback to each element. Declaration scan<U>(accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed: U): AsyncQuery<U>; Type Parameters U Parameters accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U The callback used to compute each result. seed U An optional seed value. Subquery Returns AsyncQuery <U> scanRight(accumulator) Creates a subquery containing the cumulative results of applying the provided callback to each element in reverse. Declaration scanRight(accumulator: (current: T, element: T, offset: number) => PromiseLike<T> | T): AsyncQuery<T>; Parameters accumulator (current: T, element: T, offset: number) => PromiseLike <T> | T The callback used to compute each result. Returns AsyncQuery <T> scanRight(accumulator, seed) Creates a subquery containing the cumulative results of applying the provided callback to each element in reverse. Declaration scanRight<U>(accumulator: (current: U, element: T, offset: number) => PromiseLike<U> | U, seed?: U): AsyncQuery<U>; Type Parameters U Parameters accumulator (current: U, element: T, offset: number) => PromiseLike <U> | U The callback used to compute each result. seed U An optional seed value. Subquery Returns AsyncQuery <U> select(selector) Creates a subquery by applying a callback to each element. NOTE: This is an alias for map <!-- --> . Declaration select<U>(selector: (element: T, offset: number) => PromiseLike<U> | U): AsyncQuery<U>; Type Parameters U Parameters selector (element: T, offset: number) => PromiseLike <U> | U A callback used to map each element. Returns AsyncQuery <U> selectMany(projection) Creates a subquery that iterates the results of applying a callback to each element. NOTE: This is an alias for flatMap <!-- --> . Declaration selectMany<U>(projection: (element: T) => AsyncIterable<U> | Iterable<PromiseLike<U> | U>): AsyncQuery<U>; Type Parameters U Parameters projection (element: T) => AsyncIterable <U> | Iterable < PromiseLike <U> | U> A callback used to map each element into an iterable. Returns AsyncQuery <U> selectMany(projection, resultSelector) Creates a subquery that iterates the results of applying a callback to each element. NOTE: This is an alias for flatMap <!-- --> . Declaration selectMany<U, R>(projection: (element: T) => AsyncIterable<U> | Iterable<PromiseLike<U> | U>, resultSelector: (element: T, innerElement: U) => PromiseLike<R> | R): AsyncQuery<R>; Type Parameters U R Parameters projection (element: T) => AsyncIterable <U> | Iterable < PromiseLike <U> | U> A callback used to map each element into an iterable. resultSelector (element: T, innerElement: U) => PromiseLike <R> | R An optional callback used to map the outer and projected inner elements. Returns AsyncQuery <R> single(predicate) Gets the only element in the AsyncQuery <!-- --> , or returns undefined <!-- --> . Declaration single<U extends T>(predicate: (element: T) => element is U): Promise<U | undefined>; Type Parameters U Parameters predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns Promise <U | undefined> single(predicate) Gets the only element in the AsyncQuery <!-- --> , or returns undefined. Declaration single(predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<T | undefined>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <T | undefined> skip(count) Creates a subquery containing all elements except the first elements up to the supplied count. NOTE: This is an alias for drop <!-- --> . Declaration skip(count: number): AsyncUnorderedQueryFlow<this, T>; Parameters count number The number of elements to skip. Subquery Returns AsyncUnorderedQueryFlow <this, T> skipRight(count) Creates a subquery containing all elements except the last elements up to the supplied count. NOTE: This is an alias for dropRight <!-- --> . Declaration skipRight(count: number): AsyncUnorderedQueryFlow<this, T>; Parameters count number The number of elements to skip. Subquery Returns AsyncUnorderedQueryFlow <this, T> skipUntil(predicate) Creates a subquery containing all elements except the first elements that don't match the supplied predicate. NOTE: This is an alias for dropUntil <!-- --> . Declaration skipUntil(predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> skipWhile(predicate) Creates a subquery containing all elements except the first elements that match the supplied predicate. NOTE: This is an alias for dropWhile <!-- --> . Declaration skipWhile(predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> some(predicate) Computes a scalar value indicating whether the AsyncQuery contains any elements, optionally filtering the elements using the supplied callback. Declaration some(predicate?: (element: T) => PromiseLike<boolean> | boolean): Promise<boolean>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean An optional callback used to match each element. Scalar Returns Promise <boolean> span(predicate) Creates a tuple whose first element is a subquery containing the first span of elements that match the supplied predicate, and whose second element is a subquery containing the remaining elements. The first subquery is eagerly evaluated, while the second subquery is lazily evaluated. Declaration span<U extends T>(predicate: (element: T, offset: number) => element is U): Promise<[UnorderedQueryFlow<this, U>, AsyncUnorderedQueryFlow<this, T>]>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U The predicate used to match elements. Scalar Returns Promise <[ UnorderedQueryFlow <this, U>, AsyncUnorderedQueryFlow <this, T>]> span(predicate) Creates a tuple whose first element is a subquery containing the first span of elements that match the supplied predicate, and whose second element is a subquery containing the remaining elements. The first subquery is eagerly evaluated, while the second subquery is lazily evaluated. Declaration span(predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): Promise<[UnorderedQueryFlow<this, T>, AsyncUnorderedQueryFlow<this, T>]>; Parameters predicate (element: T, offset: number) => PromiseLike <boolean> | boolean The predicate used to match elements. Scalar Returns Promise <[ UnorderedQueryFlow <this, T>, AsyncUnorderedQueryFlow <this, T>]> spanMap(keySelector, keyEqualer) Creates a subquery whose elements are the contiguous ranges of elements that share the same key. Declaration spanMap<K>(keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncGroupedQueryFlow<this, K, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> Returns AsyncGroupedQueryFlow <this, K, T> spanMap(keySelector, elementSelector, keyEqualer) Creates a subquery whose values are computed from each element of the contiguous ranges of elements that share the same key. Declaration spanMap<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, keyEqualer?: Equaler<K>): AsyncGroupedQueryFlow<this, K, V>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => PromiseLike <V> | V A callback used to select a value for an element. keyEqualer Equaler <K> Returns AsyncGroupedQueryFlow <this, K, V> spanMap(keySelector, elementSelector, spanSelector, keyEqualer) Creates a subquery whose values are computed from the contiguous ranges of elements that share the same key. Declaration spanMap<K, V, R>(keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, spanSelector: (key: K, elements: Query<V>) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncQuery<R>; Type Parameters K V R Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => PromiseLike <V> | V A callback used to select a value for an element. spanSelector (key: K, elements: Query <V>) => PromiseLike <R> | R A callback used to select a result from a contiguous range. keyEqualer Equaler <K> Returns AsyncQuery <R> spanMap(keySelector, elementSelector, spanSelector, keyEqualer) Creates a subquery whose values are computed from the contiguous ranges of elements that share the same key. Declaration spanMap<K, R>(keySelector: (element: T) => K, elementSelector: undefined, spanSelector: (key: K, elements: Query<T>) => PromiseLike<R> | R, keyEqualer?: Equaler<K>): AsyncQuery<R>; Type Parameters K R Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector undefined A callback used to select a value for an element. spanSelector (key: K, elements: Query <T>) => PromiseLike <R> | R A callback used to select a result from a contiguous range. keyEqualer Equaler <K> Returns AsyncQuery <R> spanUntil(predicate) Creates a tuple whose first element is a subquery containing the first span of elements that do not match the supplied predicate, and whose second element is a subquery containing the remaining elements. The first subquery is eagerly evaluated, while the second subquery is lazily evaluated. Declaration spanUntil(predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): Promise<[UnorderedQueryFlow<this, T>, AsyncUnorderedQueryFlow<this, T>]>; Parameters predicate (element: T, offset: number) => PromiseLike <boolean> | boolean The predicate used to match elements. Scalar Returns Promise <[ UnorderedQueryFlow <this, T>, AsyncUnorderedQueryFlow <this, T>]> startsWith(right, equaler) Computes a scalar value indicating whether the elements of this AsyncQuery start with the same sequence of elements in another AsyncIterable or Iterable <!-- --> . Declaration startsWith(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: EqualityComparison<T> | Equaler<T>): Promise<boolean>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns Promise <boolean> startsWith(right, equaler) Computes a scalar value indicating whether the elements of this AsyncQuery start with the same sequence of elements in another AsyncIterable or Iterable <!-- --> . Declaration startsWith<U>(right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, equaler: (left: T, right: U) => boolean): Promise<boolean>; Type Parameters U Parameters right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns Promise <boolean> sum() Computes the sum for a series of numbers. Scalar Declaration sum(): Promise<T extends number ? number : never>; Returns Promise <T extends number ? number : never> sum(elementSelector) Computes the sum for a series of numbers. Scalar Declaration sum(elementSelector: (element: T) => PromiseLike<number> | number): Promise<number>; Parameters elementSelector (element: T) => PromiseLike <number> | number Returns Promise <number> symmetricDifference(right, equaler) Creates a subquery for the symmetric difference between this and another AsyncIterable or Iterable <!-- --> . Declaration symmetricDifference<R extends AsyncIterable<T> | Iterable<PromiseLike<T> | T>>(right: R, equaler?: Equaler<T>): AsyncMergeQueryFlow<this, R, T>; Type Parameters R Parameters right R An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncMergeQueryFlow <this, R, T> symmetricDifference(right, equaler) Creates a subquery for the symmetric difference between this and another AsyncIterable or Iterable <!-- --> . Declaration symmetricDifference(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncQuery<T>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncQuery <T> symmetricDifferenceBy(right, keySelector, keyEqualer) Creates a subquery for the symmetric difference between this and another AsyncIterable or Iterable <!-- --> , where set identity is determined by the selected key. Declaration symmetricDifferenceBy<K, R extends AsyncIterable<T> | Iterable<PromiseLike<T> | T>>(right: R, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncMergeQueryFlow<this, R, T>; Type Parameters K R Parameters right R An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncMergeQueryFlow <this, R, T> symmetricDifferenceBy(right, keySelector, keyEqualer) Creates a subquery for the symmetric difference between this and another AsyncIterable or Iterable <!-- --> , where set identity is determined by the selected key. Declaration symmetricDifferenceBy<K>(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncQuery<T>; Type Parameters K Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncQuery <T> take(count) Creates a subquery containing the first elements up to the supplied count. Declaration take(count: number): AsyncUnorderedQueryFlow<this, T>; Parameters count number The number of elements to take. Subquery Returns AsyncUnorderedQueryFlow <this, T> takeRight(count) Creates a subquery containing the last elements up to the supplied count. Declaration takeRight(count: number): AsyncUnorderedQueryFlow<this, T>; Parameters count number The number of elements to take. Subquery Returns AsyncUnorderedQueryFlow <this, T> takeUntil(predicate) Creates a subquery containing the first elements that do not match the supplied predicate. Declaration takeUntil(predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> takeWhile(predicate) Creates a subquery containing the first elements that match the supplied predicate. Declaration takeWhile<U extends T>(predicate: (element: T) => element is U): AsyncUnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T) => element is U A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, U> takeWhile(predicate) Creates a subquery containing the first elements that match the supplied predicate. Declaration takeWhile(predicate: (element: T) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> tap(callback) Lazily invokes a callback as each element of the AsyncQuery is iterated. Declaration tap(callback: (element: T, offset: number) => PromiseLike<void> | void): AsyncUnorderedQueryFlow<this, T>; Parameters callback (element: T, offset: number) => PromiseLike <void> | void The callback to invoke. Returns AsyncUnorderedQueryFlow <this, T> through(callback) Pass the entire AsyncQuery to the provided callback, creating a new AsyncQuery from the result. Declaration through<R extends AsyncIterable<any> | Iterable<any>>(callback: (source: this) => R): AsyncQueryFlow<R, R extends AsyncIterable<infer U> ? U : R extends Iterable<infer U> ? U extends PromiseLike<infer P> ? P : U : unknown>; Type Parameters R Parameters callback (source: this) => R A callback function. Returns AsyncQueryFlow <R, R extends AsyncIterable <infer U> ? U : R extends Iterable <infer U> ? U extends PromiseLike <infer P> ? P : U : unknown> toArray() Creates an Array for the elements of the AsyncQuery <!-- --> . Scalar Declaration toArray(): Promise<T[]>; Returns Promise <T[]> toArray(elementSelector) Creates an Array for the elements of the AsyncQuery <!-- --> . Declaration toArray<V>(elementSelector: (element: T) => PromiseLike<V> | V): Promise<V[]>; Type Parameters V Parameters elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. Scalar Returns Promise <V[]> toHashMap(keySelector, keyEqualer) Creates a HashMap for the elements of the AsyncQuery <!-- --> . Declaration toHashMap<K>(keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Promise<HashMap<K, T>>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select a key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Promise < HashMap <K, T>> toHashMap(keySelector, elementSelector, keyEqualer) Creates a HashMap for the elements of the AsyncQuery <!-- --> . Declaration toHashMap<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, keyEqualer?: Equaler<K>): Promise<HashMap<K, V>>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Promise < HashMap <K, V>> toHashSet(equaler) Creates a HashSet for the elements of the AsyncQuery <!-- --> . Declaration toHashSet(equaler?: Equaler<T>): Promise<HashSet<T>>; Parameters equaler Equaler <T> An Equaler object used to compare equality. Scalar Returns Promise < HashSet <T>> toHashSet(elementSelector, equaler) Creates a HashSet for the elements of the AsyncQuery <!-- --> . Declaration toHashSet<V>(elementSelector: (element: T) => PromiseLike<V> | V, equaler: Equaler<V>): Promise<HashSet<V>>; Type Parameters V Parameters elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. equaler Equaler <V> An Equaler object used to compare equality. Scalar Returns Promise < HashSet <V>> toHierarchy(provider) Creates an AsyncHierarchyQuery using the provided HierarchyProvider <!-- --> . Declaration toHierarchy<TNode extends (T extends TNode ? unknown : never)>(provider: HierarchyProvider<TNode>): AsyncHierarchyQueryFlow<this, TNode, T>; Type Parameters TNode Parameters provider HierarchyProvider <TNode> A HierarchyProvider <!-- --> . Hierarchy Returns AsyncHierarchyQueryFlow <this, TNode, T> toLookup(keySelector, keyEqualer) Creates a Lookup for the elements of the AsyncQuery <!-- --> . Declaration toLookup<K>(keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Promise<Lookup<K, T>>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select a key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Promise < Lookup <K, T>> toLookup(keySelector, elementSelector, keyEqualer) Creates a Lookup for the elements of the AsyncQuery <!-- --> . Declaration toLookup<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, keyEqualer?: Equaler<K>): Promise<Lookup<K, V>>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Promise < Lookup <K, V>> toMap(keySelector) Creates a Map for the elements of the AsyncQuery <!-- --> . Declaration toMap<K>(keySelector: (element: T) => K): Promise<Map<K, T>>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Promise < Map <K, T>> toMap(keySelector, elementSelector) Creates a Map for the elements of the AsyncQuery <!-- --> . Declaration toMap<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V): Promise<Map<K, V>>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. Scalar Returns Promise < Map <K, V>> toObject(prototype, keySelector) Creates an Object for the elements of the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration toObject<TProto extends object, K extends PropertyKey>(prototype: TProto, keySelector: (element: T) => K): Promise<TProto & Record<K, T>>; Type Parameters TProto K Parameters prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Promise <TProto & Record <K, T>> toObject(prototype, keySelector) Creates an Object for the elements of the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration toObject<TProto extends object>(prototype: TProto, keySelector: (element: T) => PropertyKey): Promise<TProto & Record<PropertyKey, T>>; Type Parameters TProto Parameters prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. Scalar Returns Promise <TProto & Record < PropertyKey , T>> toObject(prototype, keySelector) Creates an Object for the elements of the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration toObject<K extends PropertyKey>(prototype: object | null | undefined, keySelector: (element: T) => K): Promise<Record<PropertyKey, T>>; Type Parameters K Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Promise < Record < PropertyKey , T>> toObject(prototype, keySelector) Creates an Object for the elements of the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration toObject(prototype: object | null | undefined, keySelector: (element: T) => PropertyKey): Promise<object>; Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. Scalar Returns Promise <object> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<TProto extends object, K extends PropertyKey, V>(prototype: TProto, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: K, element: V) => TypedPropertyDescriptor<V>): Promise<TProto & Record<K, V>>; Type Parameters TProto K V Parameters prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: K, element: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise <TProto & Record <K, V>> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<TProto extends object, V>(prototype: TProto, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: PropertyKey, element: V) => TypedPropertyDescriptor<V>): Promise<TProto & Record<PropertyKey, V>>; Type Parameters TProto V Parameters prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , element: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise <TProto & Record < PropertyKey , V>> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<K extends PropertyKey, V>(prototype: object | null | undefined, keySelector: (element: T) => K, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: K, element: V) => TypedPropertyDescriptor<V>): Promise<Record<K, V>>; Type Parameters K V Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: K, element: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise < Record <K, V>> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<V>(prototype: object | null | undefined, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: PropertyKey, element: V) => TypedPropertyDescriptor<V>): Promise<Record<PropertyKey, V>>; Type Parameters V Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , element: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise < Record < PropertyKey , V>> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the AsyncQuery <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<V>(prototype: object | null | undefined, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => PromiseLike<V> | V, descriptorSelector?: (key: PropertyKey, element: V) => PropertyDescriptor): Promise<object>; Type Parameters V Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , element: V) => PropertyDescriptor A callback that defines the PropertyDescriptor for each property. Scalar Returns Promise <object> toSet() Creates a Set for the elements of the AsyncQuery <!-- --> . Scalar Declaration toSet(): Promise<Set<T>>; Returns Promise < Set <T>> toSet(elementSelector) Creates a Set for the elements of the AsyncQuery <!-- --> . Declaration toSet<V>(elementSelector: (element: T) => PromiseLike<V> | V): Promise<Set<V>>; Type Parameters V Parameters elementSelector (element: T) => PromiseLike <V> | V A callback that selects a value for each element. Scalar Returns Promise < Set <V>> union(right, equaler) Creates a subquery for the set union of this AsyncQuery and another AsyncIterable or Iterable <!-- --> . Declaration union<R extends AsyncIterable<T> | Iterable<PromiseLike<T> | T>>(right: R, equaler?: Equaler<T>): AsyncMergeQueryFlow<this, R, T>; Type Parameters R Parameters right R An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncMergeQueryFlow <this, R, T> union(right, equaler) Creates a subquery for the set union of this AsyncQuery and another AsyncIterable or Iterable <!-- --> . Declaration union(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, equaler?: Equaler<T>): AsyncQuery<T>; Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns AsyncQuery <T> unionBy(right, keySelector, keyEqualer) Creates a subquery for the set union of this AsyncQuery and another AsyncIterable or Iterable <!-- --> , where set identity is determined by the selected key. Declaration unionBy<K, R extends AsyncIterable<T> | Iterable<PromiseLike<T> | T>>(right: R, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncMergeQueryFlow<this, R, T>; Type Parameters K R Parameters right R An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncMergeQueryFlow <this, R, T> unionBy(right, keySelector, keyEqualer) Creates a subquery for the set union of this AsyncQuery and another AsyncIterable or Iterable <!-- --> , where set identity is determined by the selected key. Declaration unionBy<K>(right: AsyncIterable<T> | Iterable<PromiseLike<T> | T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): AsyncQuery<T>; Type Parameters K Parameters right AsyncIterable <T> | Iterable < PromiseLike <T> | T> An AsyncIterable or Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns AsyncQuery <T> unzip() Unzips a sequence of tuples into a tuple of sequences. Declaration unzip(): Promise<T extends readonly unknown[] | [] ? { -readonly [I in keyof T]: T[I][]; } : unknown[]>; Returns Promise <T extends readonly unknown[] | [] ? { -readonly [I in keyof T]: T[I][]; } : unknown[]> unzip(partSelector) Unzips a sequence of tuples into a tuple of sequences. Declaration unzip<U extends readonly unknown[] | []>(partSelector: (value: T) => U): Promise<{ -readonly [I in keyof U]: U[I][]; }>; Type Parameters U Parameters partSelector (value: T) => U A callback that converts a result into a tuple. Scalar Returns Promise <{ -readonly [I in keyof U]: U[I][]; }> where(predicate) Creates a subquery whose elements match the supplied predicate. NOTE: This is an alias for filter <!-- --> . Declaration where<U extends T>(predicate: (element: T, offset: number) => element is U): AsyncUnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, U> where(predicate) Creates a subquery whose elements match the supplied predicate. NOTE: This is an alias for filter <!-- --> . Declaration where(predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T, offset: number) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> whereBy(keySelector, predicate) Creates a subquery where the selected key for each element matches the supplied predicate. NOTE: This is an alias for filterBy <!-- --> . Declaration whereBy<K>(keySelector: (element: T) => K, predicate: (key: K, offset: number) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => PromiseLike <boolean> | boolean A callback used to match each key. Returns AsyncUnorderedQueryFlow <this, T> whereDefined() Creates a subquery whose elements are neither null nor undefined <!-- --> . NOTE: This is an alias for filterDefined <!-- --> . Subquery Declaration whereDefined(): AsyncUnorderedQueryFlow<this, NonNullable<T>>; Returns AsyncUnorderedQueryFlow <this, NonNullable <T>> whereDefinedBy(keySelector) Creates a subquery where the selected key for each element is neither null nor undefined <!-- --> . NOTE: This is an alias for filterDefinedBy <!-- --> . Declaration whereDefinedBy<K>(keySelector: (element: T) => K): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. Returns AsyncUnorderedQueryFlow <this, T> whereNot(predicate) Creates a subquery whose elements do not match the supplied predicate. NOTE: This is an alias for filterNot <!-- --> . Declaration whereNot<U extends T>(predicate: (element: T, offset: number) => element is U): AsyncUnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, U> whereNot(predicate) Creates a subquery whose elements do not match the supplied predicate. NOTE: This is an alias for filterNot <!-- --> . Declaration whereNot(predicate: (element: T, offset: number) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Parameters predicate (element: T, offset: number) => PromiseLike <boolean> | boolean A callback used to match each element. Returns AsyncUnorderedQueryFlow <this, T> whereNotBy(keySelector, predicate) Creates a subquery where the selected key for each element does not match the supplied predicate. NOTE: This is an alias for filterNotBy <!-- --> . Declaration whereNotBy<K>(keySelector: (element: T) => K, predicate: (key: K, offset: number) => PromiseLike<boolean> | boolean): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => PromiseLike <boolean> | boolean A callback used to match each key. Returns AsyncUnorderedQueryFlow <this, T> whereNotDefinedBy(keySelector) Creates a subquery where the selected key for each element is either null or undefined <!-- --> . NOTE: This is an alias for filterNotDefinedBy <!-- --> . Declaration whereNotDefinedBy<K>(keySelector: (element: T) => K): AsyncUnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. Returns AsyncUnorderedQueryFlow <this, T> zip(right) Creates a subquery that combines this AsyncQuery with another AsyncIterable or Iterable by combining elements in tuples. Declaration zip<U>(right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>): AsyncQuery<[T, U]>; Type Parameters U Parameters right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. Join Returns AsyncQuery <[T, U]> zip(right, selector) Creates a subquery that combines this AsyncQuery with another AsyncIterable or Iterable by combining elements using the supplied callback. Declaration zip<U, R>(right: AsyncIterable<U> | Iterable<PromiseLike<U> | U>, selector: (left: T, right: U) => PromiseLike<R> | R): AsyncQuery<R>; Type Parameters U R Parameters right AsyncIterable <U> | Iterable < PromiseLike <U> | U> An AsyncIterable or Iterable object. selector (left: T, right: U) => PromiseLike <R> | R A callback used to combine two elements. Join Returns AsyncQuery <R>"
  },
  "api/async-lazy.html": {
    "href": "api/async-lazy.html",
    "title": "@esfx/async-lazy Package | @esfx API Reference",
    "keywords": "@esfx/async-lazy Package Lazy-initialized asynchronous value. Installation npm i @esfx/async-lazy Usage TypeScript JavaScript (CommonJS) import { AsyncLazy } from \"@esfx/async-lazy\"; async function main() { // lazy initialize an object const lazy1 = new AsyncLazy(() => new SomeObject()); lazy1.isStarted; // false const p1 = lazy1.value; // Promise {} lazy1.isStarted; // true await p1; // SomeObject {} // lazy initialize with arguments const lazy2 = AsyncLazy.from( async (a, b) => (await a) + (await b), Promise.resolve(1), Promise.resolve(2)); lazy2.isStarted; // false const p2 = lazy2.value; // Promise {} lazy2.isStarted; // true await p2; // 3 // initialized \"lazy\" const lazy3 = AsyncLazy.for(Promise.resolve(\"test\")); lazy3.isStarted; // true await lazy3.value; // \"test\" } const { AsyncLazy } = require(\"@esfx/async-lazy\"); async function main() { // lazy initialize an object const lazy1 = new AsyncLazy(() => new SomeObject()); lazy1.isStarted; // false const p1 = lazy1.value; // Promise {} lazy1.isStarted; // true await p1; // SomeObject {} // lazy initialize with arguments const lazy2 = AsyncLazy.from( async (a, b) => (await a) + (await b), Promise.resolve(1), Promise.resolve(2)); lazy2.isStarted; // false const p2 = lazy2.value; // Promise {} lazy2.isStarted; // true await p2; // 3 // initialized \"lazy\" const lazy3 = AsyncLazy.for(Promise.resolve(\"test\")); lazy3.isStarted; // true await lazy3.value; // \"test\" } Classes AsyncLazy A lazy-initialized asynchronous value."
  },
  "api/async-lazy/asynclazy.html": {
    "href": "api/async-lazy/asynclazy.html",
    "title": "AsyncLazy Class | @esfx API Reference",
    "keywords": "AsyncLazy Class Package : @esfx/async-lazy A lazy-initialized asynchronous value. Declaration export declare class AsyncLazy<T> Constructors constructor(factory) Constructs a new instance of the AsyncLazy class Declaration constructor(factory: () => T | PromiseLike<T>); Parameters factory () => T | PromiseLike <T> Properties isStarted Declaration get isStarted(): boolean; Property Value boolean value Declaration get value(): Promise<T>; Property Value Promise <T> Methods for(value) Declaration static for<T>(value: T | PromiseLike<T>): AsyncLazy<T>; Type Parameters T Parameters value T | PromiseLike <T> Returns AsyncLazy <T> from(factory, args) Declaration static from<T, A extends any[]>(factory: (...args: A) => T | PromiseLike<T>, ...args: A): AsyncLazy<T>; Type Parameters T A Parameters factory (...args: A) => T | PromiseLike <T> args A Returns AsyncLazy <T>"
  },
  "api/async-lockable.html": {
    "href": "api/async-lockable.html",
    "title": "@esfx/async-lockable Package | @esfx API Reference",
    "keywords": "@esfx/async-lockable Package A low-level Symbol-based common API for async coordination primitives. Installation npm i @esfx/async-lockable Usage TBD Interfaces AsyncLockable Represents a value that can be used to synchronize access to a resource. LockHandle<TMutex> An object used to release a held lock. UpgradeableLockHandle<TMutex, TUpgradedMutex> An object used to release a held lock or upgrade to a stronger lock. Namespaces AsyncLockable"
  },
  "api/async-lockable/asynclockable-interface.html": {
    "href": "api/async-lockable/asynclockable-interface.html",
    "title": "AsyncLockable Interface | @esfx API Reference",
    "keywords": "AsyncLockable Interface Package : @esfx/async-lockable Represents a value that can be used to synchronize access to a resource. Declaration export interface AsyncLockable Methods [AsyncLockable.lock](cancelable) Takes a lock. Declaration [AsyncLockable.lock](cancelable?: Cancelable): Promise<LockHandle>; Parameters cancelable Cancelable A Cancelable object that can be used to cancel the request. Returns Promise < LockHandle > [AsyncLockable.unlock]() Releases a lock. Declaration [AsyncLockable.unlock](): void; Returns void"
  },
  "api/async-lockable/asynclockable-namespace.html": {
    "href": "api/async-lockable/asynclockable-namespace.html",
    "title": "AsyncLockable Namespace | @esfx API Reference",
    "keywords": "AsyncLockable Namespace Package : @esfx/async-lockable Functions hasInstance(value) Determines whether a value is AsyncLockable <!-- --> . Declaration function hasInstance(value: unknown): value is AsyncLockable; Parameters value unknown Returns value is AsyncLockable Variables lock A well-known symbol used to define an locking method on an object. Declaration lock: unique symbol name Declaration name = \"AsyncLockable\" unlock A well-known symbol used to define an unlocking method on an object. Declaration unlock: unique symbol"
  },
  "api/async-lockable/lockhandle.html": {
    "href": "api/async-lockable/lockhandle.html",
    "title": "LockHandle<TMutex> Interface | @esfx API Reference",
    "keywords": "LockHandle<TMutex> Interface Package : @esfx/async-lockable An object used to release a held lock. Declaration export interface LockHandle<TMutex extends AsyncLockable = AsyncLockable> extends Disposable, AsyncLockable Inheritance Disposable AsyncLockable LockHandle<TMutex> Inherited Members constructor(dispose) [AsyncLockable.lock](cancelable) [AsyncLockable.unlock]() Properties mutex Gets the associated AsyncLockable object. Declaration readonly mutex: TMutex; Property Value TMutex ownsLock Indicates whether this handle owns its associated mutex <!-- --> . Declaration readonly ownsLock: boolean; Property Value boolean Methods lock(cancelable) Reacquires the lock. If this handle already owns the lock, an Error is thrown. Declaration lock(cancelable?: Cancelable): Promise<this>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise <this> unlock() Releases the lock. If this handle does not own the lock, an Error is thrown. Declaration unlock(): void; Returns void"
  },
  "api/async-lockable/upgradeablelockhandle.html": {
    "href": "api/async-lockable/upgradeablelockhandle.html",
    "title": "UpgradeableLockHandle<TMutex, TUpgradedMutex> Interface | @esfx API Reference",
    "keywords": "UpgradeableLockHandle<TMutex, TUpgradedMutex> Interface Package : @esfx/async-lockable An object used to release a held lock or upgrade to a stronger lock. Declaration export interface UpgradeableLockHandle<TMutex extends AsyncLockable = AsyncLockable, TUpgradedMutex extends AsyncLockable = AsyncLockable> extends LockHandle<TMutex> Inheritance LockHandle <TMutex> UpgradeableLockHandle<TMutex, TUpgradedMutex> Inherited Members lock(cancelable) mutex ownsLock unlock() Methods upgrade(cancelable) Upgrades the lock to a stronger lock. Declaration upgrade(cancelable?: Cancelable): Promise<LockHandle<TUpgradedMutex>>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise < LockHandle <TUpgradedMutex>>"
  },
  "api/async-manualresetevent.html": {
    "href": "api/async-manualresetevent.html",
    "title": "@esfx/async-manualresetevent Package | @esfx API Reference",
    "keywords": "@esfx/async-manualresetevent Package The @esfx/async-manualresetevent package provides the AsyncManualResetEvent class, an async coordination primitive. Installation npm i @esfx/async-manualresetevent Usage TypeScript JavaScript (CommonJS) import { AsyncManualResetEvent } from \"@esfx/async-manualresetevent\"; const event = new AsyncManualResetEvent(); async function doSomeActivity() { // do some work asynchronously... // signal completion of the activity event.set(); } async function doSomeOtherActivity() { // do some work asynchronously... // wait for 'doSomeActivity' to finish await event.wait(); // keep working now that both activities have synchronized... } // start some work doSomeActivity(); // start some other work doSomeOtherActivity(); const { AsyncManualResetEvent } = require(\"@esfx/async-manualresetevent\"); const event = new AsyncManualResetEvent(); async function doSomeActivity() { // do some work asynchronously... // signal completion of the activity event.set(); } async function doSomeOtherActivity() { // do some work asynchronously... // wait for 'doSomeActivity' to finish await event.wait(); // keep working now that both activities have synchronized... } // start some work doSomeActivity(); // start some other work doSomeOtherActivity(); Classes AsyncManualResetEvent Asynchronously notifies one or more waiting Promises that an event has occurred."
  },
  "api/async-manualresetevent/asyncmanualresetevent.html": {
    "href": "api/async-manualresetevent/asyncmanualresetevent.html",
    "title": "AsyncManualResetEvent Class | @esfx API Reference",
    "keywords": "AsyncManualResetEvent Class Package : @esfx/async-manualresetevent Asynchronously notifies one or more waiting Promises that an event has occurred. Declaration export declare class AsyncManualResetEvent Examples The following example shows how to use AsyncManualResetEvent to release asynchronous operations. In this demonstration, we start three asynchronous operations that pause when awaiting the result of wait(cancelable) because the event is unsignaled. After pressing Enter , the event becomes signaled and all three operations can continue. Pressing Enter again then demonstrates that two more asynchronous operations won't pause when awaiting the result of wait(cancelable) because the event is now unsignaled. Pressing Enter a third time calls reset() on the event and demonstrates that a new asynchronous operation will once again pause when awaiting the result of wait(cancelable) now that the event has become signaled. Pressing Enter a fourth and final time calls set() to signal the event and allow the final operation to conclude. Note The following example is derived from https://docs.microsoft.com/en-us/dotnet/api/system.threading.manualresetevent?view=net-6.0#examples TypeScript JavaScript (CommonJS) import { AsyncManualResetEvent } from \"@esfx/async-manualresetevent\"; import { delay } from \"@esfx/async-delay\"; import * as readline from \"readline\"; const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const question = (text: string) => new Promise<string>(resolve => rl.question(text, resolve)); const evt = new AsyncManualResetEvent(); async function main() { console.log(`Starting three operations that will pause while waiting for the event.`); let promises: Promise<void>[] = []; for (let i = 0; i < 3; i++) { promises.push(asyncOperation(`operation #${i + 1}`)); } await delay(500); await question(`When all three operations have started, press Enter to release them.`); evt.set(); await delay(500); await Promise.all(promises); console.log(`When the event is signaled, operations will not pause.`); await question(`Press Enter to demonstrate.`); promises = []; for (let i = 3; i < 4; i++) { promises.push(asyncOperation(`operation #${i + 1}`)); } await delay(500); await Promise.all(promises); console.log(`When the event is reset, operations will again pause.`); await question(`Press Enter to demonstrate.`); evt.reset(); promises = []; promises.push(asyncOperation(\"operation #5\")); await delay(500); await question(`Press Enter to signal the event and conclude the demonstration.`); evt.set(); await Promise.all(promises); } async function asyncOperation(name: string) { console.log(`${name} is waiting on the event.`); await evt.wait(); console.log(`${name} was released from the event.`); } await main(); import { AsyncManualResetEvent } from \"@esfx/async-manualresetevent\"; import { delay } from \"@esfx/async-delay\"; import * as readline from \"readline\"; const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const question = text => new Promise(resolve => rl.question(text, resolve)); const evt = new AsyncManualResetEvent(); async function main() { console.log(`Starting three operations that will pause while waiting for the event.`); let promises = []; for (let i = 0; i < 3; i++) { promises.push(asyncOperation(`operation #${i + 1}`)); } await delay(500); await question(`When all three operations have started, press Enter to release them.`); evt.set(); await delay(500); await Promise.all(promises); console.log(`When the event is signaled, operations will not pause.`); await question(`Press Enter to demonstrate.`); promises = []; for (let i = 3; i < 4; i++) { promises.push(asyncOperation(`operation #${i + 1}`)); } await delay(500); await Promise.all(promises); console.log(`When the event is reset, operations will again pause.`); await question(`Press Enter to demonstrate.`); evt.reset(); promises = []; promises.push(asyncOperation(\"operation #5\")); await delay(500); await question(`Press Enter to signal the event and conclude the demonstration.`); evt.set(); await Promise.all(promises); } async function asyncOperation(name) { console.log(`${name} is waiting on the event.`); await evt.wait(); console.log(`${name} was released from the event.`); } main().catch(e => { console.error(e); process.exit(-1); }); Remarks The AsyncAutoResetEvent and AsyncManualResetEvent classes are used to provide signaling between concurrent asynchronous operations. An asynchronous operation can wait until an event is signaled by awaiting the result of wait(cancelable) . This causes the operation to pause until the event becomes signaled. Calling set() will signal and release all waiting operations. The event will remain in the signaled state until reset() is called, which resets the event to the non-signaled state. You can use isSet to check whether the event is currently signaled to avoid calling wait(cancelable) (and avoid the await that entails). Constructors constructor(initialState) Initializes a new instance of the ManualResetEvent class. Declaration constructor(initialState?: boolean); Parameters initialState boolean A value indicating whether to set the initial state to signaled. Properties isSet Gets a value indicating whether the event is signaled. Declaration get isSet(): boolean; Property Value boolean Methods reset() Sets the state of the event to nonsignaled, causing asynchronous operations to pause. Declaration reset(): void; Returns void set() Sets the state of the event to signaled, resolving one or more waiting Promises. Declaration set(): void; Returns void wait(cancelable) Asynchronously waits for the event to become signaled. Declaration wait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise <void>"
  },
  "api/async-mutex.html": {
    "href": "api/async-mutex.html",
    "title": "@esfx/async-mutex Package | @esfx API Reference",
    "keywords": "@esfx/async-mutex Package Provides the AsyncMutex class, an async coordination primitive. Installation npm i @esfx/async-mutex Usage TypeScript JavaScript (CommonJS) import { AsyncMutex } from \"@esfx/async-mutex\"; const m = new AsyncMutex(); let counter = 0; async function worker() { for (let i = 0; i < 3; i++) { // get exclusive access to 'm', which protects 'counter'. const lk = await m.lock(); try { const current = counter; await doSomethingElse(); // we still have exclusive access to 'm', which protects 'counter'. counter = current + 1; } finally { // release the lock lk.unlock(); } } } async function main() { // start two workers that share a resource await Promise.all([worker(), worker()]); counter; // 6 } const { AsyncMutex } = require(\"@esfx/async-mutex\"); const m = new AsyncMutex(); let counter = 0; async function worker() { for (let i = 0; i < 3; i++) { // get exclusive access to 'm', which protects 'counter'. const lk = await m.lock(); try { const current = counter; await doSomethingElse(); // we still have exclusive access to 'm', which protects 'counter'. counter = current + 1; } finally { // release the lock lk.unlock(); } } } async function doSomethingElse() { /*...*/ } async function main() { // start two workers that share a resource await Promise.all([worker(), worker()]); counter; // 6 } Classes AsyncMutex An async coordination primitive used to coordinate access to a protected resource."
  },
  "api/async-mutex/asyncmutex.html": {
    "href": "api/async-mutex/asyncmutex.html",
    "title": "AsyncMutex Class | @esfx API Reference",
    "keywords": "AsyncMutex Class Package : @esfx/async-mutex An async coordination primitive used to coordinate access to a protected resource. Declaration export declare class AsyncMutex implements AsyncLockable Properties [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string isLocked Indicates whether the lock has been taken. Declaration get isLocked(): boolean; Property Value boolean Methods [AsyncLockable.lock](cancelable) Declaration [AsyncLockable.lock](cancelable?: Cancelable): Promise<LockHandle<AsyncMutex>>; Parameters cancelable Cancelable Returns Promise < LockHandle < AsyncMutex >> [AsyncLockable.unlock]() Declaration [AsyncLockable.unlock](): void; Returns void lock(cancelable) Asynchronously waits for the lock to become available and then takes the lock. Declaration lock(cancelable?: Cancelable): Promise<LockHandle<AsyncMutex>>; Parameters cancelable Cancelable A Cancelable used to cancel the pending request. Returns Promise < LockHandle < AsyncMutex >> tryLock() Synchronously tries to take a lock. Declaration tryLock(): boolean; Returns boolean unlock() Releases the lock. Declaration unlock(): boolean; Returns boolean"
  },
  "api/async-queue.html": {
    "href": "api/async-queue.html",
    "title": "@esfx/async-queue Package | @esfx API Reference",
    "keywords": "@esfx/async-queue Package The @esfx/async-queue package provides the AsyncQueue class, an async coordination primitive. Installation npm i @esfx/async-queue Usage TypeScript JavaScript (CommonJS) import { AsyncQueue } from \"@esfx/async-queue\"; async function main() { const queue = new AsyncQueue<number>(); // put two items on the queue queue.put(1); queue.put(Promise.resolve(2)); // take two items from the queue await queue.get(); // 1 await queue.get(); // 2 // take two more pending items from the queue const p3 = queue.get(); const p4 = queue.get(); // put two more items on the queue queue.put(3); queue.put(4); await p3; // 3 await p4; // 4 } const { AsyncQueue } = require(\"@esfx/async-queue\"); async function main() { const queue = new AsyncQueue(); // put two items on the queue queue.put(1); queue.put(Promise.resolve(2)); // take two items from the queue await queue.get(); // 1 await queue.get(); // 2 // take two more pending items from the queue const p3 = queue.get(); const p4 = queue.get(); // put two more items on the queue queue.put(3); queue.put(4); await p3; // 3 await p4; // 4 } Classes AsyncQueue An asynchronous queue."
  },
  "api/async-queue/asyncqueue.html": {
    "href": "api/async-queue/asyncqueue.html",
    "title": "AsyncQueue Class | @esfx API Reference",
    "keywords": "AsyncQueue Class Package : @esfx/async-queue An asynchronous queue. Declaration export declare class AsyncQueue<T> Constructors constructor(iterable) Initializes a new instance of the AsyncQueue class. Declaration constructor(iterable?: Iterable<T | PromiseLike<T>>); Parameters iterable Iterable <T | PromiseLike <T>> An optional iterable of values or promises. Properties done Gets a value indicating whether the queue has ended and there are no more items available. Declaration get done(): boolean; Property Value boolean readable Gets a value indicating whether items can be read from the queue. Declaration get readable(): boolean; Property Value boolean size Gets the number of entries in the queue. When positive, indicates the number of entries available to get. When negative, indicates the number of requests waiting to be fulfilled. Declaration get size(): number; Property Value number writable Gets a value indicating whether new items can be added to the queue. Declaration get writable(): boolean; Property Value boolean Methods doneReading() Blocks attempts to read from the queue until it is empty. Available items in the queue can still be read until the queue is empty. Declaration doneReading(): void; Returns void doneWriting() Blocks attempts to write to the queue. Pending requests in the queue can still be resolved until the queue is empty. Declaration doneWriting(): void; Returns void end() Blocks future attempts to read or write from the queue. Available items in the queue can still be read until the queue is empty. Pending reads from the queue are rejected with a CancelError <!-- --> . Declaration end(): void; Returns void get(cancelable) Removes and returns a Promise for the first value in the queue. If the queue is empty, returns a Promise for the next value to be added to the queue. Declaration get(cancelable?: Cancelable): Promise<T>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise <T> put(this) Adds a value to the end of the queue. If the queue is empty but has a pending dequeue request, the value will be dequeued and the request fulfilled. Declaration put(this: AsyncQueue<void>): void; Parameters this AsyncQueue <void> Returns void put(value) Adds a value to the end of the queue. If the queue is empty but has a pending dequeue request, the value will be dequeued and the request fulfilled. Declaration put(value: T | PromiseLike<T>): void; Parameters value T | PromiseLike <T> A value or promise to add to the queue. Returns void"
  },
  "api/async-readerwriterlock.html": {
    "href": "api/async-readerwriterlock.html",
    "title": "@esfx/async-readerwriterlock Package | @esfx API Reference",
    "keywords": "@esfx/async-readerwriterlock Package The @esfx/async-readerwriterlock package provides the AsyncReaderWriterLock class, an async coordination primitive. Installation npm i @esfx/async-readerwriterlock Usage TypeScript JavaScript (CommonJS) import { AsyncReaderWriterLock } from \"@esfx/async-readerwriterlock\"; interface User { id: string, name: string, email: string } // 'rwlock' protects access to 'userCache' and data stored on disk const rwlock = new AsyncReaderWriterLock(); const userCache = new Map<string, User>(); async function getUser(id: string) { // get read access const lk = await rwlock.read(); try { let user = userCache.get(id); if (!user) { user = await readUserFromDisk(id); userCache.set(id, user); } return user; } finally { // release read access lk.unlock(); } } async function addUser(user: User) { // get write access const lk = await rwlock.write(); try { userCache.set(user.id, user); await writeUserToDisk(user.id, user); } finally { // release write access lk.unlock(); } } async function updateUser(id: string, oldData: User, newData: User) { // get upgradeable read access const lk = await rwlock.upgradeableRead(); try { // verify that we are ok to make changes... let user = userCache.get(id); if (!user || user.name === oldData.name && user.email === oldData.email) { // looks safe, so upgrade to a write lock const updlk = await lk.upgrade(); try { if (!user) { user = { id } as User; userCache.set(id, user); } user.name = newData.name; user.email = newData.email; await writeUserToDisk(user.id, user); } finally { updlk.unlock(); // release the write lock } } } finally { lk.unlock(); // release the read lock } } const { AsyncReaderWriterLock } = require(\"@esfx/async-readerwriterlock\"); // 'rwlock' protects access to 'userCache' and data stored on disk const rwlock = new AsyncReaderWriterLock(); const userCache = new Map(); async function getUser(id) { // get read access const lk = await rwlock.read(); try { let user = userCache.get(id); if (!user) { user = await readUserFromDisk(id); userCache.set(id, user); } return user; } finally { // release read access lk.unlock(); } } async function addUser(user) { // get write access const lk = await rwlock.write(); try { userCache.set(user.id, user); await writeUserToDisk(user.id, user); } finally { // release write access lk.unlock(); } } async function updateUser(id, oldData, newData) { // get upgradeable read access const lk = await rwlock.upgradeableRead(); try { // verify that we are ok to make changes... let user = userCache.get(id); if (!user || user.name === oldData.name && user.email === oldData.email) { // looks safe, so upgrade to a write lock const updlk = await lk.upgrade(); try { if (!user) { user = { id }; userCache.set(id, user); } user.name = newData.name; user.email = newData.email; await writeUserToDisk(user.id, user); } finally { updlk.unlock(); // release the write lock } } } finally { lk.unlock(); // release the read lock } } Classes AsyncReaderWriterLock Coordinates readers and writers for a resource. Interfaces AsyncReaderWriterLockReader AsyncReaderWriterLockUpgradeableReader AsyncReaderWriterLockWriter"
  },
  "api/async-readerwriterlock/asyncreaderwriterlock.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlock.html",
    "title": "AsyncReaderWriterLock Class | @esfx API Reference",
    "keywords": "AsyncReaderWriterLock Class Package : @esfx/async-readerwriterlock Coordinates readers and writers for a resource. Declaration export declare class AsyncReaderWriterLock Methods createReader() Creates a AsyncReaderWriterLockReader that can be used to take and release \"read\" locks on a resource. Declaration createReader(): AsyncReaderWriterLockReader; Returns AsyncReaderWriterLockReader createUpgradeableReader() Creates a AsyncReaderWriterLockUpgradeableReader that can be used to take and release \"read\" locks on a resource and can be later upgraded to take and release \"write\" locks. Declaration createUpgradeableReader(): AsyncReaderWriterLockUpgradeableReader; Returns AsyncReaderWriterLockUpgradeableReader createWriter() Creates a AsyncReaderWriterLockWriter that can be used to take and release \"write\" locks on a resource. Declaration createWriter(): AsyncReaderWriterLockWriter; Returns AsyncReaderWriterLockWriter read(cancelable) Asynchronously waits for and takes a read lock on a resource. Declaration read(cancelable?: Cancelable): Promise<AsyncReaderWriterLockReader>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise < AsyncReaderWriterLockReader > upgradeableRead(cancelable) Asynchronously waits for and takes a read lock on a resource that can later be upgraded to a write lock. Declaration upgradeableRead(cancelable?: Cancelable): Promise<AsyncReaderWriterLockUpgradeableReader>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise < AsyncReaderWriterLockUpgradeableReader > write(cancelable) Asynchronously waits for and takes a write lock on a resource. Declaration write(cancelable?: Cancelable): Promise<AsyncReaderWriterLockWriter>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise < AsyncReaderWriterLockWriter >"
  },
  "api/async-readerwriterlock/asyncreaderwriterlockreader.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlockreader.html",
    "title": "AsyncReaderWriterLockReader Interface | @esfx API Reference",
    "keywords": "AsyncReaderWriterLockReader Interface Package : @esfx/async-readerwriterlock Declaration export interface AsyncReaderWriterLockReader extends LockHandle<AsyncReaderWriterLockReader> Inheritance LockHandle < AsyncReaderWriterLockReader > AsyncReaderWriterLockReader Inherited Members lock(cancelable) mutex ownsLock unlock() Properties owner Gets the AsyncReaderWriterLock that owns this object. Declaration readonly owner: AsyncReaderWriterLock; Property Value AsyncReaderWriterLock"
  },
  "api/async-readerwriterlock/asyncreaderwriterlockupgradeablereader.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlockupgradeablereader.html",
    "title": "AsyncReaderWriterLockUpgradeableReader Interface | @esfx API Reference",
    "keywords": "AsyncReaderWriterLockUpgradeableReader Interface Package : @esfx/async-readerwriterlock Declaration export interface AsyncReaderWriterLockUpgradeableReader extends UpgradeableLockHandle<AsyncReaderWriterLockUpgradeableReader, AsyncReaderWriterLockWriter> Inheritance UpgradeableLockHandle < AsyncReaderWriterLockUpgradeableReader , AsyncReaderWriterLockWriter > AsyncReaderWriterLockUpgradeableReader Inherited Members upgrade(cancelable) Properties owner Gets the AsyncReaderWriterLock that owns this object. Declaration readonly owner: AsyncReaderWriterLock; Property Value AsyncReaderWriterLock Methods createWriter() Creates a AsyncReaderWriterLockWriter that can be used to take and release \"write\" locks on a resource. Declaration createWriter(): AsyncReaderWriterLockWriter; Returns AsyncReaderWriterLockWriter upgrade(cancelable) Asynchronously waits for and takes a write lock on a resource. Declaration upgrade(cancelable?: Cancelable): Promise<AsyncReaderWriterLockWriter>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise < AsyncReaderWriterLockWriter >"
  },
  "api/async-readerwriterlock/asyncreaderwriterlockwriter.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlockwriter.html",
    "title": "AsyncReaderWriterLockWriter Interface | @esfx API Reference",
    "keywords": "AsyncReaderWriterLockWriter Interface Package : @esfx/async-readerwriterlock Declaration export interface AsyncReaderWriterLockWriter extends LockHandle<AsyncReaderWriterLockWriter> Inheritance LockHandle < AsyncReaderWriterLockWriter > AsyncReaderWriterLockWriter Inherited Members lock(cancelable) mutex ownsLock unlock() Properties owner Gets the AsyncReaderWriterLock that owns this object. Declaration readonly owner: AsyncReaderWriterLock; Property Value AsyncReaderWriterLock"
  },
  "api/async-semaphore.html": {
    "href": "api/async-semaphore.html",
    "title": "@esfx/async-semaphore Package | @esfx API Reference",
    "keywords": "@esfx/async-semaphore Package The @esfx/async-semaphore package provides the AsyncSemaphore class, an async coordination primitive. Installation npm i @esfx/async-semaphore Usage TypeScript JavaScript (CommonJS) import { AsyncSemaphore } from \"@esfx/async-semaphore\"; // create a semaphore that allows one participant const semaphore = new AsyncSemaphore(1); async function updateResource(updates: UpdateObject) { // Wait for a lock on the semaphore await semaphore.wait(); try { // Between the 'wait' above and the 'release' below, // this function has exclusive access to a resource... // Await something async, allowing other logic to // execute. If some other event/timer/etc. calls // 'updateResource' before this async operation // finishes, they will be blocked at the 'wait' above. await doSomethingAsync(); // We still have exclusive access even after resuming, // so we can continue to use our exclusive access. } finally { // Release the semaphore. The next waiter will // be unblocked and will have the lock instead. semaphore.release(); } } const { AsyncSemaphore } = require(\"@esfx/async-semaphore\"); // create a semaphore that allows one participant const semaphore = new AsyncSemaphore(1); async function updateResource(updates) { // Wait for a lock on the semaphore await semaphore.wait(); try { // Between the 'wait' above and the 'release' below, // this function has exclusive access to a resource... // Await something async, allowing other logic to // execute. If some other event/timer/etc. calls // 'updateResource' before this async operation // finishes, they will be blocked at the 'wait' above. await doSomethingAsync(); // We still have exclusive access even after resuming, // so we can continue to use our exclusive access. } finally { // Release the semaphore. The next waiter will // be unblocked and will have the lock instead. semaphore.release(); } } Classes AsyncSemaphore Limits the number of asynchronous operations that can access a resource or pool of resources."
  },
  "api/async-semaphore/asyncsemaphore.html": {
    "href": "api/async-semaphore/asyncsemaphore.html",
    "title": "AsyncSemaphore Class | @esfx API Reference",
    "keywords": "AsyncSemaphore Class Package : @esfx/async-semaphore Limits the number of asynchronous operations that can access a resource or pool of resources. Declaration export declare class AsyncSemaphore Constructors constructor(initialCount, maxCount) Initializes a new instance of the Semaphore class. Declaration constructor(initialCount: number, maxCount?: number); Parameters initialCount number The initial number of entries. maxCount number The maximum number of entries. Properties count Gets the number of remaining asynchronous operations that can enter the Semaphore. Declaration get count(): number; Property Value number Methods release(count) Releases the Semaphore one or more times. Declaration release(count?: number): void; Parameters count number The number of times to release the Semaphore. Returns void wait(cancelable) Asynchronously waits for the event to become signaled. Declaration wait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable An optional Cancelable used to cancel the request. Returns Promise <void>"
  },
  "api/async-stack.html": {
    "href": "api/async-stack.html",
    "title": "@esfx/async-stack Package | @esfx API Reference",
    "keywords": "@esfx/async-stack Package The @esfx/async-stack package provides the AsyncStack class, an async coordination primitive. Installation npm i @esfx/async-stack Usage TypeScript JavaScript (CommonJS) import { AsyncStack } from \"@esfx/async-stack\"; async function main() { const stack = new AsyncStack<number>(); // push two items on the stack stack.push(1); stack.push(Promise.resolve(2)); // take two items from the stack await stack.pop(); // 2 await stack.pop(); // 1 // take two more pending items from the stack const p3 = stack.pop(); const p4 = stack.pop(); // put two more items on the stack stack.push(3); stack.push(4); await p3; // 3 await p4; // 4 } const { AsyncStack } = require(\"@esfx/async-stack\"); async function main() { const stack = new AsyncStack(); // push two items on the stack stack.push(1); stack.push(Promise.resolve(2)); // take two items from the stack await stack.pop(); // 2 await stack.pop(); // 1 // take two more pending items from the stack const p3 = stack.pop(); const p4 = stack.pop(); // put two more items on the stack stack.push(3); stack.push(4); await p3; // 3 await p4; // 4 } Classes AsyncStack An asynchronous Stack."
  },
  "api/async-stack/asyncstack.html": {
    "href": "api/async-stack/asyncstack.html",
    "title": "AsyncStack Class | @esfx API Reference",
    "keywords": "AsyncStack Class Package : @esfx/async-stack An asynchronous Stack. Declaration export declare class AsyncStack<T> Constructors constructor(iterable) Initializes a new instance of the AsyncStack class. Declaration constructor(iterable?: Iterable<T | PromiseLike<T>>); Parameters iterable Iterable <T | PromiseLike <T>> An optional iterable of values or promises. Properties done Gets a value indicating whether the stack has ended and there are no more items available. Declaration get done(): boolean; Property Value boolean readable Gets a value indicating whether items can be read from the stack. Declaration get readable(): boolean; Property Value boolean size Gets the number of entries in the stack. When positive, indicates the number of entries available to get. When negative, indicates the number of requests waiting to be fulfilled. Declaration get size(): number; Property Value number writable Gets a value indicating whether new items can be added to the stack. Declaration get writable(): boolean; Property Value boolean Methods doneReading() Blocks attempts to read from the stack until it is empty. Available items in the stack can still be read until the stack is empty. Declaration doneReading(): void; Returns void doneWriting() Blocks attempts to write to the stack. Pending requests in the stack can still be resolved until the stack is empty. Declaration doneWriting(): void; Returns void end() Blocks future attempts to read or write from the stack. Available items in the stack can still be read until the stack is empty. Pending reads from the stack are rejected with a CancelError <!-- --> . Declaration end(): void; Returns void pop(cancelable) Removes and returns a Promise for the top value of the stack. If the stack is empty, returns a Promise for the next value to be pushed on to the stack. Declaration pop(cancelable?: Cancelable): Promise<T>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise <T> push(this) Adds a value to the top of the stack. If the stack is empty but has a pending pop request, the value will be popped and the request fulfilled. Declaration push(this: AsyncStack<void>): void; Parameters this AsyncStack <void> Returns void push(value) Adds a value to the top of the stack. If the stack is empty but has a pending pop request, the value will be popped and the request fulfilled. Declaration push(value: T | PromiseLike<T>): void; Parameters value T | PromiseLike <T> A value or promise to add to the stack. Returns void"
  },
  "api/async-waitqueue.html": {
    "href": "api/async-waitqueue.html",
    "title": "@esfx/async-waitqueue Package | @esfx API Reference",
    "keywords": "@esfx/async-waitqueue Package The @esfx/async-waitqueue package provides the WaitQueue class, an async coordination primitive used to queue and resolve promises. Installation npm i @esfx/async-waitqueue Usage TypeScript JavaScript (CommonJS) import { WaitQueue } from \"@esfx/async-waitqueue\"; async function main() { const queue = new WaitQueue<number>(); // Create two pending \"waiters\" in the queue const p1 = queue.wait(); const p2 = queue.wait(); // Resolve the two pending \"waiters\" in the queue queue.resolveOne(1); queue.resolveOne(Promise.resolve(2)); await p1; // 1 await p2; // 2 } const { WaitQueue } = require(\"@esfx/async-waitqueue\"); async function main() { const queue = new WaitQueue(); // Create two pending \"waiters\" in the queue const p1 = queue.wait(); const p2 = queue.wait(); // Resolve the two pending \"waiters\" in the queue queue.resolveOne(1); queue.resolveOne(Promise.resolve(2)); await p1; // 1 await p2; // 2 } Classes WaitQueue An async coordination primitive that provides a queue of Promises."
  },
  "api/async-waitqueue/waitqueue.html": {
    "href": "api/async-waitqueue/waitqueue.html",
    "title": "WaitQueue Class | @esfx API Reference",
    "keywords": "WaitQueue Class Package : @esfx/async-waitqueue An async coordination primitive that provides a queue of Promises. Declaration export declare class WaitQueue<T> Properties size Gets the number of pending entries in the queue. Declaration get size(): number; Property Value number Methods cancelAll(reason) Rejects all pending wait() operations with a CancelError <!-- --> . Declaration cancelAll(reason?: CancelError): number; Parameters reason CancelError Returns number The number of pending wait() operations that were rejected. cancelOne(reason) Rejects the next pending wait() operation with a CancelError <!-- --> . Declaration cancelOne(reason?: CancelError): boolean; Parameters reason CancelError Returns boolean true if a pending wait() operation was rejected; otherwise, false <!-- --> . rejectAll(reason) Rejects all pending wait() operations with the provided reason. Declaration rejectAll(reason: unknown): number; Parameters reason unknown Returns number The number of pending wait() operations that were rejected. rejectOne(reason) Rejects the next pending wait() operation with the provided reason. Declaration rejectOne(reason: unknown): boolean; Parameters reason unknown Returns boolean true if a pending wait() operation was rejected; otherwise, false <!-- --> . resolveAll(this) Resolves all pending wait() operations with the provided value. Declaration resolveAll(this: WaitQueue<void>): number; Parameters this WaitQueue <void> Returns number The number of pending wait() operations that were resolved. resolveAll(value) Resolves all pending wait() operations with the provided value. Declaration resolveAll(value: T | PromiseLike<T>): number; Parameters value T | PromiseLike <T> Returns number The number of pending wait() operations that were resolved. resolveOne(this) Resolves a pending wait() operation with the provided value. Declaration resolveOne(this: WaitQueue<void>): boolean; Parameters this WaitQueue <void> Returns boolean true if a pending wait() operation was resolved; otherwise, false <!-- --> . resolveOne(value) Resolves a pending wait() operation with the provided value. Declaration resolveOne(value: T | PromiseLike<T>): boolean; Parameters value T | PromiseLike <T> Returns boolean true if a pending wait() operation was resolved; otherwise, false <!-- --> . wait(cancelable) Returns a Promise for the next value to be added to the queue. Declaration wait(cancelable?: Cancelable): Promise<T>; Parameters cancelable Cancelable A Cancelable used to cancel the request. Returns Promise <T>"
  },
  "api/cancelable.html": {
    "href": "api/cancelable.html",
    "title": "@esfx/cancelable Package | @esfx API Reference",
    "keywords": "@esfx/cancelable Package The @esfx/cancelable package provides a low-level Symbol-based API for defining a common cancellation protocol. Note This package does not contain an implementation of cancellation signals, but rather provides only a protocol for interoperable libraries that depend on cancellation. For an implementation of this protocol, please consider the following packages: @esfx/canceltoken @esfx/cancelable-dom @esfx/cancelable-dom-shim prex (version 0.4.6 or later) Installation npm i @esfx/cancelable Usage TypeScript JavaScript (CommonJS) import { Cancelable } from \"@esfx/cancelable\"; import { fork } from \"child_process\"; function doSomeWork(cancelable: Cancelable) { return new Promise<void>((resolve, reject) => { const cancelSignal = cancelable[Cancelable.cancelSignal](); if (cancelSignal.signaled) throw new Error(\"Operation canceled.\"); const worker = fork(\"worker.js\"); const subscription = cancelSignal.subscribe(() => { // cancellation requested, abort worker worker.kill(); reject(new Error(\"Operation canceled.\")); }); worker.on(\"exit\", () => { subscription.unsubscribe(); resolve(); }); }); } const { Cancelable } = require(\"@esfx/cancelable\"); const { fork } = require(\"child_process\"); function doSomeWork(cancelable) { return new Promise((resolve, reject) => { const cancelSignal = cancelable[Cancelable.cancelSignal](); if (cancelSignal.signaled) throw new Error(\"Operation canceled.\"); const worker = fork(\"worker.js\"); const subscription = cancelSignal.subscribe(() => { // cancellation requested, abort worker worker.kill(); reject(new Error(\"Operation canceled.\")); }); worker.on(\"exit\", () => { subscription.unsubscribe(); resolve(); }); }); } Classes CancelError Interfaces Cancelable An object that can be canceled from an external source. CancelableCancelSignal CancelableSource Represents an object that is a source for cancelation. CancelSignal An object that represents a cancellation signal. CancelSubscription An object used to unsubscribe from a cancellation signal Namespaces Cancelable CancelableSource CancelSubscription"
  },
  "api/cancelable/cancelablecancelsignal.html": {
    "href": "api/cancelable/cancelablecancelsignal.html",
    "title": "CancelableCancelSignal Interface | @esfx API Reference",
    "keywords": "CancelableCancelSignal Interface Package : @esfx/cancelable Declaration export interface CancelableCancelSignal extends CancelSignal Inheritance CancelSignal CancelableCancelSignal Inherited Members reason signaled subscribe(onSignaled) Methods [Cancelable.cancelSignal]() Declaration [Cancelable.cancelSignal](): CancelableCancelSignal; Returns CancelableCancelSignal"
  },
  "api/cancelable/cancelable-interface.html": {
    "href": "api/cancelable/cancelable-interface.html",
    "title": "Cancelable Interface | @esfx API Reference",
    "keywords": "Cancelable Interface Package : @esfx/cancelable An object that can be canceled from an external source. Declaration export interface Cancelable Methods [Cancelable.cancelSignal]() Gets the CancelSignal for this Cancelable. Declaration [Cancelable.cancelSignal](): CancelSignal; Returns CancelSignal"
  },
  "api/cancelable/cancelable-namespace.html": {
    "href": "api/cancelable/cancelable-namespace.html",
    "title": "Cancelable Namespace | @esfx API Reference",
    "keywords": "Cancelable Namespace Package : @esfx/cancelable Functions getReason(cancelable) Gets the reason for cancelation. Declaration function getReason(cancelable: Cancelable | null | undefined): unknown; Parameters cancelable Cancelable | null | undefined Returns unknown hasInstance(value) Determines whether a value is a Cancelable object. Declaration function hasInstance(value: unknown): value is Cancelable; Parameters value unknown Returns value is Cancelable isSignaled(cancelable) Determines whether cancelable is in the signaled state. Declaration function isSignaled(cancelable: Cancelable | null | undefined): boolean; Parameters cancelable Cancelable | null | undefined Returns boolean subscribe(cancelable, onSignaled) Subscribes to be notified when a cancelable becomes signaled. Declaration function subscribe(cancelable: Cancelable | null | undefined, onSignaled: () => void): CancelSubscription; Parameters cancelable Cancelable | null | undefined onSignaled () => void Returns CancelSubscription throwIfSignaled(cancelable) Throws a CancelError exception if the provided cancelable is in the signaled state. Declaration function throwIfSignaled(cancelable: Cancelable | null | undefined): void; Parameters cancelable Cancelable | null | undefined Returns void Variables canceled A Cancelable that is already signaled. Declaration canceled: CancelableCancelSignal cancelSignal A well-known symbol used to define a method to retrieve the CancelSignal for an object. Declaration cancelSignal: unique symbol name Declaration name = \"Cancelable\" none A Cancelable that can never be signaled. Declaration none: CancelableCancelSignal"
  },
  "api/cancelable/cancelablesource-interface.html": {
    "href": "api/cancelable/cancelablesource-interface.html",
    "title": "CancelableSource Interface | @esfx API Reference",
    "keywords": "CancelableSource Interface Package : @esfx/cancelable Represents an object that is a source for cancelation. Declaration export interface CancelableSource extends Cancelable Inheritance Cancelable CancelableSource Inherited Members [Cancelable.cancelSignal]() Methods [CancelableSource.cancel](reason) Cancels the source, notifying the associated CancelSignal. Declaration [CancelableSource.cancel](reason?: unknown): void; Parameters reason unknown Returns void"
  },
  "api/cancelable/cancelablesource-namespace.html": {
    "href": "api/cancelable/cancelablesource-namespace.html",
    "title": "CancelableSource Namespace | @esfx API Reference",
    "keywords": "CancelableSource Namespace Package : @esfx/cancelable Functions hasInstance(value) Determines whether a value is a CancelableSource object. Declaration function hasInstance(value: unknown): value is CancelableSource; Parameters value unknown Returns value is CancelableSource Variables cancel Declaration cancel: unique symbol name Declaration name = \"CancelableSource\""
  },
  "api/cancelable/cancelerror.html": {
    "href": "api/cancelable/cancelerror.html",
    "title": "CancelError Class | @esfx API Reference",
    "keywords": "CancelError Class Package : @esfx/cancelable Declaration export declare class CancelError extends Error Inheritance Error CancelError Constructors constructor(message, options) Constructs a new instance of the CancelError class Declaration constructor(message?: string, options?: ErrorOptions); Parameters message string options ErrorOptions"
  },
  "api/cancelable/cancelsignal.html": {
    "href": "api/cancelable/cancelsignal.html",
    "title": "CancelSignal Interface | @esfx API Reference",
    "keywords": "CancelSignal Interface Package : @esfx/cancelable An object that represents a cancellation signal. Declaration export interface CancelSignal Properties reason Gets the reason cancellation was signaled. Declaration readonly reason: unknown; Property Value unknown signaled Gets a value indicating whether cancellation was signaled. Declaration readonly signaled: boolean; Property Value boolean Methods subscribe(onSignaled) Subscribes to notifications for when the object becomes signaled. Declaration subscribe(onSignaled: () => void): CancelSubscription; Parameters onSignaled () => void Returns CancelSubscription"
  },
  "api/cancelable/cancelsubscription-interface.html": {
    "href": "api/cancelable/cancelsubscription-interface.html",
    "title": "CancelSubscription Interface | @esfx API Reference",
    "keywords": "CancelSubscription Interface Package : @esfx/cancelable An object used to unsubscribe from a cancellation signal Declaration export interface CancelSubscription extends Disposable Inheritance Disposable CancelSubscription Inherited Members constructor(dispose) Methods unsubscribe() Unsubscribes from a cancellation signal. Declaration unsubscribe(): void; Returns void"
  },
  "api/cancelable/cancelsubscription-namespace.html": {
    "href": "api/cancelable/cancelsubscription-namespace.html",
    "title": "CancelSubscription Namespace | @esfx API Reference",
    "keywords": "CancelSubscription Namespace Package : @esfx/cancelable Functions create(unsubscribe) Creates a CancelSubscription object for an unsubscribe callback. Declaration function create(unsubscribe: () => void): CancelSubscription; Parameters unsubscribe () => void The callback to execute when the unsubscribe() method is called. Returns CancelSubscription"
  },
  "api/cancelable-dom.html": {
    "href": "api/cancelable-dom.html",
    "title": "@esfx/cancelable-dom Package | @esfx API Reference",
    "keywords": "@esfx/cancelable-dom Package The @esfx/cancelable-dom package provides a DOM interop library for @esfx/cancelable . Installation npm i @esfx/cancelable-dom Usage TypeScript JavaScript (CommonJS) import type { Cancelable } from \"@esfx/cancelable\"; import { toAbortSignal } from \"@esfx/cancelable-dom\"; async function doSomeWork(cancelable: Cancelable) { await fetch(\"some/uri\", { signal: toAbortSignal(cancelable) }); } const { toAbortSignal } = require(\"@esfx/cancelable-dom\"); async function doSomeWork(cancelable) { await fetch(\"some/uri\", { signal: toAbortSignal(cancelable) }); } Functions toAbortSignal(cancelable) Declaration export declare function toAbortSignal(cancelable: Cancelable): AbortSignal; Parameters cancelable Cancelable Returns AbortSignal wrapAbortSignal(signal) Declaration export declare function wrapAbortSignal(signal: AbortController | AbortSignal): Cancelable; Parameters signal AbortController | AbortSignal Returns Cancelable"
  },
  "api/cancelable-dom-shim.html": {
    "href": "api/cancelable-dom-shim.html",
    "title": "@esfx/cancelable-dom-shim Package | @esfx API Reference",
    "keywords": "@esfx/cancelable-dom-shim Package The @esfx/cancelable-dom-shim package provides a global shim to make the DOM @\"!AbortController\" and @\"!AbortSignal\" classes compatible with @esfx/cancelable . Installation npm i @esfx/cancelable-dom-shim Usage TypeScript JavaScript (CommonJS) import \"@esfx/cancelable-dom-shim\"; // triggers global-scope side effects import { Cancelable } from \"@esfx/cancelable\"; const abortController = new AbortController(); const signal = abortController[Cancelable.cancelSignal](); require(\"@esfx/cancelable-dom-shim\"); // triggers global-scope side effects const { Cancelable } = require(\"@esfx/cancelable\"); const abortController = new AbortController(); const signal = abortController[Cancelable.cancelSignal](); Remarks This shim adds a default implementation of the Cancelable interface to the following global DOM objects: @\"!AbortController\" implements: CancelableSource Cancelable @\"!AbortSignal\" implements: Cancelable"
  },
  "api/canceltoken.html": {
    "href": "api/canceltoken.html",
    "title": "@esfx/canceltoken Package | @esfx API Reference",
    "keywords": "@esfx/canceltoken Package The @esfx/canceltoken package provides the CancelToken class, an implementation of @esfx/cancelable . Installation npm i @esfx/canceltoken Usage Basic Usage Linking Tokens Basic Usage TypeScript JavaScript (CommonJS) import { CancelToken, CancelError } from \"@esfx/canceltoken\"; // consume a cancel token async function doWork(token = CancelToken.none) { // do some work await doSomeOtherWork(token); // throw an error if cancellation has been signaled since awaiting. token.throwIfSignaled(); } function doSomeOtherWork(token = CancelToken.none) { return new Promise((resolve, reject) => { token.throwIfSignaled(); // throw if cancellation has already been signaled. // setup some external async operation... const worker = createWorker(); // listen for cancellation and abort the worker. const subscription = token.subscribe(() => { worker.abort(); reject(new CancelError()); }); // start working, resolve when done worker.start(resolve); }); } // call an async function that supports cancellation const source = CancelToken.source(); doWork(source.token).then( () => { // operation completed... source.close(); }, err => { if (err instanceof CancelError) { // operation was canceled. } }); // cancel operation after 10 seconds setTimeout(() => source.cancel(), 1000 * 10); const { CancelToken, CancelError } = require(\"@esfx/canceltoken\"); // consume a cancel token async function doWork(token = CancelToken.none) { // do some work await doSomeOtherWork(token); // throw an error if cancellation has been signaled since awaiting. token.throwIfSignaled(); } function doSomeOtherWork(token = CancelToken.none) { return new Promise((resolve, reject) => { token.throwIfSignaled(); // throw if cancellation has already been signaled. // setup some external async operation... const worker = createWorker(); // listen for cancellation and abort the worker. const subscription = token.subscribe(() => { worker.abort(); reject(new CancelError()); }); // start working, resolve when done worker.start(resolve); }); } // call an async function that supports cancellation const source = CancelToken.source(); doWork(source.token).then( () => { // operation completed... source.close(); }, err => { if (err instanceof CancelError) { // operation was canceled.. } }); // cancel operation after 10 seconds setTimeout(() => source.cancel(), 1000 * 10); Linking Tokens TypeScript JavaScript (CommonJS) import { CancelToken } from \"@esfx/canceltoken\"; // You can compose a cancellation graph with a root CancelToken, allowing you to cancel a large // number of asynchronous operations all at once let rootSource = CancelToken.source(); function cancelAllDownloads() { // explicitly cancel all downloads rootSource.cancel(); // reset the root source rootSource = CancelToken.source(); } async function downloadFile(url: string, path: string, token = CancelToken.none) { // Get a token that times out after 60 seconds const timeoutToken = CancelToken.timeout(60 * 1000); // download can be canceled by either 'rootSource', 'timeoutToken' or 'token': const linkedSource = CancelToken.source([rootSource.token, timeoutToken, token]); const linkedToken = linkedSource.token; // ... use linkedToken to observe cancellation. } const { CancelToken } = require(\"@esfx/canceltoken\"); // You can compose a cancellation graph with a root CancelToken, allowing you to cancel a large // number of asynchronous operations all at once let rootSource = CancelToken.source(); function cancelAllDownloads() { // explicitly cancel all downloads rootSource.cancel(); // reset the root source rootSource = CancelToken.source(); } async function downloadFile(url, path, token = CancelToken.none) { // Get a token that times out after 60 seconds const timeoutToken = CancelToken.timeout(60 * 1000); // download can be canceled by either 'rootSource', 'timeoutToken' or 'token': const linkedSource = CancelToken.source([rootSource.token, timeoutToken, token]); const linkedToken = linkedSource.token; // ... use linkedToken to observe cancellation. } Classes CancelToken Propagates notifications that operations should be canceled. Interfaces CancelSource Signals a CancelToken when cancellation has been requested."
  },
  "api/canceltoken/cancelsource.html": {
    "href": "api/canceltoken/cancelsource.html",
    "title": "CancelSource Interface | @esfx API Reference",
    "keywords": "CancelSource Interface Package : @esfx/canceltoken Signals a CancelToken when cancellation has been requested. Declaration export interface CancelSource extends CancelableSource, Disposable Inheritance Cancelable CancelableSource Disposable CancelSource Inherited Members [CancelableSource.cancel](reason) [Cancelable.cancelSignal]() constructor(dispose) Properties token Gets the CancelToken linked to this source. Declaration readonly token: CancelToken; Property Value CancelToken Methods cancel(reason) Cancels the source, evaluating any subscribed callbacks. If any callback raises an exception, the exception is propagated to a host specific unhandled exception mechanism. Declaration cancel(reason?: unknown): void; Parameters reason unknown Returns void close() Closes the source, preventing the possibility of future cancellation. Declaration close(): void; Returns void"
  },
  "api/canceltoken/canceltoken.html": {
    "href": "api/canceltoken/canceltoken.html",
    "title": "CancelToken Class | @esfx API Reference",
    "keywords": "CancelToken Class Package : @esfx/canceltoken Propagates notifications that operations should be canceled. Declaration export declare class CancelToken implements Cancelable, CancelSignal Properties [kEventTarget] Declaration static [kEventTarget]: boolean; Property Value boolean canBeSignaled Gets a value indicating whether the token can be signaled. Declaration get canBeSignaled(): boolean; Property Value boolean canceled Declaration static readonly canceled: CancelToken; Property Value CancelToken none Declaration static readonly none: CancelToken; Property Value CancelToken reason Gets the reason for cancellation. Declaration get reason(): unknown; Property Value unknown signaled Gets a value indicating whether the token is signaled. Declaration get signaled(): boolean; Property Value boolean Methods [Cancelable.cancelSignal]() Gets the CancelSignal for this Cancelable. Declaration [Cancelable.cancelSignal](): CancelToken; Returns CancelToken all(cancelables) Returns a CancelToken that becomes signaled when all of the provided cancelables are signaled. Declaration static all(cancelables: Iterable<Cancelable | DOMAbortSignal | null | undefined>): CancelToken; Parameters cancelables Iterable < Cancelable | DOMAbortSignal | null | undefined> An iterable of Cancelable objects. Returns CancelToken canceledWith(reason) Gets a CancelToken that is already canceled with the provided reason. Declaration static canceledWith(reason: unknown): CancelToken; Parameters reason unknown Returns CancelToken from(cancelable) Adapts a CancelToken from a cancelable. Declaration static from(cancelable: Cancelable | DOMAbortSignal | null | undefined): CancelToken; Parameters cancelable Cancelable | DOMAbortSignal | null | undefined Returns CancelToken race(cancelables) Returns a CancelToken that becomes signaled when any of the provided cancelables are signaled. Declaration static race(cancelables: Iterable<Cancelable | DOMAbortSignal | null | undefined>): CancelToken; Parameters cancelables Iterable < Cancelable | DOMAbortSignal | null | undefined> An iterable of Cancelable objects. Returns CancelToken Remarks This is similar to calling source(cancelables) with the provided cancelables <!-- --> . In general, calling source(cancelables) is preferred as it provides better resource management. source(cancelables) Creates a new CancelSource . Declaration static source(cancelables?: Iterable<Cancelable | DOMAbortSignal | null | undefined>): CancelSource; Parameters cancelables Iterable < Cancelable | DOMAbortSignal | null | undefined> An optional iterable of Cancelable objects. If present, the source becomes linked to the provided cancelables and will be canceled when a linked cancelable is canceled. Returns CancelSource Remarks Calling source(cancelables) with cancelables is similar to race(cancelables) , except you can individually cancel or close the resulting source. This can be better for memory or GC purposes, since when the resulting source is canceled or closed it can be unlinked from the cancelables, removing references from each cancelable to the resulting source which could otherwise prevent garbage collection. subscribe(onSignaled) Subscribes to notifications for when the object becomes signaled. Declaration subscribe(onSignaled: () => void): CancelSubscription; Parameters onSignaled () => void Returns CancelSubscription throwIfSignaled() Throws a CancelError if the token was signaled. Declaration throwIfSignaled(): void; Returns void timeout(ms, reason) Gets a CancelToken that will be canceled with the provided reason after a timeout has elapsed. Declaration static timeout(ms: number, reason?: unknown): CancelToken; Parameters ms number reason unknown Returns CancelToken"
  },
  "api/collection-core.html": {
    "href": "api/collection-core.html",
    "title": "@esfx/collection-core Package | @esfx API Reference",
    "keywords": "@esfx/collection-core Package Provides a low-level Symbol-based API for defining common collection behaviors. Installation npm i @esfx/collection-core Usage TypeScript JavaScript (CommonJS) import { Collection } from \"@esfx/collection-core\"; class MyCollection<T> { private _items = new Set<T>(); // Your implementation get count() { return this._items.size; } contains(value: T) { return this._items.has(value); } add(value: T) { this._items.add(value); } remove(value: T) { return this._items.delete(value); } clear() { this._items.clear(); } // Implement the `Collection` interface for cross-library consistency get [Collection.size]() { return this.count; } [Collection.has](value: T) { return this.contains(value); } [Collection.add](value: T) { this.add(value); } [Collection.delete](value: T) { return this.remove(value); } [Collection.clear]() { this.clear(); } [Symbol.iterator]() { return this._items.values(); } } const { Collection } = require(\"@esfx/collection-core\"); class MyCollection { constructor() { this._items = new Set(); } // Your implementation get count() { return this._items.size; } contains(value) { return this._items.has(value); } add(value) { this._items.add(value); } remove(value) { return this._items.delete(value); } clear() { this._items.clear(); } // Implement the `Collection` interface for cross-library consistency get [Collection.size]() { return this.count; } [Collection.has](value) { return this.contains(value); } [Collection.add](value) { this.add(value); } [Collection.delete](value) { return this.remove(value); } [Collection.clear]() { this.clear(); } [Symbol.iterator]() { return this._items.values(); } } Interfaces Collection<T> A Collection<T> describes a collection object, such as an Array or Set , that can contain other values, has a known size, and may have its contents modified. Container<T> A Container<T> describes a container object that can contain other values and may have its contents modified. FixedSizeIndexedCollection<T> IndexedCollection<T> KeyedCollection<K, V> KeyedContainer<K, V> KeyedMultiCollection<K, V> ReadonlyCollection<T> A ReadonlyCollection<T> describes a collection object, such as an Array or Set , that can contain other values and has a known size. ReadonlyContainer<T> A ReadonlyContainer<T> describes a container object, such as an Array , Set , or WeakSet , that can contain other values. ReadonlyIndexedCollection<T> A ReadonlyIndexedCollection<T> describes an indexed collection object, such as an Array , that can contain other values, has a known size, and whose elements can be accessed by ordinal index. ReadonlyKeyedCollection<K, V> A ReadonlyKeyedCollection<K, V> describes a keyed collection object, such as a Map , that can contain other values, has a known size, and whose elements can be accessed by key. ReadonlyKeyedContainer<K, V> A ReadonlyKeyedContainer<K, V> describes a keyed container object, such as a Map or WeakMap , that can contain other values and whose elements can be accessed by key. ReadonlyKeyedMultiCollection<K, V> A ReadonlyKeyedMultiCollection<K, V> describes a keyed collection object that can contain other values, has a known size, and whose elements can be accessed by key, where each key can represent one or more elements. Namespaces Collection Container FixedSizeIndexedCollection IndexedCollection KeyedCollection KeyedContainer KeyedMultiCollection ReadonlyCollection ReadonlyContainer ReadonlyIndexedCollection ReadonlyKeyedCollection ReadonlyKeyedContainer ReadonlyKeyedMultiCollection"
  },
  "api/collection-core/collection-interface.html": {
    "href": "api/collection-core/collection-interface.html",
    "title": "Collection<T> Interface | @esfx API Reference",
    "keywords": "Collection<T> Interface Package : @esfx/collection-core A Collection<T> describes a collection object, such as an Array or Set , that can contain other values, has a known size, and may have its contents modified. Declaration export interface Collection<T> extends ReadonlyCollection<T>, Container<T> Inheritance ReadonlyCollection <T> Container <T> Collection<T> Inherited Members [ReadonlyCollection.size] [Container.add](value) [Container.delete](value) Methods [Collection.add](value) Adds an element to the collection. Declaration [Collection.add](value: T): void; Parameters value T Returns void [Collection.clear]() Clears the collection. Declaration [Collection.clear](): void; Returns void [Collection.delete](value) Deletes an element from the collection. Declaration [Collection.delete](value: T): boolean; Parameters value T Returns boolean"
  },
  "api/collection-core/collection-namespace.html": {
    "href": "api/collection-core/collection-namespace.html",
    "title": "Collection Namespace | @esfx API Reference",
    "keywords": "Collection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a Collection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is Collection<T>; Type Parameters T Parameters value Iterable <T> Returns value is Collection <T> hasInstance(value) Tests whether a value supports the minimal representation of a Collection <!-- --> . Declaration function hasInstance(value: any): value is Collection<unknown>; Parameters value any Returns value is Collection <unknown> Variables | Improve this Doc delete A well-known symbol used to define the Collection#[Collection.delete] method. Declaration delete: unique symbol clear A well-known symbol used to define the Collection#[Collection.clear] method. Declaration clear: unique symbol name Declaration name = \"Collection\""
  },
  "api/collection-core/container-interface.html": {
    "href": "api/collection-core/container-interface.html",
    "title": "Container<T> Interface | @esfx API Reference",
    "keywords": "Container<T> Interface Package : @esfx/collection-core A Container<T> describes a container object that can contain other values and may have its contents modified. Declaration export interface Container<T> extends ReadonlyContainer<T> Inheritance ReadonlyContainer <T> Container<T> Inherited Members [ReadonlyContainer.has](value) Methods [Container.add](value) Adds an element to the container. Declaration [Container.add](value: T): void; Parameters value T Returns void [Container.delete](value) Deletes an element from the container. Declaration [Container.delete](value: T): boolean; Parameters value T Returns boolean"
  },
  "api/collection-core/container-namespace.html": {
    "href": "api/collection-core/container-namespace.html",
    "title": "Container Namespace | @esfx API Reference",
    "keywords": "Container Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a Container<T> . Declaration function hasInstance(value: any): value is Container<unknown>; Parameters value any Returns value is Container <unknown> Variables | Improve this Doc delete A well-known symbol used to define the Container#[Container.delete] method. Declaration delete: unique symbol add A well-known symbol used to define the Container#[Container.add] method. Declaration add: unique symbol name Declaration name = \"Container\""
  },
  "api/collection-core/fixedsizeindexedcollection-interface.html": {
    "href": "api/collection-core/fixedsizeindexedcollection-interface.html",
    "title": "FixedSizeIndexedCollection<T> Interface | @esfx API Reference",
    "keywords": "FixedSizeIndexedCollection<T> Interface Package : @esfx/collection-core Declaration export interface FixedSizeIndexedCollection<T> extends ReadonlyIndexedCollection<T> Inheritance ReadonlyIndexedCollection <T> FixedSizeIndexedCollection<T> Inherited Members [ReadonlyIndexedCollection.getAt](index) [ReadonlyIndexedCollection.indexOf](value, fromIndex) Methods [FixedSizeIndexedCollection.setAt](index, value) Sets a value at the specified index in the collection. Declaration [FixedSizeIndexedCollection.setAt](index: number, value: T): boolean; Parameters index number value T Returns boolean true if the value was set at the provided index, otherwise false <!-- --> ."
  },
  "api/collection-core/fixedsizeindexedcollection-namespace.html": {
    "href": "api/collection-core/fixedsizeindexedcollection-namespace.html",
    "title": "FixedSizeIndexedCollection Namespace | @esfx API Reference",
    "keywords": "FixedSizeIndexedCollection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a FixedSizeIndexedCollection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is FixedSizeIndexedCollection<T>; Type Parameters T Parameters value Iterable <T> Returns value is FixedSizeIndexedCollection <T> hasInstance(value) Tests whether a value supports the minimal representation of a FixedSizeIndexedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is FixedSizeIndexedCollection<unknown>; Parameters value unknown Returns value is FixedSizeIndexedCollection <unknown> Variables name Declaration name = \"FixedSizeIndexedCollection\" setAt A well-known symbol used to define the FixedSizeIndexedCollection#[FixedSizeIndexedCollection.setAt] method. Declaration setAt: unique symbol"
  },
  "api/collection-core/indexedcollection-interface.html": {
    "href": "api/collection-core/indexedcollection-interface.html",
    "title": "IndexedCollection<T> Interface | @esfx API Reference",
    "keywords": "IndexedCollection<T> Interface Package : @esfx/collection-core Declaration export interface IndexedCollection<T> extends FixedSizeIndexedCollection<T>, Collection<T> Inheritance FixedSizeIndexedCollection <T> Collection <T> IndexedCollection<T> Inherited Members [FixedSizeIndexedCollection.setAt](index, value) [Collection.add](value) [Collection.clear]() [Collection.delete](value) Methods [IndexedCollection.insertAt](index, value) Inserts a value at the specified index in the collection, shifting any following elements to the right one position. Declaration [IndexedCollection.insertAt](index: number, value: T): void; Parameters index number value T Returns void [IndexedCollection.removeAt](index) Removes the value at the specified index in the collection, shifting any following elements to the left one position. Declaration [IndexedCollection.removeAt](index: number): void; Parameters index number Returns void"
  },
  "api/collection-core/indexedcollection-namespace.html": {
    "href": "api/collection-core/indexedcollection-namespace.html",
    "title": "IndexedCollection Namespace | @esfx API Reference",
    "keywords": "IndexedCollection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of an IndexedCollection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is IndexedCollection<T>; Type Parameters T Parameters value Iterable <T> Returns value is IndexedCollection <T> hasInstance(value) Tests whether a value supports the minimal representation of an IndexedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is IndexedCollection<unknown>; Parameters value unknown Returns value is IndexedCollection <unknown> Variables | Improve this Doc delete Declaration delete: unique symbol insertAt A well-known symbol used to define the IndexedCollection#[IndexedCollection.insertAt] method. Declaration insertAt: unique symbol name Declaration name = \"IndexedCollection\" removeAt A well-known symbol used to define the IndexedCollection#[IndexedCollection.removeAt] method. Declaration removeAt: unique symbol"
  },
  "api/collection-core/keyedcollection-interface.html": {
    "href": "api/collection-core/keyedcollection-interface.html",
    "title": "KeyedCollection<K, V> Interface | @esfx API Reference",
    "keywords": "KeyedCollection<K, V> Interface Package : @esfx/collection-core Declaration export interface KeyedCollection<K, V> extends ReadonlyKeyedCollection<K, V>, KeyedContainer<K, V> Inheritance ReadonlyKeyedCollection <K, V> KeyedContainer <K, V> KeyedCollection<K, V> Inherited Members [ReadonlyKeyedCollection.keys]() [ReadonlyKeyedCollection.size] [ReadonlyKeyedCollection.values]() [KeyedContainer.delete](key) [KeyedContainer.set](key, value) Methods [KeyedCollection.clear]() Clears the collection. Declaration [KeyedCollection.clear](): void; Returns void"
  },
  "api/collection-core/keyedcollection-namespace.html": {
    "href": "api/collection-core/keyedcollection-namespace.html",
    "title": "KeyedCollection Namespace | @esfx API Reference",
    "keywords": "KeyedCollection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a KeyedCollection <!-- --> . Declaration function hasInstance<K, V>(value: Iterable<[K, V]>): value is KeyedCollection<K, V>; Type Parameters K V Parameters value Iterable <[K, V]> Returns value is KeyedCollection <K, V> hasInstance(value) Tests whether a value supports the minimal representation of a KeyedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is KeyedCollection<unknown, unknown>; Parameters value unknown Returns value is KeyedCollection <unknown, unknown> Variables | Improve this Doc delete A well-known symbol used to define the KeyedCollection#[KeyedCollection.delete] method. Declaration delete: unique symbol clear A well-known symbol used to define the KeyedCollection#[KeyedCollection.clear] method. Declaration clear: unique symbol name Declaration name = \"KeyedCollection\""
  },
  "api/collection-core/keyedcontainer-interface.html": {
    "href": "api/collection-core/keyedcontainer-interface.html",
    "title": "KeyedContainer<K, V> Interface | @esfx API Reference",
    "keywords": "KeyedContainer<K, V> Interface Package : @esfx/collection-core Declaration export interface KeyedContainer<K, V> extends ReadonlyKeyedContainer<K, V> Inheritance ReadonlyKeyedContainer <K, V> KeyedContainer<K, V> Inherited Members [ReadonlyKeyedContainer.get](key) [ReadonlyKeyedContainer.has](key) Methods [KeyedContainer.delete](key) Deletes a key and its associated value from the container. Declaration [KeyedContainer.delete](key: K): boolean; Parameters key K Returns boolean true if the key was found and removed; otherwise, false <!-- --> . [KeyedContainer.set](key, value) Sets a value in the container for the provided key. Declaration [KeyedContainer.set](key: K, value: V): void; Parameters key K value V Returns void"
  },
  "api/collection-core/keyedcontainer-namespace.html": {
    "href": "api/collection-core/keyedcontainer-namespace.html",
    "title": "KeyedContainer Namespace | @esfx API Reference",
    "keywords": "KeyedContainer Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a KeyedContainer <!-- --> . Declaration function hasInstance(value: unknown): value is KeyedContainer<unknown, unknown>; Parameters value unknown Returns value is KeyedContainer <unknown, unknown> Variables _delete A well-known symbol used to define the KeyedContainer#[KeyedContainer.delete] method. Declaration _delete: unique symbol name Declaration name = \"KeyedContainer\" set A well-known symbol used to define the KeyedContainer#[KeyedContainer.set] method. Declaration set: unique symbol"
  },
  "api/collection-core/keyedmulticollection-interface.html": {
    "href": "api/collection-core/keyedmulticollection-interface.html",
    "title": "KeyedMultiCollection<K, V> Interface | @esfx API Reference",
    "keywords": "KeyedMultiCollection<K, V> Interface Package : @esfx/collection-core Declaration export interface KeyedMultiCollection<K, V> extends ReadonlyKeyedMultiCollection<K, V> Inheritance ReadonlyKeyedMultiCollection <K, V> KeyedMultiCollection<K, V> Inherited Members [ReadonlyKeyedMultiCollection.get](key) [ReadonlyKeyedMultiCollection.has](key) [ReadonlyKeyedMultiCollection.hasValue](key, value) [ReadonlyKeyedMultiCollection.keys]() [ReadonlyKeyedMultiCollection.size] [ReadonlyKeyedMultiCollection.values]() Methods [KeyedMultiCollection.add](key, value) Adds a value to the collection for the provided key. Declaration [KeyedMultiCollection.add](key: K, value: V): void; Parameters key K value V Returns void [KeyedMultiCollection.clear]() Clears the collection. Declaration [KeyedMultiCollection.clear](): void; Returns void [KeyedMultiCollection.delete](key) Deletes a key and its associated values from the collection. Declaration [KeyedMultiCollection.delete](key: K): number; Parameters key K Returns number The number of values removed when the key was deleted. [KeyedMultiCollection.deleteValue](key, value) Deletes a key and its associated value from the collection. Declaration [KeyedMultiCollection.deleteValue](key: K, value: V): boolean; Parameters key K value V Returns boolean true if the key and value were found and removed; otherwise, false <!-- --> ."
  },
  "api/collection-core/keyedmulticollection-namespace.html": {
    "href": "api/collection-core/keyedmulticollection-namespace.html",
    "title": "KeyedMultiCollection Namespace | @esfx API Reference",
    "keywords": "KeyedMultiCollection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a KeyedMultiCollection <!-- --> . Declaration function hasInstance<K, V>(value: Iterable<[K, V]>): value is KeyedMultiCollection<K, V>; Type Parameters K V Parameters value Iterable <[K, V]> Returns value is KeyedMultiCollection <K, V> hasInstance(value) Tests whether a value supports the minimal representation of a KeyedMultiCollection <!-- --> . Declaration function hasInstance(value: unknown): value is KeyedMultiCollection<unknown, unknown>; Parameters value unknown Returns value is KeyedMultiCollection <unknown, unknown> Variables _delete A well-known symbol used to define the KeyedMultiCollection#[KeyedMultiCollection.delete] method. Declaration _delete: unique symbol add A well-known symbol used to define the KeyedMultiCollection#[KeyedMultiCollection.add] method. Declaration add: unique symbol clear A well-known symbol used to define the KeyedMultiCollection#[KeyedMultiCollection.clear] method. Declaration clear: unique symbol deleteValue A well-known symbol used to define the KeyedMultiCollection#[KeyedMultiCollection.deleteValue] method. Declaration deleteValue: unique symbol name Declaration name = \"KeyedMultiCollection\""
  },
  "api/collection-core/readonlycollection-interface.html": {
    "href": "api/collection-core/readonlycollection-interface.html",
    "title": "ReadonlyCollection<T> Interface | @esfx API Reference",
    "keywords": "ReadonlyCollection<T> Interface Package : @esfx/collection-core A ReadonlyCollection<T> describes a collection object, such as an Array or Set , that can contain other values and has a known size. Declaration export interface ReadonlyCollection<T> extends Iterable<T>, ReadonlyContainer<T> Inheritance Iterable <T> ReadonlyContainer <T> ReadonlyCollection<T> Inherited Members [ReadonlyContainer.has](value) Properties [ReadonlyCollection.size] Gets the number of elements in the collection. Declaration readonly [ReadonlyCollection.size]: number; Property Value number"
  },
  "api/collection-core/readonlycollection-namespace.html": {
    "href": "api/collection-core/readonlycollection-namespace.html",
    "title": "ReadonlyCollection Namespace | @esfx API Reference",
    "keywords": "ReadonlyCollection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyCollection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is ReadonlyCollection<T>; Type Parameters T Parameters value Iterable <T> Returns value is ReadonlyCollection <T> hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyCollection <!-- --> . Declaration function hasInstance(value: any): value is ReadonlyCollection<unknown>; Parameters value any Returns value is ReadonlyCollection <unknown> Variables name Declaration name = \"ReadonlyCollection\" size A well-known symbol used to define the ReadonlyCollection#[ReadonlyCollection.size] property. Declaration size: unique symbol"
  },
  "api/collection-core/readonlycontainer-interface.html": {
    "href": "api/collection-core/readonlycontainer-interface.html",
    "title": "ReadonlyContainer<T> Interface | @esfx API Reference",
    "keywords": "ReadonlyContainer<T> Interface Package : @esfx/collection-core A ReadonlyContainer<T> describes a container object, such as an Array , Set , or WeakSet , that can contain other values. Declaration export interface ReadonlyContainer<T> Methods [ReadonlyContainer.has](value) Tests whether an element is present in the container. Declaration [ReadonlyContainer.has](value: T): boolean; Parameters value T Returns boolean"
  },
  "api/collection-core/readonlycontainer-namespace.html": {
    "href": "api/collection-core/readonlycontainer-namespace.html",
    "title": "ReadonlyContainer Namespace | @esfx API Reference",
    "keywords": "ReadonlyContainer Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyContainer<T> . Declaration function hasInstance(value: any): value is ReadonlyContainer<unknown>; Parameters value any Returns value is ReadonlyContainer <unknown> Variables has A well-known symbol used to define the ReadonlyContainer#[ReadonlyContainer.has] method. Declaration has: unique symbol name Declaration name = \"ReadonlyContainer\""
  },
  "api/collection-core/readonlyindexedcollection-interface.html": {
    "href": "api/collection-core/readonlyindexedcollection-interface.html",
    "title": "ReadonlyIndexedCollection<T> Interface | @esfx API Reference",
    "keywords": "ReadonlyIndexedCollection<T> Interface Package : @esfx/collection-core A ReadonlyIndexedCollection<T> describes an indexed collection object, such as an Array , that can contain other values, has a known size, and whose elements can be accessed by ordinal index. Declaration export interface ReadonlyIndexedCollection<T> extends ReadonlyCollection<T> Inheritance ReadonlyCollection <T> ReadonlyIndexedCollection<T> Inherited Members [ReadonlyCollection.size] Methods [ReadonlyIndexedCollection.getAt](index) Gets the value at the specified index in the collection, or undefined if the index was outside of the bounds of the collection. Declaration [ReadonlyIndexedCollection.getAt](index: number): T | undefined; Parameters index number Returns T | undefined [ReadonlyIndexedCollection.indexOf](value, fromIndex) Gets the index for a value in the collection, or -1 if the value was not found. Declaration [ReadonlyIndexedCollection.indexOf](value: T, fromIndex?: number): number; Parameters value T fromIndex number Returns number"
  },
  "api/collection-core/readonlyindexedcollection-namespace.html": {
    "href": "api/collection-core/readonlyindexedcollection-namespace.html",
    "title": "ReadonlyIndexedCollection Namespace | @esfx API Reference",
    "keywords": "ReadonlyIndexedCollection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyIndexedCollection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is ReadonlyIndexedCollection<T>; Type Parameters T Parameters value Iterable <T> Returns value is ReadonlyIndexedCollection <T> hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyIndexedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is ReadonlyIndexedCollection<unknown>; Parameters value unknown Returns value is ReadonlyIndexedCollection <unknown> Variables getAt A well-known symbol used to define the ReadonlyIndexedCollection#[ReadonlyIndexedCollection.getAt] method. Declaration getAt: unique symbol indexOf A well-known symbol used to define the ReadonlyIndexedCollection#[ReadonlyIndexedCollection.indexOf] method. Declaration indexOf: unique symbol name Declaration name = \"ReadonlyIndexedCollection\""
  },
  "api/collection-core/readonlykeyedcollection-interface.html": {
    "href": "api/collection-core/readonlykeyedcollection-interface.html",
    "title": "ReadonlyKeyedCollection<K, V> Interface | @esfx API Reference",
    "keywords": "ReadonlyKeyedCollection<K, V> Interface Package : @esfx/collection-core A ReadonlyKeyedCollection<K, V> describes a keyed collection object, such as a Map , that can contain other values, has a known size, and whose elements can be accessed by key. Declaration export interface ReadonlyKeyedCollection<K, V> extends ReadonlyKeyedContainer<K, V>, Iterable<[K, V]> Inheritance ReadonlyKeyedContainer <K, V> Iterable <[K, V]> ReadonlyKeyedCollection<K, V> Inherited Members [ReadonlyKeyedContainer.get](key) [ReadonlyKeyedContainer.has](key) Properties [ReadonlyKeyedCollection.size] Gets the number of elements in the collection. Declaration readonly [ReadonlyKeyedCollection.size]: number; Property Value number Methods [ReadonlyKeyedCollection.keys]() Gets an IterableIterator for the keys present in the collection. Declaration [ReadonlyKeyedCollection.keys](): IterableIterator<K>; Returns IterableIterator <K> [ReadonlyKeyedCollection.values]() Gets an IterableIterator for the values present in the collection. Declaration [ReadonlyKeyedCollection.values](): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collection-core/readonlykeyedcollection-namespace.html": {
    "href": "api/collection-core/readonlykeyedcollection-namespace.html",
    "title": "ReadonlyKeyedCollection Namespace | @esfx API Reference",
    "keywords": "ReadonlyKeyedCollection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedCollection <!-- --> . Declaration function hasInstance<K, V>(value: Iterable<[K, V]>): value is ReadonlyKeyedCollection<K, V>; Type Parameters K V Parameters value Iterable <[K, V]> Returns value is ReadonlyKeyedCollection <K, V> hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is ReadonlyKeyedCollection<unknown, unknown>; Parameters value unknown Returns value is ReadonlyKeyedCollection <unknown, unknown> Variables keys A well-known symbol used to define the ReadonlyKeyedCollection#[ReadonlyKeyedCollection.keys] method. Declaration keys: unique symbol name Declaration name = \"ReadonlyKeyedCollection\" size A well-known symbol used to define the ReadonlyKeyedCollection#[ReadonlyKeyedCollection.size] property. Declaration size: unique symbol values A well-known symbol used to define the ReadonlyKeyedCollection#[ReadonlyKeyedCollection.values] method. Declaration values: unique symbol"
  },
  "api/collection-core/readonlykeyedcontainer-interface.html": {
    "href": "api/collection-core/readonlykeyedcontainer-interface.html",
    "title": "ReadonlyKeyedContainer<K, V> Interface | @esfx API Reference",
    "keywords": "ReadonlyKeyedContainer<K, V> Interface Package : @esfx/collection-core A ReadonlyKeyedContainer<K, V> describes a keyed container object, such as a Map or WeakMap , that can contain other values and whose elements can be accessed by key. Declaration export interface ReadonlyKeyedContainer<K, V> Methods [ReadonlyKeyedContainer.get](key) Gets the value in the container associated with the provided key, if it exists. Declaration [ReadonlyKeyedContainer.get](key: K): V | undefined; Parameters key K Returns V | undefined [ReadonlyKeyedContainer.has](key) Tests whether a key is present in the container. Declaration [ReadonlyKeyedContainer.has](key: K): boolean; Parameters key K Returns boolean"
  },
  "api/collection-core/readonlykeyedcontainer-namespace.html": {
    "href": "api/collection-core/readonlykeyedcontainer-namespace.html",
    "title": "ReadonlyKeyedContainer Namespace | @esfx API Reference",
    "keywords": "ReadonlyKeyedContainer Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedContainer <!-- --> . Declaration function hasInstance(value: unknown): value is ReadonlyKeyedContainer<unknown, unknown>; Parameters value unknown Returns value is ReadonlyKeyedContainer <unknown, unknown> Variables get A well-known symbol used to define the ReadonlyKeyedContainer#[ReadonlyKeyedContainer.get] method. Declaration get: unique symbol has A well-known symbol used to define the ReadonlyKeyedContainer#[ReadonlyKeyedContainer.has] method. Declaration has: unique symbol name Declaration name = \"ReadonlyKeyedContainer\""
  },
  "api/collection-core/readonlykeyedmulticollection-interface.html": {
    "href": "api/collection-core/readonlykeyedmulticollection-interface.html",
    "title": "ReadonlyKeyedMultiCollection<K, V> Interface | @esfx API Reference",
    "keywords": "ReadonlyKeyedMultiCollection<K, V> Interface Package : @esfx/collection-core A ReadonlyKeyedMultiCollection<K, V> describes a keyed collection object that can contain other values, has a known size, and whose elements can be accessed by key, where each key can represent one or more elements. Declaration export interface ReadonlyKeyedMultiCollection<K, V> extends Iterable<[K, V]> Inheritance Iterable <[K, V]> ReadonlyKeyedMultiCollection<K, V> Properties [ReadonlyKeyedMultiCollection.size] Gets the number of elements in the collection. Declaration readonly [ReadonlyKeyedMultiCollection.size]: number; Property Value number Methods [ReadonlyKeyedMultiCollection.get](key) Gets the value in the collection associated with the provided key, if it exists. Declaration [ReadonlyKeyedMultiCollection.get](key: K): Iterable<V> | undefined; Parameters key K Returns Iterable <V> | undefined [ReadonlyKeyedMultiCollection.has](key) Tests whether a key is present in the collection. Declaration [ReadonlyKeyedMultiCollection.has](key: K): boolean; Parameters key K Returns boolean [ReadonlyKeyedMultiCollection.hasValue](key, value) Tests whether a key and value is present in the collection. Declaration [ReadonlyKeyedMultiCollection.hasValue](key: K, value: V): boolean; Parameters key K value V Returns boolean [ReadonlyKeyedMultiCollection.keys]() Gets an IterableIterator for the keys present in the collection. Declaration [ReadonlyKeyedMultiCollection.keys](): IterableIterator<K>; Returns IterableIterator <K> [ReadonlyKeyedMultiCollection.values]() Gets an IterableIterator for the values present in the collection. Declaration [ReadonlyKeyedMultiCollection.values](): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collection-core/readonlykeyedmulticollection-namespace.html": {
    "href": "api/collection-core/readonlykeyedmulticollection-namespace.html",
    "title": "ReadonlyKeyedMultiCollection Namespace | @esfx API Reference",
    "keywords": "ReadonlyKeyedMultiCollection Namespace Package : @esfx/collection-core Functions hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedMultiCollection <!-- --> . Declaration function hasInstance<K, V>(value: Iterable<[K, V]>): value is ReadonlyKeyedMultiCollection<K, V>; Type Parameters K V Parameters value Iterable <[K, V]> Returns value is ReadonlyKeyedMultiCollection <K, V> hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedMultiCollection <!-- --> . Declaration function hasInstance(value: unknown): value is ReadonlyKeyedMultiCollection<unknown, unknown>; Parameters value unknown Returns value is ReadonlyKeyedMultiCollection <unknown, unknown> Variables get A well-known symbol used to define the ReadonlyKeyedMultiCollection#[ReadonlyKeyedMultiCollection.get] method. Declaration get: unique symbol has A well-known symbol used to define the ReadonlyKeyedMultiCollection#[ReadonlyKeyedMultiCollection.has] method. Declaration has: unique symbol hasValue A well-known symbol used to define the ReadonlyKeyedMultiCollection#[ReadonlyKeyedMultiCollection.hasValue] method. Declaration hasValue: unique symbol keys A well-known symbol used to define the ReadonlyKeyedMultiCollection#[ReadonlyKeyedMultiCollection.keys] method. Declaration keys: unique symbol name Declaration name = \"ReadonlyKeyedMultiCollection\" size A well-known symbol used to define the ReadonlyKeyedMultiCollection#[ReadonlyKeyedMultiCollection.size] property. Declaration size: unique symbol values A well-known symbol used to define the ReadonlyKeyedMultiCollection#[ReadonlyKeyedMultiCollection.values] method. Declaration values: unique symbol"
  },
  "api/collection-core-dom-shim.html": {
    "href": "api/collection-core-dom-shim.html",
    "title": "@esfx/collection-core-dom-shim Package | @esfx API Reference",
    "keywords": "@esfx/collection-core-dom-shim Package Provides a global shim to add default @esfx/collection-core behaviors to global DOM objects. Installation npm i @esfx/collection-core-dom-shim Usage TypeScript JavaScript (CommonJS) import \"@esfx/collection-core-dom-shim\"; // triggers global-scope side effects import { ReadonlyIndexedCollection } from \"@esfx/collection-core\"; document.forms[ReadonlyIndexedCollection.size]; // gets the number of forms in the document require(\"@esfx/collection-core-dom-shim\"); // triggers global-scope side effects const { ReadonlyIndexedCollection } = require(\"@esfx/collection-core\"); document.forms[ReadonlyIndexedCollection.size]; // gets the number of forms in the document Remarks This shim adds a default implementation of the collection interfaces to the following global DOM objects: AudioParamMap implements: ReadonlyKeyedCollection<K, V> AudioTrackList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> CSSRuleList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> CSSStyleDeclaration implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> DOMRectList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> DOMStringList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> DOMTokenList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> DataTransferItemList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> FileList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> FormData implements: KeyedCollection<K, V> ReadonlyKeyedCollection<K, V> HTMLAllCollection implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> HTMLCollectionBase implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> HTMLCollectionOf implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> HTMLFormElement implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> HTMLSelectElement implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> Headers implements: KeyedCollection<K, V> ReadonlyKeyedCollection<K, V> MediaKeyStatusMap implements: ReadonlyKeyedCollection<K, V> MediaList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> MimeTypeArray implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> NamedNodeMap implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> NodeList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> Plugin implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> PluginArray implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> RTCStatsReport implements: ReadonlyKeyedCollection<K, V> SVGLengthList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> SVGNumberList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> SVGStringList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> SourceBufferList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> SpeechGrammarList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> SpeechRecognitionResult implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> SpeechRecognitionResultList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> StyleSheetList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> TextTrackCueList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> TextTrackList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> TouchList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T> URLSearchParams implements: KeyedCollection<K, V> ReadonlyKeyedCollection<K, V> ReadonlyKeyedCollection<K, V> VideoTrackList implements: ReadonlyIndexedCollection<T> ReadonlyCollection<T>"
  },
  "api/collection-core-shim.html": {
    "href": "api/collection-core-shim.html",
    "title": "@esfx/collection-core-shim Package | @esfx API Reference",
    "keywords": "@esfx/collection-core-shim Package Provides a global shim to add default @esfx/collection-core behaviors to global objects. Installation npm i @esfx/collection-core-shim Usage TypeScript JavaScript (CommonJS) import \"@esfx/collection-core-shim\"; // triggers global-scope side effects import { Collection } from \"@esfx/collection-core\"; [1, 2, 3][Collection.size]; // 3 require(\"@esfx/collection-core-shim\"); // triggers global-scope side effects const { Collection } = require(\"@esfx/collection-core\"); [1, 2, 3][Collection.size]; // 3 Remarks The global shim adds a default implementation the collection interfaces to the following global objects: Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> Collection<T> IndexedCollection<T> FixedSizeIndexedCollection<T> Uint8Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Uint8ClampedArray implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Uint16Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Uint32Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Int8Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Int16Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Int32Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Float32Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Float64Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> BigUint64Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> BigInt64Array implements: ReadonlyCollection<T> ReadonlyIndexedCollection<T> FixedSizeIndexedCollection<T> Set implements: ReadonlyCollection<T> Collection<T> Map implements: ReadonlyKeyedCollection<K, V> KeyedCollection<K, V> WeakSet implements: ReadonlyContainer<T> Container<T> WeakMap implements: ReadonlyKeyedContainer<K, V> KeyedContainer<K, V>"
  },
  "api/collections.html": {
    "href": "api/collections.html",
    "title": "@esfx/collections Package | @esfx API Reference",
    "keywords": "@esfx/collections Package Provides a number of common collection classes from the following packages: @esfx/collections-sortedmap @esfx/collections-sortedset @esfx/collections-hashmap @esfx/collections-hashset @esfx/collections-linkedlist Installation npm i @esfx/collections"
  },
  "api/collections-hashmap.html": {
    "href": "api/collections-hashmap.html",
    "title": "@esfx/collections-hashmap Package | @esfx API Reference",
    "keywords": "@esfx/collections-hashmap Package Provides the HashMap class, a collection class that utilizes @esfx/collection-core and @esfx/equatable . Installation npm i @esfx/collections-hashmap Usage TypeScript JavaScript (CommonJS) import { HashMap } from \"@esfx/collections-hashmap\"; import { Equatable, Equaler, Comparable, Comparer } from \"@esfx/equatable\"; class Person { firstName: string; lastName: string; constructor(firstName: string, lastName: string) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other: unknown) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other: unknown) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const obj1 = new Person(\"Bob\", \"Clark\"); const obj2 = new Person(\"Bob\", \"Clark\"); const set = new Map<Person, string>(); // native ECMAScript Map set.set(obj1, \"obj1\"); set.set(obj2, \"obj2\"); set.size; // 2 const hashMap = new HashMap<Person, string>(); hashMap.set(obj1, \"obj1\"); hashMap.set(obj2, \"obj2\"); hashMap.size; // 1 const { HashMap } = require(\"@esfx/collections-hashmap\"); const { Equatable, Equaler, Comparable, Comparer } = require(\"@esfx/equatable\"); class Person { constructor(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const obj1 = new Person(\"Bob\", \"Clark\"); const obj2 = new Person(\"Bob\", \"Clark\"); const set = new Map(); // native ECMAScript Map set.set(obj1, \"obj1\"); set.set(obj2, \"obj2\"); set.size; // 2 const hashMap = new HashMap(); hashMap.set(obj1, \"obj1\"); hashMap.set(obj2, \"obj2\"); hashMap.size; // 1 Classes HashMap Interfaces ReadonlyHashMap<K, V>"
  },
  "api/collections-hashmap/hashmap.html": {
    "href": "api/collections-hashmap/hashmap.html",
    "title": "HashMap Class | @esfx API Reference",
    "keywords": "HashMap Class Package : @esfx/collections-hashmap Declaration export declare class HashMap<K, V> implements KeyedCollection<K, V>, ReadonlyHashMap<K, V> Constructors constructor(equaler) Constructs a new instance of the HashMap class Declaration constructor(equaler?: Equaler<K>); Parameters equaler Equaler <K> constructor(iterable, equaler) Constructs a new instance of the HashMap class Declaration constructor(iterable?: Iterable<[K, V]>, equaler?: Equaler<K>); Parameters iterable Iterable <[K, V]> equaler Equaler <K> constructor(capacity, equaler) Constructs a new instance of the HashMap class Declaration constructor(capacity: number, equaler?: Equaler<K>); Parameters capacity number equaler Equaler <K> Properties [ReadonlyKeyedCollection.size] Declaration get [ReadonlyKeyedCollection.size](): number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string equaler Declaration get equaler(): Equaler<K>; Property Value Equaler <K> size Declaration get size(): number; Property Value number Methods [KeyedCollection.clear]() Declaration [KeyedCollection.clear](): void; Returns void [KeyedCollection.delete](key) Declaration [KeyedCollection.delete](key: K): boolean; Parameters key K Returns boolean [KeyedCollection.set](key, value) Declaration [KeyedCollection.set](key: K, value: V): void; Parameters key K value V Returns void [ReadonlyKeyedCollection.get](key) Declaration [ReadonlyKeyedCollection.get](key: K): V | undefined; Parameters key K Returns V | undefined [ReadonlyKeyedCollection.has](key) Declaration [ReadonlyKeyedCollection.has](key: K): boolean; Parameters key K Returns boolean [ReadonlyKeyedCollection.keys]() Declaration [ReadonlyKeyedCollection.keys](): Generator<K, void, unknown>; Returns Generator <K, void, unknown> [ReadonlyKeyedCollection.values]() Declaration [ReadonlyKeyedCollection.values](): Generator<V, void, unknown>; Returns Generator <V, void, unknown> [Symbol.iterator]() Declaration [Symbol.iterator](): Generator<[K, V], void, unknown>; Returns Generator <[K, V], void, unknown> clear() Declaration clear(): void; Returns void delete(key) Declaration delete(key: K): boolean; Parameters key K Returns boolean ensureCapacity(capacity) Declaration ensureCapacity(capacity: number): number; Parameters capacity number Returns number entries() Declaration entries(): Generator<[K, V], void, unknown>; Returns Generator <[K, V], void, unknown> forEach(callback, thisArg) Declaration forEach(callback: (value: V, key: K, map: this) => void, thisArg?: any): void; Parameters callback (value: V, key: K, map: this) => void thisArg any Returns void get(key) Declaration get(key: K): V | undefined; Parameters key K Returns V | undefined has(key) Declaration has(key: K): boolean; Parameters key K Returns boolean keys() Declaration keys(): Generator<K, void, unknown>; Returns Generator <K, void, unknown> set(key, value) Declaration set(key: K, value: V): this; Parameters key K value V Returns this trimExcess(capacity) Declaration trimExcess(capacity?: number): void; Parameters capacity number Returns void values() Declaration values(): Generator<V, void, unknown>; Returns Generator <V, void, unknown>"
  },
  "api/collections-hashmap/readonlyhashmap.html": {
    "href": "api/collections-hashmap/readonlyhashmap.html",
    "title": "ReadonlyHashMap<K, V> Interface | @esfx API Reference",
    "keywords": "ReadonlyHashMap<K, V> Interface Package : @esfx/collections-hashmap Declaration export interface ReadonlyHashMap<K, V> extends ReadonlyMap<K, V>, ReadonlyKeyedCollection<K, V> Inheritance ReadonlyMap <K, V> ReadonlyKeyedCollection <K, V> ReadonlyHashMap<K, V> Inherited Members [ReadonlyKeyedCollection.keys]() [ReadonlyKeyedCollection.size] [ReadonlyKeyedCollection.values]() Properties equaler Declaration readonly equaler: Equaler<K>; Property Value Equaler <K> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]>"
  },
  "api/collections-hashset.html": {
    "href": "api/collections-hashset.html",
    "title": "@esfx/collections-hashset Package | @esfx API Reference",
    "keywords": "@esfx/collections-hashset Package Provides the HashSet class, a collection class that utilizes @esfx/collection-core and @esfx/equatable . Installation npm i @esfx/collections-hashset Usage TypeScript JavaScript (CommonJS) import { HashSet } from \"@esfx/collections-hashset\"; import { Equatable, Equaler, Comparable, Comparer } from \"@esfx/equatable\"; class Person { firstName: string; lastName: string; constructor(firstName: string, lastName: string) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other: unknown) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other: unknown) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const obj1 = new Person(\"Bob\", \"Clark\"); const obj2 = new Person(\"Bob\", \"Clark\"); const set = new Set<Person>(); // native ECMAScript Set set.add(obj1); set.add(obj2); set.size; // 2 const hashSet = new HashSet<Person>(); hashSet.add(obj1); hashSet.add(obj2); hashSet.size; // 1 const { HashSet } = require(\"@esfx/collections-hashset\"); const { Equatable, Equaler, Comparable, Comparer } = require(\"@esfx/equatable\"); class Person { constructor(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const obj1 = new Person(\"Bob\", \"Clark\"); const obj2 = new Person(\"Bob\", \"Clark\"); const set = new Set(); // native ECMAScript Set set.add(obj1); set.add(obj2); set.size; // 2 const hashSet = new HashSet(); hashSet.add(obj1); hashSet.add(obj2); hashSet.size; // 1 Classes HashSet Interfaces ReadonlyHashSet<T>"
  },
  "api/collections-hashset/hashset.html": {
    "href": "api/collections-hashset/hashset.html",
    "title": "HashSet Class | @esfx API Reference",
    "keywords": "HashSet Class Package : @esfx/collections-hashset Declaration export declare class HashSet<T> implements Collection<T> Constructors constructor(equaler) Constructs a new instance of the HashSet class Declaration constructor(equaler?: Equaler<T>); Parameters equaler Equaler <T> constructor(iterable, equaler) Constructs a new instance of the HashSet class Declaration constructor(iterable?: Iterable<T>, equaler?: Equaler<T>); Parameters iterable Iterable <T> equaler Equaler <T> constructor(capacity, equaler) Constructs a new instance of the HashSet class Declaration constructor(capacity: number, equaler?: Equaler<T>); Parameters capacity number equaler Equaler <T> Properties [Collection.size] Declaration get [Collection.size](): number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string equaler Declaration get equaler(): Equaler<T>; Property Value Equaler <T> size Declaration get size(): number; Property Value number Methods [Collection.add](value) Declaration [Collection.add](value: T): void; Parameters value T Returns void [Collection.clear]() Declaration [Collection.clear](): void; Returns void [Collection.delete](value) Declaration [Collection.delete](value: T): boolean; Parameters value T Returns boolean [Collection.has](value) Declaration [Collection.has](value: T): boolean; Parameters value T Returns boolean [Symbol.iterator]() Declaration [Symbol.iterator](): Generator<T, void, unknown>; Returns Generator <T, void, unknown> add(value) Declaration add(value: T): this; Parameters value T Returns this clear() Declaration clear(): void; Returns void delete(value) Declaration delete(value: T): boolean; Parameters value T Returns boolean ensureCapacity(capacity) Declaration ensureCapacity(capacity: number): number; Parameters capacity number Returns number entries() Declaration entries(): Generator<[T, T], void, unknown>; Returns Generator <[T, T], void, unknown> forEach(callback, thisArg) Declaration forEach(callback: (value: T, key: T, map: this) => void, thisArg?: any): void; Parameters callback (value: T, key: T, map: this) => void thisArg any Returns void has(value) Declaration has(value: T): boolean; Parameters value T Returns boolean keys() Declaration keys(): Generator<T, void, unknown>; Returns Generator <T, void, unknown> trimExcess(capacity) Declaration trimExcess(capacity?: number): void; Parameters capacity number Returns void tryAdd(value) Declaration tryAdd(value: T): boolean; Parameters value T Returns boolean values() Declaration values(): Generator<T, void, unknown>; Returns Generator <T, void, unknown>"
  },
  "api/collections-hashset/readonlyhashset.html": {
    "href": "api/collections-hashset/readonlyhashset.html",
    "title": "ReadonlyHashSet<T> Interface | @esfx API Reference",
    "keywords": "ReadonlyHashSet<T> Interface Package : @esfx/collections-hashset Declaration export interface ReadonlyHashSet<T> extends ReadonlySet<T>, ReadonlyCollection<T> Inheritance ReadonlySet <T> ReadonlyCollection <T> ReadonlyHashSet<T> Inherited Members [ReadonlyCollection.size] Properties equaler Declaration readonly equaler: Equaler<T>; Property Value Equaler <T> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/collections-linkedlist.html": {
    "href": "api/collections-linkedlist.html",
    "title": "@esfx/collections-linkedlist Package | @esfx API Reference",
    "keywords": "@esfx/collections-linkedlist Package Provides the LinkedList class, a linked-list implementation that utilizes @esfx/collection-core and @esfx/equatable . Installation npm i @esfx/collections-linkedlist Usage TypeScript JavaScript (CommonJS) import { LinkedList, LinkedListNode } from \"@esfx/collections-linkedlist\"; const list = new LinkedList<string>(); const n1: LinkedListNode<string> = list.push(\"first\"); const n2: LinkedListNode<string> = list.push(\"second\"); n2.value = \"second updated\"; [...list]; // first,second updated const { LinkedList } = require(\"@esfx/collections-linkedlist\"); const list = new LinkedList(); const n1 = list.push(\"first\"); const n2 = list.push(\"second\"); n2.value = \"second updated\"; [...list]; // first,second updated Classes LinkedList A collection representing a [doubly-linked list](https://en.wikipedia.org/wiki/Doubly_linked_list). LinkedListNode A node in a [doubly-linked list](https://en.wikipedia.org/wiki/Doubly_linked_list)."
  },
  "api/collections-linkedlist/linkedlist.html": {
    "href": "api/collections-linkedlist/linkedlist.html",
    "title": "LinkedList Class | @esfx API Reference",
    "keywords": "LinkedList Class Package : @esfx/collections-linkedlist A collection representing a [doubly-linked list](https://en.wikipedia.org/wiki/Doubly_linked_list). Declaration export declare class LinkedList<T> implements Collection<T> Constructors constructor(equaler) Constructs a new instance of the LinkedList class Declaration constructor(equaler?: EqualityComparison<T> | Equaler<T>); Parameters equaler EqualityComparison <T> | Equaler <T> constructor(iterable, equaler) Constructs a new instance of the LinkedList class Declaration constructor(iterable?: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>); Parameters iterable Iterable <T> equaler EqualityComparison <T> | Equaler <T> Properties [ReadonlyCollection.size] Declaration get [ReadonlyCollection.size](): number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string equaler Gets the Equaler<T> used for equality comparisons in this list. Declaration get equaler(): Equaler<T>; Property Value Equaler <T> first Gets the first node in the list. If the list is empty, this returns undefined <!-- --> . Declaration get first(): LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined last Gets the last node in the list. If the list is empty, this returns undefined <!-- --> . Declaration get last(): LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined size Gets the number of elements in the list. Declaration get size(): number; Property Value number Methods [Collection.add](value) Declaration [Collection.add](value: T): void; Parameters value T Returns void [Collection.clear]() Declaration [Collection.clear](): void; Returns void [Collection.delete](value) Declaration [Collection.delete](value: T): boolean; Parameters value T Returns boolean [ReadonlyCollection.has](value) Declaration [ReadonlyCollection.has](value: T): boolean; Parameters value T Returns boolean [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T> clear() Removes all nodes from the list. Declaration clear(): void; Returns void delete(value) Finds the first node in the list containing value <!-- --> , removes it from the list, and returns it. If a node containing value could not be found, undefined is returned instead. Declaration delete(value: T): LinkedListNode<T> | undefined; Parameters value T Returns LinkedListNode <T> | undefined deleteAll(predicate, thisArg) Removes all nodes from the list matching the supplied predicate <!-- --> . Declaration deleteAll(predicate: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): number; Parameters predicate (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean A callback function used to test each value and node in the list. thisArg any The this value to use when executing predicate <!-- --> . Returns number deleteNode(node) Removes the provided node from the list. Declaration deleteNode(node: LinkedListNode<T> | null | undefined): boolean; Parameters node LinkedListNode <T> | null | undefined Returns boolean true if the node was successfully removed from the list; otherwise, false <!-- --> . drain() Returns an iterator that removes each node from the list before yielding the node's value. Declaration drain(): IterableIterator<T>; Returns IterableIterator <T> every(callback, thisArg) Declaration every(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): boolean; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns boolean filter(callback, thisArg) Returns the elements of a the list that meet the condition specified in the provided callback function. Declaration filter<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): LinkedList<S>; Type Parameters S Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S The callback to call for each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns LinkedList <S> filter(callback, thisArg) Returns the elements of a the list that meet the condition specified in the provided callback function. Declaration filter(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): LinkedList<T>; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean The callback to call for each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns LinkedList <T> find(callback, thisArg) Finds the first value in the list that matches the provided callback. Declaration find<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): S | undefined; Type Parameters S Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S The callback used to test each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns S | undefined find(callback, thisArg) Finds the first value in the list that matches the provided callback. Declaration find(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): T | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean The callback used to test each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns T | undefined findLast(callback, thisArg) Finds the last value in the list that matches the provided callback, starting from the end of the list. Declaration findLast<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): S | undefined; Type Parameters S Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S The callback used to test each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns S | undefined findLast(callback, thisArg) Finds the last value in the list that matches the provided callback, starting from the end of the list. Declaration findLast(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): T | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean The callback used to test each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns T | undefined findLastNode(callback, thisArg) Finds the last LinkedListNode in the list that matches the provided callback, starting from the end of the list. Declaration findLastNode<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): LinkedListNode<S> | undefined; Type Parameters S Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S The callback used to test each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns LinkedListNode <S> | undefined findLastNode(callback, thisArg) Finds the last LinkedListNode in the list that matches the provided callback, starting from the end of the list. Declaration findLastNode(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): LinkedListNode<T> | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean The callback used to test each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns LinkedListNode <T> | undefined findNode(callback, thisArg) Finds the first LinkedListNode in the list that matches the provided callback. Declaration findNode<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): LinkedListNode<S> | undefined; Type Parameters S Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S The callback used to test each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns LinkedListNode <S> | undefined findNode(callback, thisArg) Finds the first LinkedListNode in the list that matches the provided callback. Declaration findNode(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): LinkedListNode<T> | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean The callback used to test each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns LinkedListNode <T> | undefined forEach(callback, thisArg) Declaration forEach(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => void, thisArg?: any): void; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => void thisArg any Returns void has(value) Returns a value indicating whether value exists within the list. Declaration has(value: T): boolean; Parameters value T Returns boolean insertAfter(node, value) Inserts a new LinkedListNode containing value into the list after the provided node <!-- --> . If node is either null or undefined <!-- --> , the new node is inserted at the end of the list. Declaration insertAfter(node: LinkedListNode<T> | null | undefined, value: T): LinkedListNode<T>; Parameters node LinkedListNode <T> | null | undefined The node after which value will be inserted. value T The value to insert. Returns LinkedListNode <T> The new LinkedListNode for value <!-- --> . insertBefore(node, value) Inserts a new LinkedListNode containing value into the list before the provided node <!-- --> . If node is either null or undefined <!-- --> , the new node is inserted at the beginning of the list. Declaration insertBefore(node: LinkedListNode<T> | null | undefined, value: T): LinkedListNode<T>; Parameters node LinkedListNode <T> | null | undefined The node before which value will be inserted. value T The value to insert. Returns LinkedListNode <T> The new LinkedListNode for value <!-- --> . insertNodeAfter(node, newNode) Inserts newNode into the list after the provided node <!-- --> . If node is either null or undefined <!-- --> , newNode is inserted at the end of the list. Declaration insertNodeAfter(node: LinkedListNode<T> | null | undefined, newNode: LinkedListNode<T>): void; Parameters node LinkedListNode <T> | null | undefined The node after which newNode will be inserted. newNode LinkedListNode <T> The new node to insert. Returns void insertNodeBefore(node, newNode) Inserts newNode into the list before the provided node <!-- --> . If node is either null or undefined <!-- --> , newNode is inserted at the beginning of the list. Declaration insertNodeBefore(node: LinkedListNode<T> | null | undefined, newNode: LinkedListNode<T>): void; Parameters node LinkedListNode <T> | null | undefined The node before which newNode will be inserted. newNode LinkedListNode <T> The new node to insert. Returns void lastNodeOf(value, fromNode) Finds the last node in the list with the provided value, starting from the end of the list. Declaration lastNodeOf(value: T, fromNode?: LinkedListNode<T> | null): LinkedListNode<T> | undefined; Parameters value T The value to find. fromNode LinkedListNode <T> | null When provided, starts looking for value starting at this node and working backwards towards the front of the list. Returns LinkedListNode <T> | undefined map(callback, thisArg) Calls the provided callback function on each element of the list, and returns a new LinkedList that contains the results. Declaration map<U>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => U, thisArg?: any): LinkedList<U>; Type Parameters U Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => U The callback to call for each value and node. thisArg any The this value to use when executing callback <!-- --> . Returns LinkedList <U> nodeOf(value, fromNode) Finds the first node in the list with the provided value. Declaration nodeOf(value: T, fromNode?: LinkedListNode<T> | null): LinkedListNode<T> | undefined; Parameters value T The value to find. fromNode LinkedListNode <T> | null When provided, starts looking for value starting at this node. Returns LinkedListNode <T> | undefined nodes() Declaration nodes(): IterableIterator<LinkedListNode<T>>; Returns IterableIterator < LinkedListNode <T>> pop() Removes the last node from the list and returns its value. If the list is empty, undefined is returned instead. Declaration pop(): T | undefined; Returns T | undefined popNode() Removes the last node from the list and returns it. If the lsit is empty, undefined is returned instead. Declaration popNode(): LinkedListNode<T> | undefined; Returns LinkedListNode <T> | undefined push(value) Inserts a new LinkedListNode containing value at the end of the list. Declaration push(value: T): LinkedListNode<T>; Parameters value T The value to insert. Returns LinkedListNode <T> The new LinkedListNode for value <!-- --> . pushNode(newNode) Inserts newNode at the end of the list. Declaration pushNode(newNode: LinkedListNode<T>): void; Parameters newNode LinkedListNode <T> The node to insert. Returns void reduce(callback) Calls the specified callback function for all the nodes in the list. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. Declaration reduce(callback: (previousValue: T, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => T): T; Parameters callback (previousValue: T, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => T A function that accepts up to four arguments. The reduce method calls the callback function one time for each element in the list. Returns T reduce(callback, initialValue) Calls the specified callback function for all the nodes in the list. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. Declaration reduce(callback: (previousValue: T, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => T, initialValue: T): T; Parameters callback (previousValue: T, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => T A function that accepts up to four arguments. The reduce method calls the callback function one time for each element in the list. initialValue T If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callback function provides this value as an argument instead of a list value. Returns T reduce(callback, initialValue) Calls the specified callback function for all the nodes in the list. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. Declaration reduce<U>(callback: (previousValue: U, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => U, initialValue: U): U; Type Parameters U Parameters callback (previousValue: U, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => U A function that accepts up to four arguments. The reduce method calls the callback function one time for each element in the list. initialValue U If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callback function provides this value as an argument instead of a list value. Returns U reduceRight(callback) Calls the specified callback function for all the nodes in the list, in reverse. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. Declaration reduceRight(callback: (previousValue: T, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => T): T; Parameters callback (previousValue: T, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => T A function that accepts up to four arguments. The reduce method calls the callback function one time for each element in the list. Returns T reduceRight(callback, initialValue) Calls the specified callback function for all the nodes in the list, in reverse. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. Declaration reduceRight(callback: (previousValue: T, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => T, initialValue: T): T; Parameters callback (previousValue: T, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => T A function that accepts up to four arguments. The reduce method calls the callback function one time for each element in the list. initialValue T If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callback function provides this value as an argument instead of a list value. Returns T reduceRight(callback, initialValue) Calls the specified callback function for all the nodes in the list, in reverse. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function. Declaration reduceRight<U>(callback: (previousValue: U, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => U, initialValue: U): U; Type Parameters U Parameters callback (previousValue: U, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => U A function that accepts up to four arguments. The reduce method calls the callback function one time for each element in the list. initialValue U If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callback function provides this value as an argument instead of a list value. Returns U shift() Removes the first node from the list and returns its value. If the list is empty, undefined is returned instead. Declaration shift(): T | undefined; Returns T | undefined shiftNode() Removes the first node from the list and returns it. If the list is empty, undefined is returned instead. Declaration shiftNode(): LinkedListNode<T> | undefined; Returns LinkedListNode <T> | undefined some(callback, thisArg) Declaration some(callback?: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): boolean; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns boolean unshift(value) Inserts a new LinkedListNode containing value at the beginning of the list. Declaration unshift(value: T): LinkedListNode<T>; Parameters value T The value to insert. Returns LinkedListNode <T> The new LinkedListNode for value <!-- --> . unshiftNode(newNode) Inserts newNode at the beginning of the list. Declaration unshiftNode(newNode: LinkedListNode<T>): void; Parameters newNode LinkedListNode <T> The node to insert. Returns void values() Declaration values(): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/collections-linkedlist/linkedlistnode.html": {
    "href": "api/collections-linkedlist/linkedlistnode.html",
    "title": "LinkedListNode Class | @esfx API Reference",
    "keywords": "LinkedListNode Class Package : @esfx/collections-linkedlist A node in a [doubly-linked list](https://en.wikipedia.org/wiki/Doubly_linked_list). Declaration export declare class LinkedListNode<T> Constructors constructor(value) Constructs a new instance of the LinkedListNode class Declaration constructor(value: T); Parameters value T Properties [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string list Gets the list associated with this node. If the node is not attached to a LinkedList , then this returns undefined <!-- --> . Declaration get list(): LinkedList<T> | undefined; Property Value LinkedList <T> | undefined next Gets the LinkedListNode following this node in the list. If this is the last node in the list, or the node is not attached to a LinkedList , then this returns undefined <!-- --> . Declaration get next(): LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined previous Gets the LinkedListNode preceding this node in the list. If this is the first node in the list, or the node is not attached to a LinkedList , then this returns undefined <!-- --> . Declaration get previous(): LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined value The value for the node. Declaration value: T; Property Value T Methods detachSelf() Removes this node from its associated list. Declaration detachSelf(): boolean; Returns boolean true if the node was successfully removed from the list; otherwise, false <!-- --> ."
  },
  "api/collections-multimap.html": {
    "href": "api/collections-multimap.html",
    "title": "@esfx/collections-multimap Package | @esfx API Reference",
    "keywords": "@esfx/collections-multimap Package Provides the MultiMap class, a collection class that maps a single key to multiple values. Installation npm i @esfx/collections-multimap Usage TypeScript JavaScript (CommonJS) import { MultiMap } from \"@esfx/collections-multimap\"; const multi = new MultiMap<string, number>(); multi.add(\"a\", 1); multi.add(\"a\", 2); multi.add(\"b\", 3); multi.size; // 3 [...multi.get(\"a\")]; // [1, 2] [...multi.get(\"b\")]; // [3] import { MultiMap } from \"@esfx/collections-multimap\"; const multi = new MultiMap(); multi.add(\"a\", 1); multi.add(\"a\", 2); multi.add(\"b\", 3); multi.size; // 3 [...multi.get(\"a\")]; // [1, 2] [...multi.get(\"b\")]; // [3] Classes MultiMap Interfaces MultiMapOptions<K, V> ReadonlyMultiMap<K, V>"
  },
  "api/collections-multimap/multimap.html": {
    "href": "api/collections-multimap/multimap.html",
    "title": "MultiMap Class | @esfx API Reference",
    "keywords": "MultiMap Class Package : @esfx/collections-multimap Declaration export declare class MultiMap<K, V> implements KeyedMultiCollection<K, V> Constructors constructor(options) Constructs a new instance of the MultiMap class Declaration constructor(options?: MultiMapOptions<K, V>); Parameters options MultiMapOptions <K, V> constructor(iterable, options) Constructs a new instance of the MultiMap class Declaration constructor(iterable?: Iterable<[K, V]>, options?: MultiMapOptions<K, V>); Parameters iterable Iterable <[K, V]> options MultiMapOptions <K, V> constructor(capacity, options) Constructs a new instance of the MultiMap class Declaration constructor(capacity: number, options?: MultiMapOptions<K, V>); Parameters capacity number options MultiMapOptions <K, V> Properties [ReadonlyKeyedMultiCollection.size] Declaration get [ReadonlyKeyedMultiCollection.size](): number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string keyEqualer Declaration get keyEqualer(): Equaler<K>; Property Value Equaler <K> size Declaration get size(): number; Property Value number valueEqualer Declaration get valueEqualer(): Equaler<V>; Property Value Equaler <V> Methods [KeyedMultiCollection.add](key, value) Declaration [KeyedMultiCollection.add](key: K, value: V): void; Parameters key K value V Returns void [KeyedMultiCollection.clear]() Declaration [KeyedMultiCollection.clear](): void; Returns void [KeyedMultiCollection.delete](key) Declaration [KeyedMultiCollection.delete](key: K): number; Parameters key K Returns number [KeyedMultiCollection.deleteValue](key, value) Declaration [KeyedMultiCollection.deleteValue](key: K, value: V): boolean; Parameters key K value V Returns boolean [ReadonlyKeyedMultiCollection.get](key) Declaration [ReadonlyKeyedMultiCollection.get](key: K): ReadonlyHashSet<V> | undefined; Parameters key K Returns ReadonlyHashSet <V> | undefined [ReadonlyKeyedMultiCollection.has](key) Declaration [ReadonlyKeyedMultiCollection.has](key: K): boolean; Parameters key K Returns boolean [ReadonlyKeyedMultiCollection.hasValue](key, value) Declaration [ReadonlyKeyedMultiCollection.hasValue](key: K, value: V): boolean; Parameters key K value V Returns boolean [ReadonlyKeyedMultiCollection.keys]() Declaration [ReadonlyKeyedMultiCollection.keys](): Generator<K, void, unknown>; Returns Generator <K, void, unknown> [ReadonlyKeyedMultiCollection.values]() Declaration [ReadonlyKeyedMultiCollection.values](): Generator<V, void, unknown>; Returns Generator <V, void, unknown> [Symbol.iterator]() Declaration [Symbol.iterator](): Generator<[K, V], void, unknown>; Returns Generator <[K, V], void, unknown> add(key, value) Declaration add(key: K, value: V): this; Parameters key K value V Returns this clear() Declaration clear(): void; Returns void delete(key) Declaration delete(key: K): number; Parameters key K Returns number deleteValue(key, value) Declaration deleteValue(key: K, value: V): boolean; Parameters key K value V Returns boolean ensureCapacity(capacity) Declaration ensureCapacity(capacity: number): number; Parameters capacity number Returns number entries() Declaration entries(): Generator<[K, V], void, unknown>; Returns Generator <[K, V], void, unknown> forEach(callback, thisArg) Declaration forEach(callback: (value: V, key: K, map: this) => void, thisArg?: any): void; Parameters callback (value: V, key: K, map: this) => void thisArg any Returns void get(key) Declaration get(key: K): ReadonlyHashSet<V> | undefined; Parameters key K Returns ReadonlyHashSet <V> | undefined has(key) Declaration has(key: K): boolean; Parameters key K Returns boolean hasValue(key, value) Declaration hasValue(key: K, value: V): boolean; Parameters key K value V Returns boolean keys() Declaration keys(): Generator<K, void, unknown>; Returns Generator <K, void, unknown> trimExcess(capacity) Declaration trimExcess(capacity?: number): void; Parameters capacity number Returns void values() Declaration values(): Generator<V, void, unknown>; Returns Generator <V, void, unknown>"
  },
  "api/collections-multimap/multimapoptions.html": {
    "href": "api/collections-multimap/multimapoptions.html",
    "title": "MultiMapOptions<K, V> Interface | @esfx API Reference",
    "keywords": "MultiMapOptions<K, V> Interface Package : @esfx/collections-multimap Declaration export interface MultiMapOptions<K, V> Properties keyEqualer Declaration keyEqualer?: Equaler<K>; Property Value Equaler <K> valueEqualer Declaration valueEqualer?: Equaler<V>; Property Value Equaler <V>"
  },
  "api/collections-multimap/readonlymultimap.html": {
    "href": "api/collections-multimap/readonlymultimap.html",
    "title": "ReadonlyMultiMap<K, V> Interface | @esfx API Reference",
    "keywords": "ReadonlyMultiMap<K, V> Interface Package : @esfx/collections-multimap Declaration export interface ReadonlyMultiMap<K, V> extends KeyedMultiCollection<K, V> Inheritance KeyedMultiCollection <K, V> ReadonlyMultiMap<K, V> Inherited Members [KeyedMultiCollection.add](key, value) [KeyedMultiCollection.clear]() [KeyedMultiCollection.delete](key) [KeyedMultiCollection.deleteValue](key, value) Properties keyEqualer Declaration readonly keyEqualer: Equaler<K>; Property Value Equaler <K> size Declaration readonly size: number; Property Value number valueEqualer Declaration readonly valueEqualer: Equaler<V>; Property Value Equaler <V> Methods entries() Declaration entries(): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]> forEach(callback, thisArg) Declaration forEach(callback: (value: V, key: K, map: this) => void, thisArg?: any): void; Parameters callback (value: V, key: K, map: this) => void thisArg any Returns void get(key) Declaration get(key: K): ReadonlyHashSet<V> | undefined; Parameters key K Returns ReadonlyHashSet <V> | undefined has(key, value) Declaration has(key: K, value: V): boolean; Parameters key K value V Returns boolean hasKey(key) Declaration hasKey(key: K): boolean; Parameters key K Returns boolean keys() Declaration keys(): IterableIterator<K>; Returns IterableIterator <K> values() Declaration values(): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collections-sortedmap.html": {
    "href": "api/collections-sortedmap.html",
    "title": "@esfx/collections-sortedmap Package | @esfx API Reference",
    "keywords": "@esfx/collections-sortedmap Package Provides the SortedMap class, a collection class that utilizes @esfx/collection-core and @esfx/equatable . Installation npm i @esfx/collections-sortedmap Usage TypeScript JavaScript (CommonJS) import { SortedMap } from \"@esfx/collections-sortedmap\"; import { Equatable, Equaler, Comparable, Comparer } from \"@esfx/equatable\"; class Person { firstName: string; lastName: string; constructor(firstName: string, lastName: string) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other: unknown) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other: unknown) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const obj1 = new Person(\"Alice\", \"Johnson\"); const obj2 = new Person(\"Bob\", \"Clark\"); // ECMAScript native map iterates in insertion order const map = new Map<Person, string>(); // native ECMAScript Map map.set(obj1, \"obj1\"); map.set(obj2, \"obj2\"); [...map.keys()]; // Alice Johnson, Bob Clark // SortedMap uses Comparable.compareTo if available const sortedMap = new SortedMap<Person, string>(); sortedMap.set(obj1, \"obj1\"); sortedMap.set(obj2, \"obj2\"); [...sortedMap.keys()]; // Bob Clark, Alice Johnson const { SortedMap } = require(\"@esfx/collections-sortedmap\"); const { Equatable, Equaler, Comparable, Comparer } = require(\"@esfx/equatable\"); class Person { constructor(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const obj1 = new Person(\"Alice\", \"Johnson\"); const obj2 = new Person(\"Bob\", \"Clark\"); // ECMAScript native map iterates in insertion order const map = new Map(); // native ECMAScript Map map.set(obj1, \"obj1\"); map.set(obj2, \"obj2\"); [...map.keys()]; // Alice Johnson, Bob Clark // SortedMap uses Comparable.compareTo if available const sortedMap = new SortedMap(); sortedMap.set(obj1, \"obj1\"); sortedMap.set(obj2, \"obj2\"); [...sortedMap.keys()]; // Bob Clark, Alice Johnson Classes SortedMap Interfaces ReadonlySortedMap<K, V>"
  },
  "api/collections-sortedmap/readonlysortedmap.html": {
    "href": "api/collections-sortedmap/readonlysortedmap.html",
    "title": "ReadonlySortedMap<K, V> Interface | @esfx API Reference",
    "keywords": "ReadonlySortedMap<K, V> Interface Package : @esfx/collections-sortedmap Declaration export interface ReadonlySortedMap<K, V> extends ReadonlyMap<K, V>, ReadonlyKeyedCollection<K, V> Inheritance ReadonlyMap <K, V> ReadonlyKeyedCollection <K, V> ReadonlySortedMap<K, V> Inherited Members [ReadonlyKeyedCollection.keys]() [ReadonlyKeyedCollection.size] [ReadonlyKeyedCollection.values]() Properties comparer Declaration readonly comparer: Comparer<K>; Property Value Comparer <K> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]>"
  },
  "api/collections-sortedmap/sortedmap.html": {
    "href": "api/collections-sortedmap/sortedmap.html",
    "title": "SortedMap Class | @esfx API Reference",
    "keywords": "SortedMap Class Package : @esfx/collections-sortedmap Declaration export declare class SortedMap<K, V> implements KeyedCollection<K, V> Constructors constructor(comparer) Constructs a new instance of the SortedMap class Declaration constructor(comparer?: Comparison<K> | Comparer<K>); Parameters comparer Comparison <K> | Comparer <K> constructor(iterable, comparer) Constructs a new instance of the SortedMap class Declaration constructor(iterable?: Iterable<[K, V]>, comparer?: Comparison<K> | Comparer<K>); Parameters iterable Iterable <[K, V]> comparer Comparison <K> | Comparer <K> Properties [KeyedCollection.size] Declaration get [KeyedCollection.size](): number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string comparer Declaration get comparer(): Comparer<K>; Property Value Comparer <K> size Declaration get size(): number; Property Value number Methods [KeyedCollection.clear]() Declaration [KeyedCollection.clear](): void; Returns void [KeyedCollection.delete](key) Declaration [KeyedCollection.delete](key: K): boolean; Parameters key K Returns boolean [KeyedCollection.get](key) Declaration [KeyedCollection.get](key: K): V | undefined; Parameters key K Returns V | undefined [KeyedCollection.has](key) Declaration [KeyedCollection.has](key: K): boolean; Parameters key K Returns boolean [KeyedCollection.keys]() Declaration [KeyedCollection.keys](): IterableIterator<K>; Returns IterableIterator <K> [KeyedCollection.set](key, value) Declaration [KeyedCollection.set](key: K, value: V): void; Parameters key K value V Returns void [KeyedCollection.values]() Declaration [KeyedCollection.values](): IterableIterator<V>; Returns IterableIterator <V> [Symbol.iterator]() Declaration [Symbol.iterator](): Generator<[K, V], void, unknown>; Returns Generator <[K, V], void, unknown> clear() Declaration clear(): void; Returns void delete(key) Declaration delete(key: K): boolean; Parameters key K Returns boolean entries() Declaration entries(): Generator<[K, V], void, unknown>; Returns Generator <[K, V], void, unknown> forEach(callback, thisArg) Declaration forEach(callback: (value: V, key: K, map: this) => void, thisArg?: unknown): void; Parameters callback (value: V, key: K, map: this) => void thisArg unknown Returns void get(key) Declaration get(key: K): V | undefined; Parameters key K Returns V | undefined has(key) Declaration has(key: K): boolean; Parameters key K Returns boolean keys() Declaration keys(): IterableIterator<K>; Returns IterableIterator <K> set(key, value) Declaration set(key: K, value: V): this; Parameters key K value V Returns this values() Declaration values(): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collections-sortedset.html": {
    "href": "api/collections-sortedset.html",
    "title": "@esfx/collections-sortedset Package | @esfx API Reference",
    "keywords": "@esfx/collections-sortedset Package Provides the SortedSet class, a collection class that utilizes @esfx/collection-core and @esfx/equatable . Installation npm i @esfx/collections-sortedset Usage TypeScript JavaScript (CommonJS) import { SortedSet } from \"@esfx/collections-sortedset\"; import { Equatable, Equaler, Comparable, Comparer } from \"@esfx/equatable\"; class Person { firstName: string; lastName: string; constructor(firstName: string, lastName: string) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other: unknown) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other: unknown) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const obj1 = new Person(\"Alice\", \"Johnson\"); const obj2 = new Person(\"Bob\", \"Clark\"); // ECMAScript native set iterates in insertion order const set = new Set<Person>(); // native ECMAScript Set set.add(obj1); set.add(obj2); [...set]; // Alice Johnson, Bob Clark // SortedSet uses Comparable.compareTo if available const sortedSet = new SortedSet<Person>(); sortedSet.add(obj1); sortedSet.add(obj2); [...sortedSet]; // Bob Clark, Alice Johnson const { SortedSet } = require(\"@esfx/collections-sortedset\"); const { Equatable, Equaler, Comparable, Comparer } = require(\"@esfx/equatable\"); class Person { constructor(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const obj1 = new Person(\"Alice\", \"Johnson\"); const obj2 = new Person(\"Bob\", \"Clark\"); // ECMAScript native set iterates in insertion order const set = new Set(); // native ECMAScript Set set.add(obj1); set.add(obj2); [...set]; // Alice Johnson, Bob Clark // SortedSet uses Comparable.compareTo if available const sortedSet = new SortedSet(); sortedSet.add(obj1); sortedSet.add(obj2); [...sortedSet]; // Bob Clark, Alice Johnson Classes SortedSet Interfaces ReadonlySortedSet<T>"
  },
  "api/collections-sortedset/readonlysortedset.html": {
    "href": "api/collections-sortedset/readonlysortedset.html",
    "title": "ReadonlySortedSet<T> Interface | @esfx API Reference",
    "keywords": "ReadonlySortedSet<T> Interface Package : @esfx/collections-sortedset Declaration export interface ReadonlySortedSet<T> extends ReadonlySet<T>, ReadonlyCollection<T> Inheritance ReadonlySet <T> ReadonlyCollection <T> ReadonlySortedSet<T> Inherited Members [ReadonlyCollection.size] Properties comparer Declaration readonly comparer: Comparer<T>; Property Value Comparer <T> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/collections-sortedset/sortedset.html": {
    "href": "api/collections-sortedset/sortedset.html",
    "title": "SortedSet Class | @esfx API Reference",
    "keywords": "SortedSet Class Package : @esfx/collections-sortedset Declaration export declare class SortedSet<T> implements Collection<T> Constructors constructor(comparer) Constructs a new instance of the SortedSet class Declaration constructor(comparer?: Comparison<T> | Comparer<T>); Parameters comparer Comparison <T> | Comparer <T> constructor(iterable, comparer) Constructs a new instance of the SortedSet class Declaration constructor(iterable?: Iterable<T>, comparer?: Comparison<T> | Comparer<T>); Parameters iterable Iterable <T> comparer Comparison <T> | Comparer <T> Properties [Collection.size] Declaration get [Collection.size](): number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string comparer Declaration get comparer(): Comparer<T>; Property Value Comparer <T> size Declaration get size(): number; Property Value number Methods [Collection.add](value) Declaration [Collection.add](value: T): void; Parameters value T Returns void [Collection.clear]() Declaration [Collection.clear](): void; Returns void [Collection.delete](value) Declaration [Collection.delete](value: T): boolean; Parameters value T Returns boolean [Collection.has](value) Declaration [Collection.has](value: T): boolean; Parameters value T Returns boolean [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T> add(value) Declaration add(value: T): this; Parameters value T Returns this clear() Declaration clear(): void; Returns void delete(value) Declaration delete(value: T): boolean; Parameters value T Returns boolean entries() Declaration entries(): Generator<[T, T], void, unknown>; Returns Generator <[T, T], void, unknown> forEach(callback, thisArg) Declaration forEach(callback: (value: T, key: T, map: this) => void, thisArg?: unknown): void; Parameters callback (value: T, key: T, map: this) => void thisArg unknown Returns void has(value) Declaration has(value: T): boolean; Parameters value T Returns boolean keys() Declaration keys(): IterableIterator<T>; Returns IterableIterator <T> values() Declaration values(): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/decorators.html": {
    "href": "api/decorators.html",
    "title": "@esfx/decorators Package | @esfx API Reference",
    "keywords": "@esfx/decorators Package Provides a number of frequently used decorators. Installation npm i @esfx/decorators Usage TBD Variables autobind Declaration autobind: { (target: Function): void; (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined): void; } autoproperty Converts a field declaration into an accessor with a backing property. Declaration autoproperty: ((readonly?: boolean | undefined) => (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) & ((target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) configurable Makes a method or accessor configurable. Declaration configurable: (() => (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) & ((target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) enumerable Makes a method or accessor enumerable. Declaration enumerable: (() => (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) & ((target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) lazyinit Declaration lazyinit: (initializer: () => unknown, attributes?: { enumerable?: boolean | undefined; configurable?: boolean | undefined; writable?: boolean | undefined; } | undefined) => (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void mixin Declaration mixin: (...args: object[]) => <T extends Function>(target: T) => T nonconfigurable Makes a method or accessor non-configurable. Declaration nonconfigurable: (() => (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) & ((target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) nonenumerable Makes a method or accessor non-enumerable. Declaration nonenumerable: (() => (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) & ((target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) obsolete Makes a member obsolete. Declaration obsolete: ((message?: string | undefined, error?: boolean | undefined) => { <T extends Function>(target: T): void | T; (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined): void; }) & { <T extends Function>(target: T): void | T; (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined): void; } readonly Makes a method non-writable. Declaration readonly: (() => (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) & ((target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) writable Makes a method writable. Declaration writable: (() => (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void) & ((target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined) => void)"
  },
  "api/decorators-stage1-core.html": {
    "href": "api/decorators-stage1-core.html",
    "title": "@esfx/decorators-stage1-core Package | @esfx API Reference",
    "keywords": "@esfx/decorators-stage1-core Package Provides a low-level API for working with ECMAScript Stage 1 Decorators. Installation npm i @esfx/decorators-stage1-core Usage TBD Interfaces AccessorMemberDescriptor<T> ClassDescriptor<T> FieldMemberDescriptor<T> MemberDescriptor<T> MethodMemberDescriptor<T> ParameterDescriptor Functions createClassDescriptor(target) Declaration export declare function createClassDescriptor<T extends Function = Function>(target: T): ClassDescriptor<T>; Type Parameters T Parameters target T Returns ClassDescriptor <T> createDecorator(decorator) Declaration export declare function createDecorator<S extends DecoratorSignature<[]>>(decorator: S): MappedDecoratorSignature<S>; Type Parameters S Parameters decorator S Returns MappedDecoratorSignature <S> createDecoratorFactory(decorator) Declaration export declare function createDecoratorFactory<S extends DecoratorSignature>(decorator: S): MappedDecoratorFactorySignature<S>; Type Parameters S Parameters decorator S Returns MappedDecoratorFactorySignature <S> createDecoratorOrDecoratorFactory(decorator) Declaration export declare function createDecoratorOrDecoratorFactory<S extends DecoratorSignature>(decorator: S): MappedDecoratorOrDecoratorFactorySignature<S>; Type Parameters S Parameters decorator S Returns MappedDecoratorOrDecoratorFactorySignature <S> createMemberDescriptor(target, propertyKey, descriptor) Declaration export declare function createMemberDescriptor<T = any>(target: object, propertyKey: PropertyKey, descriptor?: TypedPropertyDescriptor<T>): MemberDescriptor<T>; Type Parameters T Parameters target object propertyKey PropertyKey descriptor TypedPropertyDescriptor <T> Returns MemberDescriptor <T> createParameterDescriptor(target, propertyKey, parameterIndex) Declaration export declare function createParameterDescriptor(target: object, propertyKey: PropertyKey, parameterIndex: number): ParameterDescriptor; Parameters target object propertyKey PropertyKey parameterIndex number Returns ParameterDescriptor decorate(decorators, target) Declaration export declare function decorate(decorators: ((target: Function) => Function | void)[], target: Function): Function; Parameters decorators ((target: Function ) => Function | void)[] target Function Returns Function decorate(decorators, target, propertyKey, descriptor) Declaration export declare function decorate(decorators: ((target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor) => PropertyDescriptor | void)[], target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor): PropertyDescriptor | void; Parameters decorators ((target: object, propertyKey: PropertyKey , descriptor?: PropertyDescriptor ) => PropertyDescriptor | void)[] target object propertyKey PropertyKey descriptor PropertyDescriptor Returns PropertyDescriptor | void decorateClass(decorators, target) Declaration export declare function decorateClass(decorators: ((target: Function) => Function | void)[], target: Function): Function; Parameters decorators ((target: Function ) => Function | void)[] target Function Returns Function decorateMember(decorators, target, propertyKey, descriptor) Declaration export declare function decorateMember(decorators: ((target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor) => PropertyDescriptor | void)[], target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor): PropertyDescriptor | void; Parameters decorators ((target: object, propertyKey: PropertyKey , descriptor?: PropertyDescriptor ) => PropertyDescriptor | void)[] target object propertyKey PropertyKey descriptor PropertyDescriptor Returns PropertyDescriptor | void getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: ClassDecoratorArguments): ClassDescriptor; Parameters args ClassDecoratorArguments Returns ClassDescriptor getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: MemberDecoratorArguments): MemberDescriptor; Parameters args MemberDecoratorArguments Returns MemberDescriptor getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: ParameterDecoratorArguments): ParameterDescriptor; Parameters args ParameterDecoratorArguments Returns ParameterDescriptor getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: DecoratorArguments): DecoratorDescriptor; Parameters args DecoratorArguments Returns DecoratorDescriptor getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: DecoratorArguments | IArguments): DecoratorDescriptor | undefined; Parameters args DecoratorArguments | IArguments Returns DecoratorDescriptor | undefined isAccessor(value) Declaration export declare function isAccessor(value: DecoratorDescriptor): value is AccessorMemberDescriptor; Parameters value DecoratorDescriptor Returns value is AccessorMemberDescriptor isClass(value) Declaration export declare function isClass(value: DecoratorDescriptor): value is ClassDescriptor; Parameters value DecoratorDescriptor Returns value is ClassDescriptor isClassDecoratorArguments(args) Declaration export declare function isClassDecoratorArguments(args: DecoratorArguments | IArguments | unknown[]): args is ClassDecoratorArguments; Parameters args DecoratorArguments | IArguments | unknown[] Returns args is ClassDecoratorArguments isDecoratorArguments(args) Declaration export declare function isDecoratorArguments(args: DecoratorArguments | IArguments | unknown[]): args is DecoratorArguments; Parameters args DecoratorArguments | IArguments | unknown[] Returns args is DecoratorArguments isField(value) Declaration export declare function isField(value: DecoratorDescriptor): value is FieldMemberDescriptor; Parameters value DecoratorDescriptor Returns value is FieldMemberDescriptor isMember(value) Declaration export declare function isMember(value: DecoratorDescriptor): value is MemberDescriptor; Parameters value DecoratorDescriptor Returns value is MemberDescriptor isMemberDecoratorArguments(args) Declaration export declare function isMemberDecoratorArguments(args: DecoratorArguments | IArguments | unknown[]): args is MemberDecoratorArguments; Parameters args DecoratorArguments | IArguments | unknown[] Returns args is MemberDecoratorArguments isMethod(value) Declaration export declare function isMethod(value: DecoratorDescriptor): value is MethodMemberDescriptor; Parameters value DecoratorDescriptor Returns value is MethodMemberDescriptor isNonStatic(value) Declaration export declare function isNonStatic(value: MemberDescriptor | ParameterDescriptor): boolean; Parameters value MemberDescriptor | ParameterDescriptor Returns boolean isParameter(value) Declaration export declare function isParameter(value: DecoratorDescriptor): value is ParameterDescriptor; Parameters value DecoratorDescriptor Returns value is ParameterDescriptor isParameterDecoratorArguments(args) Declaration export declare function isParameterDecoratorArguments(args: DecoratorArguments | IArguments | unknown[]): args is ParameterDecoratorArguments; Parameters args DecoratorArguments | IArguments | unknown[] Returns args is ParameterDecoratorArguments isStatic(value) Declaration export declare function isStatic(value: MemberDescriptor | ParameterDescriptor): boolean; Parameters value MemberDescriptor | ParameterDescriptor Returns boolean Variables defaultAccessorAttributes Declaration defaultAccessorAttributes: Readonly<{ enumerable: boolean; configurable: boolean; }> defaultFieldAttributes Declaration defaultFieldAttributes: Readonly<{ enumerable: boolean; configurable: boolean; writable: boolean; }> defaultMethodAttributes Declaration defaultMethodAttributes: Readonly<{ enumerable: boolean; configurable: boolean; writable: boolean; }> Type Aliases ClassDecoratorArguments Declaration export declare type ClassDecoratorArguments = Parameters<(target: Function) => void>; DecoratorArguments Declaration export declare type DecoratorArguments = ClassDecoratorArguments | MemberDecoratorArguments | ParameterDecoratorArguments; DecoratorDescriptor Declaration export declare type DecoratorDescriptor = ClassDescriptor | MemberDescriptor | ParameterDescriptor; MemberDecoratorArguments Declaration export declare type MemberDecoratorArguments = Parameters<(target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor) => void>; ParameterDecoratorArguments Declaration export declare type ParameterDecoratorArguments = Parameters<(target: object, propertyKey: PropertyKey, parameterIndex: number) => void>;"
  },
  "api/decorators-stage1-core/accessormemberdescriptor.html": {
    "href": "api/decorators-stage1-core/accessormemberdescriptor.html",
    "title": "AccessorMemberDescriptor<T> Interface | @esfx API Reference",
    "keywords": "AccessorMemberDescriptor<T> Interface Package : @esfx/decorators-stage1-core Declaration export interface AccessorMemberDescriptor<T = any> extends MemberDescriptor<T> Inheritance MemberDescriptor <T> AccessorMemberDescriptor<T> Inherited Members descriptor key kind target Properties descriptor Declaration descriptor: AccessorPropertyDescriptor<T>; Property Value AccessorPropertyDescriptor <T>"
  },
  "api/decorators-stage1-core/classdescriptor.html": {
    "href": "api/decorators-stage1-core/classdescriptor.html",
    "title": "ClassDescriptor<T> Interface | @esfx API Reference",
    "keywords": "ClassDescriptor<T> Interface Package : @esfx/decorators-stage1-core Declaration export interface ClassDescriptor<T extends Function = Function> Properties kind Declaration kind: \"class\"; Property Value \"class\" target Declaration target: T; Property Value T"
  },
  "api/decorators-stage1-core/fieldmemberdescriptor.html": {
    "href": "api/decorators-stage1-core/fieldmemberdescriptor.html",
    "title": "FieldMemberDescriptor<T> Interface | @esfx API Reference",
    "keywords": "FieldMemberDescriptor<T> Interface Package : @esfx/decorators-stage1-core Declaration export interface FieldMemberDescriptor<T = any> extends MemberDescriptor<T> Inheritance MemberDescriptor <T> FieldMemberDescriptor<T> Inherited Members descriptor key kind target Properties descriptor Declaration descriptor?: undefined; Property Value undefined"
  },
  "api/decorators-stage1-core/memberdescriptor.html": {
    "href": "api/decorators-stage1-core/memberdescriptor.html",
    "title": "MemberDescriptor<T> Interface | @esfx API Reference",
    "keywords": "MemberDescriptor<T> Interface Package : @esfx/decorators-stage1-core Declaration export interface MemberDescriptor<T = any> Properties descriptor Declaration descriptor?: TypedPropertyDescriptor<T>; Property Value TypedPropertyDescriptor <T> key Declaration key: string | symbol; Property Value string | symbol kind Declaration kind: \"member\"; Property Value \"member\" target Declaration target: object; Property Value object"
  },
  "api/decorators-stage1-core/methodmemberdescriptor.html": {
    "href": "api/decorators-stage1-core/methodmemberdescriptor.html",
    "title": "MethodMemberDescriptor<T> Interface | @esfx API Reference",
    "keywords": "MethodMemberDescriptor<T> Interface Package : @esfx/decorators-stage1-core Declaration export interface MethodMemberDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> extends MemberDescriptor<T> Inheritance MemberDescriptor <T> MethodMemberDescriptor<T> Inherited Members descriptor key kind target Properties descriptor Declaration descriptor: MethodPropertyDescriptor<T>; Property Value MethodPropertyDescriptor <T>"
  },
  "api/decorators-stage1-core/parameterdescriptor.html": {
    "href": "api/decorators-stage1-core/parameterdescriptor.html",
    "title": "ParameterDescriptor Interface | @esfx API Reference",
    "keywords": "ParameterDescriptor Interface Package : @esfx/decorators-stage1-core Declaration export interface ParameterDescriptor Properties index Declaration index: number; Property Value number key Declaration key: string | symbol; Property Value string | symbol kind Declaration kind: \"parameter\"; Property Value \"parameter\" target Declaration target: object; Property Value object"
  },
  "api/disposable.html": {
    "href": "api/disposable.html",
    "title": "@esfx/disposable Package | @esfx API Reference",
    "keywords": "@esfx/disposable Package Provides a low-level API for defining explicit resource management that third-party libraries can use to interoperate. Installation npm i @esfx/disposable Usage TypeScript JavaScript (CommonJS) import { Disposable } from \"@esfx/disposable\"; import * as fs from \"fs\"; class MyFileResouce { private _handle?: number; constructor() { this._handle = fs.openSync(\"path/to/file\", \"r\"); } close() { if (this._handle !== undefined) { fs.closeSync(this._handle); this._handle = undefined; } } // provide low-level 'dispose' primitive for interop [Disposable.dispose]() { this.close(); } } const { Disposable } = require(\"@esfx/disposable\"); const fs = require(\"fs\"); class MyFileResouce { constructor() { this._handle = fs.openSync(\"path/to/file\", \"r\"); } close() { if (this._handle !== undefined) { fs.closeSync(this._handle); this._handle = undefined; } } // provide low-level 'dispose' primitive for interop [Disposable.dispose]() { this.close(); } } Classes AsyncDisposable Indicates an object that has resources that can be explicitly disposed asynchronously. NOTE: It is not necessary to subclass AsyncDisposable <!-- --> . Merely having an [AsyncDisposable.asyncDispose]() method is sufficient. AsyncDisposableStack A container for asynchronously disposable resources. When the stack is disposed, its containing resources are disposed in the reverse of the order in which they were added. Disposable Indicates an object that has resources that can be explicitly disposed. DisposableStack A container for disposable resources. When the stack is disposed, its containing resources are disposed in the reverse of the order in which they were added. Interfaces AsyncDisposable Indicates an object that has resources that can be explicitly disposed asynchronously. AsyncDisposableScope Disposable Indicates an object that has resources that can be explicitly disposed. DisposableScope Used to aproximate using const via for..of <!-- --> . See scope() . NOTE: This is not spec-compliant and will not be standardized. Type Aliases AsyncDisposableLike Warning Deprecated Use instead. Declaration export declare type AsyncDisposableLike = AsyncDisposable | Disposable | (() => void | PromiseLike<void>); DisposableLike Warning Deprecated Use instead. Declaration export declare type DisposableLike = Disposable | (() => void); Namespaces AsyncDisposable Disposable Indicates an object that has resources that can be explicitly disposed."
  },
  "api/disposable/asyncdisposable-class.html": {
    "href": "api/disposable/asyncdisposable-class.html",
    "title": "AsyncDisposable Class | @esfx API Reference",
    "keywords": "AsyncDisposable Class Package : @esfx/disposable Indicates an object that has resources that can be explicitly disposed asynchronously. NOTE: It is not necessary to subclass AsyncDisposable <!-- --> . Merely having an [AsyncDisposable.asyncDispose]() method is sufficient. Declaration export declare class AsyncDisposable Constructors constructor(disposeAsync) Creates an AsyncDisposable wrapper around a callback used to dispose resources. Declaration constructor(disposeAsync: () => void | PromiseLike<void>); Parameters disposeAsync () => void | PromiseLike <void>"
  },
  "api/disposable/asyncdisposable-interface.html": {
    "href": "api/disposable/asyncdisposable-interface.html",
    "title": "AsyncDisposable Interface | @esfx API Reference",
    "keywords": "AsyncDisposable Interface Package : @esfx/disposable Indicates an object that has resources that can be explicitly disposed asynchronously. Declaration export interface AsyncDisposable Methods [AsyncDisposable.asyncDispose]() Dispose this object's resources. Declaration [AsyncDisposable.asyncDispose](): Promise<void>; Returns Promise <void>"
  },
  "api/disposable/asyncdisposable-namespace.html": {
    "href": "api/disposable/asyncdisposable-namespace.html",
    "title": "AsyncDisposable Namespace | @esfx API Reference",
    "keywords": "AsyncDisposable Namespace Package : @esfx/disposable Functions create(disposeAsync) Creates an AsyncDisposable wrapper around a callback used to dispose resources. NOTE: This is not spec-compliant and will not be standardized. It is preferred to use an AsyncDisposableStack or to implement AsyncDisposable.asyncDispose yourself instead. Declaration function create(disposeAsync: () => void | PromiseLike<void>): AsyncDisposable; Parameters disposeAsync () => void | PromiseLike <void> Returns AsyncDisposable hasInstance(value) Determines whether a value is AsyncDisposable <!-- --> . NOTE: This is not spec-compliant and will not be standardized. Declaration function hasInstance(value: unknown): value is AsyncDisposable; Parameters value unknown Returns value is AsyncDisposable scope() Emulate using await const using for..await..of <!-- --> . NOTE: This is not spec-compliant and will not be standardized. Declaration function scope(): AsyncGenerator<AsyncDisposableScope, void, undefined>; Returns AsyncGenerator < AsyncDisposableScope , void, undefined> Examples // with `using await const` (proposed) { ... using await const x = expr, y = expr; ... } // with `AsyncDisposable.scope()`: for await (const { using, fail } of AsyncDisposable.scope()) { try { ... const x = using(expr), y = using(expr); ... } catch (e) { fail(e); } } usingEach(iterable) Yields each disposable in the iterable, disposing it when the generator resumes. This emulates for (using await const x of expr) <!-- --> . NOTE: This is not spec-compliant and will not be standardized. Declaration function usingEach(iterable: AsyncIterable<AsyncDisposable | Disposable | null | undefined> | Iterable<AsyncDisposable | Disposable | null | undefined | PromiseLike<AsyncDisposable | Disposable | null | undefined>>): AsyncGenerator<AsyncDisposable | Disposable | null | undefined, void, unknown>; Parameters iterable AsyncIterable < AsyncDisposable | Disposable | null | undefined> | Iterable < AsyncDisposable | Disposable | null | undefined | PromiseLike < AsyncDisposable | Disposable | null | undefined>> Returns AsyncGenerator < AsyncDisposable | Disposable | null | undefined, void, unknown> Examples // with `using await const` (proposed) for (using await const x of expr) { ... } for await (using await const x of expr) { ... } // with `Disposable.usingEach()`: for await (const x of Disposable.usingEach(expr)) { ... } Variables asyncDispose A well-known symbol used to define an async explicit resource disposal method on an object. NOTE: Uses Symbol.asyncDispose if present. Declaration asyncDispose: AsyncDisposeSymbol"
  },
  "api/disposable/asyncdisposablescope.html": {
    "href": "api/disposable/asyncdisposablescope.html",
    "title": "AsyncDisposableScope Interface | @esfx API Reference",
    "keywords": "AsyncDisposableScope Interface Package : @esfx/disposable Declaration export interface AsyncDisposableScope Methods fail(error) Tracks an exception from the body of a for..of statement. See scope() . Declaration fail(error: unknown): void; Parameters error unknown Returns void using(value) Tracks a resource to be disposed at the end of a for..of statement. See scope() . Declaration using<T extends Disposable | AsyncDisposable | null | undefined>(value: T): T; Type Parameters T Parameters value T Returns T"
  },
  "api/disposable/asyncdisposablestack.html": {
    "href": "api/disposable/asyncdisposablestack.html",
    "title": "AsyncDisposableStack Class | @esfx API Reference",
    "keywords": "AsyncDisposableStack Class Package : @esfx/disposable A container for asynchronously disposable resources. When the stack is disposed, its containing resources are disposed in the reverse of the order in which they were added. Declaration export declare class AsyncDisposableStack implements AsyncDisposable Constructors constructor() Constructs a new instance of the AsyncDisposableStack class Declaration constructor(); Properties [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string disposed Gets a value indicating whether the stack has already been disposed. Declaration get disposed(): boolean; Property Value boolean Methods [AsyncDisposable.asyncDispose]() Dispose this object's resources. Declaration [AsyncDisposable.asyncDispose](): Promise<void>; Returns Promise <void> adopt(value, onDisposeAsync) Pushes a non-disposable resource onto the stack with the provided async disposal callback. Declaration adopt<T>(value: T, onDisposeAsync: (value: T) => void | PromiseLike<void>): T; Type Parameters T Parameters value T The resource to add. onDisposeAsync (value: T) => void | PromiseLike <void> The callback to execute when the resource is disposed. Returns T The resource provided. defer(onDisposeAsync) Pushes a resourceless async disposal callback onto the stack. Declaration defer(onDisposeAsync: () => void | PromiseLike<void>): void; Parameters onDisposeAsync () => void | PromiseLike <void> The callback to execute when the stack is disposed. Returns void disposeAsync() Dispose this object's resources. This method is an alias for [Disposable.dispose]() <!-- --> . const stack = new AsyncDisposableStack(); for (const f of files) stack.use(openFile(f)); ... await stack.disposeAsync(); Declaration disposeAsync(): Promise<void>; Returns Promise <void> move() Moves all resources out of this AsyncDisposableStack and into a new AsyncDisposableStack and returns it. Declaration move(): AsyncDisposableStack; Returns AsyncDisposableStack use(value) Pushes a new disposable resource onto the disposable stack stack. Resources are disposed in the reverse order they were entered. Declaration use<T extends AsyncDisposable | Disposable | null | undefined>(value: T): T; Type Parameters T Parameters value T The resource to add. Returns T The resource provided. use(value) Declaration use<T extends () => void | PromiseLike<void>>(value: T): T; Type Parameters T Parameters value T Returns T use(value, onDisposeAsync) Declaration use<T>(value: T, onDisposeAsync: (value: T) => void | PromiseLike<void>): T; Type Parameters T Parameters value T onDisposeAsync (value: T) => void | PromiseLike <void> Returns T"
  },
  "api/disposable/disposable-class.html": {
    "href": "api/disposable/disposable-class.html",
    "title": "Disposable Class | @esfx API Reference",
    "keywords": "Disposable Class Package : @esfx/disposable Indicates an object that has resources that can be explicitly disposed. Declaration export declare class Disposable Constructors constructor(dispose) Creates a Disposable wrapper around a callback used to dispose of a resource. Declaration constructor(dispose: () => void); Parameters dispose () => void"
  },
  "api/disposable/disposable-interface.html": {
    "href": "api/disposable/disposable-interface.html",
    "title": "Disposable Interface | @esfx API Reference",
    "keywords": "Disposable Interface Package : @esfx/disposable Indicates an object that has resources that can be explicitly disposed. Declaration export interface Disposable Methods [Disposable.dispose]() Dispose this object's resources. Declaration [Disposable.dispose](): void; Returns void"
  },
  "api/disposable/disposable-namespace.html": {
    "href": "api/disposable/disposable-namespace.html",
    "title": "Disposable Namespace | @esfx API Reference",
    "keywords": "Disposable Namespace Package : @esfx/disposable Indicates an object that has resources that can be explicitly disposed. Functions create(dispose) Creates a Disposable wrapper around a callback used to dispose of a resource. NOTE: This is not spec-compliant and will not be standardized. It is preferred to use a DisposableStack or to implement Disposable.dispose yourself instead. Declaration function create(dispose: () => void): Disposable; Parameters dispose () => void Returns Disposable hasInstance(value) Determines whether a value is Disposable. NOTE: This is not spec-compliant and will not be standardized. Declaration function hasInstance(value: unknown): value is Disposable; Parameters value unknown Returns value is Disposable scope() Emulate using const using for..of <!-- --> . NOTE: This is not spec-compliant and will not be standardized. Declaration function scope(): Generator<DisposableScope, void, undefined>; Returns Generator < DisposableScope , void, undefined> Examples // with `using const` (proposed) { ... using const x = expr, y = expr; ... } // with `Disposable.scope()`: for (const { using, fail } of Disposable.scope()) { try { ... const x = using(expr), y = using(expr); ... } catch (e) { fail(e); } } usingEach(iterable) Yields each disposable in the iterable, disposing it when the generator resumes. This emulates for (using const x of expr) <!-- --> . NOTE: This is not spec-compliant and will not be standardized. Declaration function usingEach(iterable: Iterable<Disposable | null | undefined>): Generator<Disposable | null | undefined, void, unknown>; Parameters iterable Iterable < Disposable | null | undefined> Returns Generator < Disposable | null | undefined, void, unknown> Examples // with `using const` (proposed) for (using const x of expr) { ... } // with `Disposable.usingEach()`: for (const x of Disposable.usingEach(expr)) { ... } Variables dispose A well-known symbol used to define an explicit resource disposal method on an object. NOTE: Uses Symbol.dispose if present. Declaration dispose: DisposeSymbol"
  },
  "api/disposable/disposablescope.html": {
    "href": "api/disposable/disposablescope.html",
    "title": "DisposableScope Interface | @esfx API Reference",
    "keywords": "DisposableScope Interface Package : @esfx/disposable Used to aproximate using const via for..of <!-- --> . See scope() . NOTE: This is not spec-compliant and will not be standardized. Declaration export interface DisposableScope Methods fail(error) Tracks an exception from the body of a for..of statement. See scope() . Declaration fail(error: unknown): void; Parameters error unknown Returns void using(value) Tracks a resource to be disposed at the end of a for..of statement. See scope() . Declaration using<T extends Disposable | null | undefined>(value: T): T; Type Parameters T Parameters value T Returns T"
  },
  "api/disposable/disposablestack.html": {
    "href": "api/disposable/disposablestack.html",
    "title": "DisposableStack Class | @esfx API Reference",
    "keywords": "DisposableStack Class Package : @esfx/disposable A container for disposable resources. When the stack is disposed, its containing resources are disposed in the reverse of the order in which they were added. Declaration export declare class DisposableStack Constructors constructor() Creates a new DisposableStack. Declaration constructor(); Properties [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string disposed Gets a value indicating whether the stack has already been disposed. Declaration get disposed(): boolean; Property Value boolean Methods [Disposable.dispose]() Dispose this object's resources. Declaration [Disposable.dispose](): void; Returns void adopt(value, onDispose) Pushes a non-disposable resource onto the stack with the provided disposal callback. Declaration adopt<T>(value: T, onDispose: (value: T) => void): T; Type Parameters T Parameters value T The resource to add. onDispose (value: T) => void The callback to execute when the resource is disposed. Returns T The resource provided. defer(onDispose) Pushes a resourceless disposal callback onto the stack. Declaration defer(onDispose: () => void): void; Parameters onDispose () => void The callback to execute when the stack is disposed. Returns void dispose() Dispose this object's resources. This method is an alias for [Disposable.dispose]() <!-- --> . const stack = new DisposableStack(); for (const f of files) stack.use(openFile(f)); ... stack.dispose(); Declaration dispose(): void; Returns void move() Moves all resources out of this DisposableStack and into a new DisposableStack and returns it. Declaration move(): DisposableStack; Returns DisposableStack use(value) Pushes a disposable resource onto the disposable stack stack. Resources are disposed in the reverse order they were entered. Declaration use<T extends Disposable | null | undefined>(value: T): T; Type Parameters T Parameters value T The resource to add. Returns T The resource provided. use(value) Declaration use<T extends () => void>(value: T): T; Type Parameters T Parameters value T Returns T use(value, onDispose) Declaration use<T>(value: T, onDispose: (value: T) => void): T; Type Parameters T Parameters value T onDispose (value: T) => void Returns T"
  },
  "api/equatable.html": {
    "href": "api/equatable.html",
    "title": "@esfx/equatable Package | @esfx API Reference",
    "keywords": "@esfx/equatable Package Provides a low level API for defining equality. Installation npm i @esfx/equatable Usage TypeScript JavaScript (CommonJS) import { Equatable, Equaler, Comparable, Comparer } from \"@esfx/equatable\"; class Person { firstName: string; lastName: string; constructor(firstName: string, lastName: string) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other: unknown) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other: unknown) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const people = [ new Person(\"Alice\", \"Johnson\"), new Person(\"Bob\", \"Clark\") ]; people.sort(Comparer.defaultComparer.compare); console.log(people); // Bob Clark,Alice Johnson const obj1 = new Person(\"Bob\", \"Clark\"); const obj2 = new Person(\"Bob\", \"Clark\"); obj1 === obj2; // false Equaler.defaultEqualer.equals(obj1, obj2); // true const { Equatable, Equaler, Comparable, Comparer } = require(\"@esfx/equatable\"); class Person { constructor(firstName, lastName) { this.firstName = firstName; this.lastName = lastName; } toString() { return `${this.firstName} ${this.lastName}`; } [Equatable.equals](other) { return other instanceof Person && this.lastName === other.lastName && this.firstName === other.firstName; } [Equatable.hash]() { return Equaler.defaultEqualer.hash(this.lastName) ^ Equaler.defaultEqualer.hash(this.firstName); } [Comparable.compareTo](other) { if (!(other instanceof Person)) throw new TypeError(); return Comparer.defaultComparer.compare(this.lastName, other.lastName) || Comparer.defaultComparer.compare(this.firstName, other.firstName); } } const people = [ new Person(\"Alice\", \"Johnson\"), new Person(\"Bob\", \"Clark\") ]; people.sort(Comparer.defaultComparer.compare); console.log(people); // Bob Clark,Alice Johnson const obj1 = new Person(\"Bob\", \"Clark\"); const obj2 = new Person(\"Bob\", \"Clark\"); obj1 === obj2; // false Equaler.defaultEqualer.equals(obj1, obj2); // true Interfaces Comparable Represents a value that can compare itself relationally with another value. Comparer<T> Represents an object that can be used to perform a relational comparison between two values. Equaler<T> Represents an object that can be used to compare the equality of two values. Equatable Represents a value that can compare its equality with another value. StructuralComparable Represents a value that can compare its structure relationally with another value. StructuralEquatable Represents a value that can compare its structural equality with another value. Functions combineHashes(x, y, rotate) Combines two hash codes. Declaration function combineHashes(x: number, y: number, rotate?: number): number; Parameters x number The first hash code. y number The second hash code. rotate number The number of bits (between 0 and 31) to left-rotate the first hash code before XOR'ing it with the second (default 7). Returns number rawHash(value) Gets the raw hashcode for a value. This bypasses any [Equatable.hash] properties on an object. Declaration export declare function rawHash(value: unknown): number; Parameters value unknown Any value. Returns number The hashcode for the value. Variables defaultComparer The default Comparer <!-- --> . Declaration defaultComparer: Comparer<unknown> defaultEqualer Gets the default Equaler <!-- --> . Declaration defaultEqualer: Equaler<unknown> structuralComparer A default Comparer that supports StructuralComparable values. Declaration structuralComparer: Comparer<unknown> structuralEqualer Gets a default Equaler that supports StructuralEquatable values. Declaration structuralEqualer: Equaler<unknown> tupleComparer A default Comparer that compares array values rather than the arrays themselves. Declaration tupleComparer: Comparer<readonly unknown[]> tupleEqualer An Equaler that compares array values rather than the arrays themselves. Declaration tupleEqualer: Equaler<readonly unknown[]> tupleStructuralComparer A default Comparer that compares array values that may be StructuralComparable rather than the arrays themselves. Declaration tupleStructuralComparer: Comparer<readonly unknown[]> Type Aliases Comparison Describes a function that can be used to compare the relational equality of two values, returning a value indicating one of the following conditions: A negative value indicates x is lesser than y <!-- --> . A positive value indicates x is greater than y <!-- --> . A zero value indicates x and y are equivalent. Declaration export declare type Comparison<T> = (x: T, y: T) => number; Type Parameters T The type of value that can be compared. EqualityComparison Describes a function that can be used to compare the equality of two values. Declaration export declare type EqualityComparison<T> = (x: T, y: T) => boolean; Type Parameters T The type of value that can be compared. HashGenerator Describes a function that can be used to compute a hash code for a value. Declaration export declare type HashGenerator<T> = (x: T) => number; Type Parameters T The type of value that can be hashed. Namespaces Comparable Utility functions and well-known symbols used to define a Comparable <!-- --> . Comparer Provides various implementations of Comparer <!-- --> . Equaler Provides various implementations of Equaler <!-- --> . Equatable Utility functions and well-known symbols used to define an Equatable <!-- --> . StructuralComparable Utility functions and well-known symbols used to define a StructuralComparable <!-- --> . StructuralEquatable Utility functions and well-known symbols used to define a StructuralEquatable <!-- --> ."
  },
  "api/equatable/comparable-interface.html": {
    "href": "api/equatable/comparable-interface.html",
    "title": "Comparable Interface | @esfx API Reference",
    "keywords": "Comparable Interface Package : @esfx/equatable Represents a value that can compare itself relationally with another value. Declaration export interface Comparable Methods [Comparable.compareTo](other) Compares this value with another value, returning a value indicating one of the following conditions: A negative value indicates this value is lesser. A positive value indicates this value is greater. A zero value indicates this value is the same. Declaration [Comparable.compareTo](other: unknown): number; Parameters other unknown The other value to compare against. Returns number A number indicating the relational comparison result."
  },
  "api/equatable/comparable-namespace.html": {
    "href": "api/equatable/comparable-namespace.html",
    "title": "Comparable Namespace | @esfx API Reference",
    "keywords": "Comparable Namespace Package : @esfx/equatable Utility functions and well-known symbols used to define a Comparable <!-- --> . Functions hasInstance(value) Determines whether a value is Comparable. Declaration function hasInstance(value: unknown): value is Comparable; Parameters value unknown The value to test. Returns value is Comparable true if the value is a Comparable; otherwise, false <!-- --> . Variables compareTo A well-known symbol used to define a relational comparison method on a value. Declaration compareTo: unique symbol name Declaration name = \"Comparable\""
  },
  "api/equatable/comparer-interface.html": {
    "href": "api/equatable/comparer-interface.html",
    "title": "Comparer<T> Interface | @esfx API Reference",
    "keywords": "Comparer<T> Interface Package : @esfx/equatable Represents an object that can be used to perform a relational comparison between two values. Declaration export interface Comparer<T> Methods compare(x, y) Compares two values, returning a value indicating one of the following conditions: A negative value indicates x is lesser than y <!-- --> . A positive value indicates x is greater than y <!-- --> . A zero value indicates x and y are equivalent. Declaration compare(x: T, y: T): number; Parameters x T The first value to compare. y T The second value to compare. Returns number A number indicating the relational comparison result."
  },
  "api/equatable/comparer-namespace.html": {
    "href": "api/equatable/comparer-namespace.html",
    "title": "Comparer Namespace | @esfx API Reference",
    "keywords": "Comparer Namespace Package : @esfx/equatable Provides various implementations of Comparer <!-- --> . Functions create(comparison) Creates a Comparer from a comparison function. Declaration function create<T>(comparison: Comparison<T>): Comparer<T>; Type Parameters T The type of value that can be compared. Parameters comparison Comparison <T> A Comparison function used to create a Comparer. Returns Comparer <T> The Comparer for the provided comparison function. hasInstance(value) Declaration function hasInstance(value: unknown): value is Comparer<unknown>; Parameters value unknown Returns value is Comparer <unknown> Variables defaultComparer The default Comparer <!-- --> . Declaration defaultComparer: Comparer<unknown> structuralComparer A default Comparer that supports StructuralComparable values. Declaration structuralComparer: Comparer<unknown> tupleComparer A default Comparer that compares array values rather than the arrays themselves. Declaration tupleComparer: Comparer<readonly unknown[]> tupleStructuralComparer A default Comparer that compares array values that may be StructuralComparable rather than the arrays themselves. Declaration tupleStructuralComparer: Comparer<readonly unknown[]>"
  },
  "api/equatable/equaler-interface.html": {
    "href": "api/equatable/equaler-interface.html",
    "title": "Equaler<T> Interface | @esfx API Reference",
    "keywords": "Equaler<T> Interface Package : @esfx/equatable Represents an object that can be used to compare the equality of two values. Declaration export interface Equaler<T> Methods equals(x, y) Tests whether two values are equal to each other. Declaration equals(x: T, y: T): boolean; Parameters x T The first value. y T The second value. Returns boolean true if the values are equal; otherwise, false <!-- --> . hash(x) Generates a hash code for a value. Declaration hash(x: T): number; Parameters x T The value to hash. Returns number The numeric hash-code for the value."
  },
  "api/equatable/equaler-namespace.html": {
    "href": "api/equatable/equaler-namespace.html",
    "title": "Equaler Namespace | @esfx API Reference",
    "keywords": "Equaler Namespace Package : @esfx/equatable Provides various implementations of Equaler <!-- --> . Functions combineHashes(x, y, rotate) Combines two hash codes. Declaration function combineHashes(x: number, y: number, rotate?: number): number; Parameters x number The first hash code. y number The second hash code. rotate number The number of bits (between 0 and 31) to left-rotate the first hash code before XOR'ing it with the second (default 7). Returns number create(equalityComparison, hashGenerator) Creates an Equaler from a comparison function and an optional hash generator. Declaration function create<T>(equalityComparison: EqualityComparison<T>, hashGenerator?: HashGenerator<T>): Equaler<T>; Type Parameters T The type of value that can be compared. Parameters equalityComparison EqualityComparison <T> A callback used to compare the equality of two values. hashGenerator HashGenerator <T> A callback used to compute a numeric hash-code for a value. Returns Equaler <T> An Equaler for the provided callbacks. hasInstance(value) Declaration function hasInstance(value: unknown): value is Equaler<unknown>; Parameters value unknown Returns value is Equaler <unknown> Variables defaultEqualer Gets the default Equaler <!-- --> . Declaration defaultEqualer: Equaler<unknown> structuralEqualer Gets a default Equaler that supports StructuralEquatable values. Declaration structuralEqualer: Equaler<unknown> tupleEqualer An Equaler that compares array values rather than the arrays themselves. Declaration tupleEqualer: Equaler<readonly unknown[]> tupleStructuralEqualer An Equaler that compares array values that may be StructuralEquatable rather than the arrays themselves. Declaration tupleStructuralEqualer: Equaler<readonly unknown[]>"
  },
  "api/equatable/equatable-interface.html": {
    "href": "api/equatable/equatable-interface.html",
    "title": "Equatable Interface | @esfx API Reference",
    "keywords": "Equatable Interface Package : @esfx/equatable Represents a value that can compare its equality with another value. Declaration export interface Equatable Methods [Equatable.equals](other) Determines whether this value is equal to another value. Declaration [Equatable.equals](other: unknown): boolean; Parameters other unknown The other value. Returns boolean true if this value is equal to other <!-- --> ; otherwise, false <!-- --> . [Equatable.hash]() Compute a hash code for an value. Declaration [Equatable.hash](): number; Returns number The numeric hash-code for the value."
  },
  "api/equatable/equatable-namespace.html": {
    "href": "api/equatable/equatable-namespace.html",
    "title": "Equatable Namespace | @esfx API Reference",
    "keywords": "Equatable Namespace Package : @esfx/equatable Utility functions and well-known symbols used to define an Equatable <!-- --> . Functions hasInstance(value) Determines whether a value is Equatable. Declaration function hasInstance(value: unknown): value is Equatable; Parameters value unknown The value to test. Returns value is Equatable true if the value is an Equatable; otherwise, false <!-- --> . Variables equals A well-known symbol used to define an equality test method on a value. Declaration equals: unique symbol hash A well-known symbol used to define a hashing method on a value. Declaration hash: unique symbol name Declaration name = \"Equatable\""
  },
  "api/equatable/structuralcomparable-interface.html": {
    "href": "api/equatable/structuralcomparable-interface.html",
    "title": "StructuralComparable Interface | @esfx API Reference",
    "keywords": "StructuralComparable Interface Package : @esfx/equatable Represents a value that can compare its structure relationally with another value. Declaration export interface StructuralComparable Methods [StructuralComparable.structuralCompareTo](other, comparer) Compares the structure of this value with another value using the supplied comparer, returning a value indicating one of the following conditions: A negative value indicates this value is lesser. A positive value indicates this value is greater. A zero value indicates this value is the same. Declaration [StructuralComparable.structuralCompareTo](other: unknown, comparer: Comparer<unknown>): number; Parameters other unknown The other value to compare against. comparer Comparer <unknown> The compare to use to compare values in the structure. Returns number A numeric value indicating the relational comparison result."
  },
  "api/equatable/structuralcomparable-namespace.html": {
    "href": "api/equatable/structuralcomparable-namespace.html",
    "title": "StructuralComparable Namespace | @esfx API Reference",
    "keywords": "StructuralComparable Namespace Package : @esfx/equatable Utility functions and well-known symbols used to define a StructuralComparable <!-- --> . Functions hasInstance(value) Determines whether a value is StructuralComparable. Declaration function hasInstance(value: unknown): value is StructuralComparable; Parameters value unknown The value to test. Returns value is StructuralComparable true if the value is StructuralComparable; otherwise, false <!-- --> . Variables name Declaration name = \"StructuralComparable\" structuralCompareTo A well-known symbol used to define a structural comparison method on a value. Declaration structuralCompareTo: unique symbol"
  },
  "api/equatable/structuralequatable-interface.html": {
    "href": "api/equatable/structuralequatable-interface.html",
    "title": "StructuralEquatable Interface | @esfx API Reference",
    "keywords": "StructuralEquatable Interface Package : @esfx/equatable Represents a value that can compare its structural equality with another value. Declaration export interface StructuralEquatable Methods [StructuralEquatable.structuralEquals](other, equaler) Determines whether this value is structurally equal to another value using the supplied Equaler <!-- --> . Declaration [StructuralEquatable.structuralEquals](other: unknown, equaler: Equaler<unknown>): boolean; Parameters other unknown The other value. equaler Equaler <unknown> The Equaler to use to test equality. Returns boolean true if this value is structurally equal to other <!-- --> ; otherwise, false <!-- --> . [StructuralEquatable.structuralHash](equaler) Compute a structural hash code for a value using the supplied Equaler <!-- --> . Declaration [StructuralEquatable.structuralHash](equaler: Equaler<unknown>): number; Parameters equaler Equaler <unknown> The Equaler to use to generate hashes for values in the structure. Returns number The numeric hash-code of the structure."
  },
  "api/equatable/structuralequatable-namespace.html": {
    "href": "api/equatable/structuralequatable-namespace.html",
    "title": "StructuralEquatable Namespace | @esfx API Reference",
    "keywords": "StructuralEquatable Namespace Package : @esfx/equatable Utility functions and well-known symbols used to define a StructuralEquatable <!-- --> . Functions hasInstance(value) Determines whether a value is StructuralEquatable. Declaration function hasInstance(value: unknown): value is StructuralEquatable; Parameters value unknown The value to test. Returns value is StructuralEquatable true if the value is StructuralEquatable; otherwise, false <!-- --> . Variables name Declaration name = \"StructuralEquatable\" structuralEquals A well-known symbol used to define a structural equality test method on a value. Declaration structuralEquals: unique symbol structuralHash A well-known symbol used to define a structural hashing method on a value. Declaration structuralHash: unique symbol"
  },
  "api/equatable-shim.html": {
    "href": "api/equatable-shim.html",
    "title": "@esfx/equatable-shim Package | @esfx API Reference",
    "keywords": "@esfx/equatable-shim Package Provides a global shim that adds @esfx/equatable functionality to various ECMAScript built-ins. Installation npm i @esfx/equatable-shim Usage The global shim adds a default implementation of Equatable to Object.prototype and default implementations of Comparable to String.prototype , Number.prototype , Boolean.prototype , and BigInt.prototype . To install the global shim, import @esfx/equatable-shim : TypeScript JavaScript (CommonJS) import \"@esfx/equatable-shim\"; // triggers global-scope side effects import { Equatable } from \"@esfx/equatable\"; 123[Equatable.hash]() // 123 require(\"@esfx/equatable-shim\"); // triggers global-scope side effects const { Equatable } = require(\"@esfx/equatable\"); 123[Equatable.hash]() // 123"
  },
  "api/events.html": {
    "href": "api/events.html",
    "title": "@esfx/events Package | @esfx API Reference",
    "keywords": "@esfx/events Package Provides a low-level API for defining events. Installation npm i @esfx/events Usage TypeScript JavaScript (CommonJS) import { Event } from \"@esfx/events\"; class MyService { private _loadedEvent = Event.create<(this: MyService) => void>(this); readonly loadedEvent = this._loadedEvent.event; load() { // ... this._loadedEvent.emit(); } } const svc = new MyService(); svc.loadedEvent.on(() => console.log(\"loaded\")); svc.load(); const { Event } = require(\"@esfx/events\"); class MyService { constructor() { this._loadedEvent = Event.create(this); this.loadedEvent = this._loadedEvent.event; } load() { // ... this._loadedEvent.emit(); } } // Use const svc = new MyService(); svc.loadedEvent.on(() => console.log(\"loaded\")); svc.load(); Classes Event EventSource EventSubscription Interfaces Event<F> Type Aliases EventListener Declaration export declare type EventListener<F extends (...args: any[]) => void> = (this: ThisParameterType<F>, ...args: Parameters<F>) => void; Type Parameters F EventOwner Declaration export declare type EventOwner<F extends (...args: any[]) => void> = ThisParameterType<F> extends undefined ? void : ThisParameterType<F>; Type Parameters F"
  },
  "api/events/event-class.html": {
    "href": "api/events/event-class.html",
    "title": "Event Class | @esfx API Reference",
    "keywords": "Event Class Package : @esfx/events Declaration export declare class Event<F extends (...args: any[]) => void> Properties count Declaration get count(): number; Property Value number owner Declaration get owner(): ThisParameterType<F>; Property Value ThisParameterType <F> Methods addListener(listener) Declaration addListener(listener: EventListener<F>): EventOwner<F>; Parameters listener EventListener <F> Returns EventOwner <F> create() Declaration static create<F extends (this: undefined, ...args: any[]) => void>(): EventSource<F>; Type Parameters F Returns EventSource <F> create(owner) Declaration static create<F extends (...args: any[]) => void>(owner: ThisParameterType<F>): EventSource<F>; Type Parameters F Parameters owner ThisParameterType <F> Returns EventSource <F> listeners() Declaration listeners(): IterableIterator<EventListener<F>>; Returns IterableIterator < EventListener <F>> off(listener) Declaration off(listener: EventListener<F>): EventOwner<F>; Parameters listener EventListener <F> Returns EventOwner <F> on(listener) Declaration on(listener: EventListener<F>): EventOwner<F>; Parameters listener EventListener <F> Returns EventOwner <F> once(listener) Declaration once(listener: EventListener<F>): EventOwner<F>; Parameters listener EventListener <F> Returns EventOwner <F> prependListener(listener) Declaration prependListener(listener: EventListener<F>): EventOwner<F>; Parameters listener EventListener <F> Returns EventOwner <F> prependOnceListener(listener) Declaration prependOnceListener(listener: EventListener<F>): EventOwner<F>; Parameters listener EventListener <F> Returns EventOwner <F> rawListeners() Declaration rawListeners(): IterableIterator<EventListener<F>>; Returns IterableIterator < EventListener <F>> removeAllListeners() Declaration removeAllListeners(): EventOwner<F>; Returns EventOwner <F> removeListener(listener) Declaration removeListener(listener: EventListener<F>): EventOwner<F>; Parameters listener EventListener <F> Returns EventOwner <F> subscribe(listener, options) Declaration subscribe(listener: EventListener<F>, options?: { once?: boolean; prepend?: boolean; }): EventSubscription<ThisParameterType<F>>; Parameters listener EventListener <F> options { once?: boolean; prepend?: boolean; } Returns EventSubscription < ThisParameterType <F>>"
  },
  "api/events/event-interface.html": {
    "href": "api/events/event-interface.html",
    "title": "Event<F> Interface | @esfx API Reference",
    "keywords": "Event<F> Interface Package : @esfx/events Declaration export interface Event<F extends (...args: any[]) => void> extends Function Inheritance Function Event<F>"
  },
  "api/events/eventsource.html": {
    "href": "api/events/eventsource.html",
    "title": "EventSource Class | @esfx API Reference",
    "keywords": "EventSource Class Package : @esfx/events Declaration export declare class EventSource<F extends (...args: any[]) => void> Properties event Gets the Event raised by this source. Declaration get event(): Event<F>; Property Value Event <F> owner Gets the owner of the Event . Declaration get owner(): ThisParameterType<F>; Property Value ThisParameterType <F> Methods emit(args) Emits the linked Event for this source. Declaration emit(...args: Parameters<F>): boolean; Parameters args Parameters <F> The arguments for th eevent. Returns boolean true if there were any listeners for the event; otherwise, false <!-- --> ."
  },
  "api/events/eventsubscription.html": {
    "href": "api/events/eventsubscription.html",
    "title": "EventSubscription Class | @esfx API Reference",
    "keywords": "EventSubscription Class Package : @esfx/events Declaration export declare class EventSubscription<TOwner> implements Disposable Methods [Disposable.dispose]() Declaration [Disposable.dispose](): void; Returns void"
  },
  "api/fn.html": {
    "href": "api/fn.html",
    "title": "@esfx/fn Package | @esfx API Reference",
    "keywords": "@esfx/fn Package Common utility functions. Installation npm i @esfx/fn Classes DefaultMemoizeCache The default implementation of a MemoizeCache<A, T> , as used by memoize(factory, options) . Non-primitive keys have a lifetime scoped to both the life of the key (using a WeakMap <!-- --> ) and the life of the cache. Results associated with a non-primitive key can be garbage collected if the key is garbage collected. Primitive keys have a lifetime scoped to the life of the cache, so results associated with a primitive key can only be garbage collected if the cache is garbage collected. Interfaces MemoizeCache<A, T> Describes the minimum implementation of a cache for memoize(factory, options) . MemoizeCacheEntry<T> Describes the minimum implementation of a cache entry for a MemoizeCache<A, T> . MemoizeCacheFulfilledResult<T> Describes a cache result that has a value. MemoizeCacheRejectedResult Describes a cache result that has an exception. MemoizeOptions<A, T> Functions allocator() Returns a function that constructs an instance from a constructor provided as its first argument. const fn = allocator(\"Bob\"); class Person { constructor(name) { this.name = name; } } class Dog { constructor(owner) { this.owner = owner; } } fn(Person).name; // \"Bob\" fn(Dog).owner; // \"Bob\" Declaration export declare function allocator(): <R, A extends unknown[]>(ctor: new (...args: A) => R, ...args: A) => R; Returns <R, A extends unknown[]>(ctor: new (...args: A) => R, ...args: A) => R allocator(a0) Declaration export declare function allocator<A0>(a0: A0): <R, A extends unknown[]>(ctor: new (a0: A0, ...args: A) => R, ...args: A) => R; Type Parameters A0 Parameters a0 A0 Returns <R, A extends unknown[]>(ctor: new (a0: A0, ...args: A) => R, ...args: A) => R allocator(a0, a1) Declaration export declare function allocator<A0, A1>(a0: A0, a1: A1): <R, A extends unknown[]>(ctor: new (a0: A0, a1: A1, ...args: A) => R, ...args: A) => R; Type Parameters A0 A1 Parameters a0 A0 a1 A1 Returns <R, A extends unknown[]>(ctor: new (a0: A0, a1: A1, ...args: A) => R, ...args: A) => R allocator(a0, a1, a2) Declaration export declare function allocator<A0, A1, A2>(a0: A0, a1: A1, a2: A2): <R, A extends unknown[]>(ctor: new (a0: A0, a1: A1, a2: A2, ...args: A) => R, ...args: A) => R; Type Parameters A0 A1 A2 Parameters a0 A0 a1 A1 a2 A2 Returns <R, A extends unknown[]>(ctor: new (a0: A0, a1: A1, a2: A2, ...args: A) => R, ...args: A) => R allocator(a0, a1, a2, a3) Declaration export declare function allocator<A0, A1, A2, A3>(a0: A0, a1: A1, a2: A2, a3: A3): <R, A extends unknown[]>(ctor: new (a0: A0, a1: A1, a2: A2, a3: A3, ...args: A) => R, ...args: A) => R; Type Parameters A0 A1 A2 A3 Parameters a0 A0 a1 A1 a2 A2 a3 A3 Returns <R, A extends unknown[]>(ctor: new (a0: A0, a1: A1, a2: A2, a3: A3, ...args: A) => R, ...args: A) => R allocator(args) Declaration export declare function allocator<A extends unknown[]>(...args: A): <R>(ctor: new (...args: A) => R) => R; Type Parameters A Parameters args A Returns <R>(ctor: new (...args: A) => R) => R allocator(args) Declaration export declare function allocator<AX>(...args: AX[]): <R>(ctor: new (...args: AX[]) => R, ...args: AX[]) => R; Type Parameters AX Parameters args AX[] Returns <R>(ctor: new (...args: AX[]) => R, ...args: AX[]) => R always(value) Returns a function that returns the provided value. Declaration export declare function always<T>(value: T): () => T; Type Parameters T Parameters value T Returns () => T alwaysFail(error) Returns a function that always throws the provided error. Declaration export declare function alwaysFail(error: unknown): () => never; Parameters error unknown Returns () => never alwaysFalse() A function that always returns false <!-- --> . Declaration export declare function alwaysFalse(): false; Returns false alwaysTrue() A function that always returns true <!-- --> . Declaration export declare function alwaysTrue(): true; Returns true both(a, b) Returns a function that returns the result of calling its first argument if that result is \"falsy\", otherwise returning the result of calling its second argument. NOTE: This performs the same shortcutting as a logical AND (i.e. a() && b() <!-- --> ) Declaration export declare function both<T, U extends T, V extends T>(a: (t: T) => t is U, b: (t: T) => t is V): (t: T) => t is U & V; Type Parameters T U V Parameters a (t: T) => t is U b (t: T) => t is V Returns (t: T) => t is U & V both(a, b) Declaration export declare function both<A extends unknown[], R1, R2>(a: (...args: A) => R1, b: (...args: A) => R2): (...args: A) => R1 extends (null | undefined | false | 0 | 0n | '') ? R1 : R2 extends (null | undefined | false | 0 | 0n | '') ? R2 : R1 | R2; Type Parameters A R1 R2 Parameters a (...args: A) => R1 b (...args: A) => R2 Returns (...args: A) => R1 extends (null | undefined | false | 0 | 0n | '') ? R1 : R2 extends (null | undefined | false | 0 | 0n | '') ? R2 : R1 | R2 caller() Returns a function that calls the function provided as its first argument. const fn = caller(1, 2); fn((a, b) => a + b); // 3 Declaration export declare function caller(): <R, A extends unknown[]>(func: (...args: A) => R, ...args: A) => R; Returns <R, A extends unknown[]>(func: (...args: A) => R, ...args: A) => R caller(a0) Declaration export declare function caller<A0>(a0: A0): <R, A extends unknown[]>(func: (a0: A0, ...args: A) => R, ...args: A) => R; Type Parameters A0 Parameters a0 A0 Returns <R, A extends unknown[]>(func: (a0: A0, ...args: A) => R, ...args: A) => R caller(a0, a1) Declaration export declare function caller<A0, A1>(a0: A0, a1: A1): <R, A extends unknown[]>(func: (a0: A0, a1: A1, ...args: A) => R, ...args: A) => R; Type Parameters A0 A1 Parameters a0 A0 a1 A1 Returns <R, A extends unknown[]>(func: (a0: A0, a1: A1, ...args: A) => R, ...args: A) => R caller(a0, a1, a2) Declaration export declare function caller<A0, A1, A2>(a0: A0, a1: A1, a2: A2): <R, A extends unknown[]>(func: (a0: A0, a1: A1, a2: A2, ...args: A) => R, ...args: A) => R; Type Parameters A0 A1 A2 Parameters a0 A0 a1 A1 a2 A2 Returns <R, A extends unknown[]>(func: (a0: A0, a1: A1, a2: A2, ...args: A) => R, ...args: A) => R caller(a0, a1, a2, a3) Declaration export declare function caller<A0, A1, A2, A3>(a0: A0, a1: A1, a2: A2, a3: A3): <R, A extends unknown[]>(func: (a0: A0, a1: A1, a2: A2, a3: A3, ...args: A) => R, ...args: A) => R; Type Parameters A0 A1 A2 A3 Parameters a0 A0 a1 A1 a2 A2 a3 A3 Returns <R, A extends unknown[]>(func: (a0: A0, a1: A1, a2: A2, a3: A3, ...args: A) => R, ...args: A) => R caller(args) Declaration export declare function caller<A extends unknown[]>(...args: A): <R>(func: (...args: A) => R) => R; Type Parameters A Parameters args A Returns <R>(func: (...args: A) => R) => R caller(args) Declaration export declare function caller<AX>(...args: AX[]): <R>(func: (...args: AX[]) => R, ...args: AX[]) => R; Type Parameters AX Parameters args AX[] Returns <R>(func: (...args: AX[]) => R, ...args: AX[]) => R clamp(min, max) Clamps a value to a set range using the default Comparer <!-- --> . const fn = clamp(0, 10); fn(-1); // 0 fn(15); // 10 fn(7); // 7 Declaration export declare function clamp<T>(min: T, max: T): (value: T) => T; Type Parameters T Parameters min T max T Returns (value: T) => T compare(a, b) Compares two values using the default Comparer <!-- --> . Declaration export declare function compare<T>(a: T, b: T): number; Type Parameters T Parameters a T b T Returns number complement(f) Returns a function that returns the complement of calling f <!-- --> . alwaysTrue(); // true complement(alwaysTrue)(); // false alwaysFalse(); // false complement(alwaysFalse)(); // true Declaration export declare function complement<A extends unknown[]>(f: (...args: A) => boolean): (...args: A) => boolean; Type Parameters A Parameters f (...args: A) => boolean Returns (...args: A) => boolean compose(fb, fa) Right-to-left composition of functions (i.e. compose(g, f) is x => g(f(x)) <!-- --> ). Declaration export declare function compose<A extends unknown[], B, C>(fb: (b: B) => C, fa: (...a: A) => B): (...a: A) => C; Type Parameters A B C Parameters fb (b: B) => C fa (...a: A) => B Returns (...a: A) => C compose(fc, fb, fa) Declaration export declare function compose<A extends unknown[], B, C, D>(fc: (c: C) => D, fb: (b: B) => C, fa: (...a: A) => B): (...a: A) => D; Type Parameters A B C D Parameters fc (c: C) => D fb (b: B) => C fa (...a: A) => B Returns (...a: A) => D compose(fd, fc, fb, fa) Declaration export declare function compose<A extends unknown[], B, C, D, E>(fd: (d: D) => E, fc: (c: C) => D, fb: (b: B) => C, fa: (...a: A) => B): (...a: A) => E; Type Parameters A B C D E Parameters fd (d: D) => E fc (c: C) => D fb (b: B) => C fa (...a: A) => B Returns (...a: A) => E compose(fe, fd, fc, fb, fa) Declaration export declare function compose<A extends unknown[], B, C, D, E, F>(fe: (e: E) => F, fd: (d: D) => E, fc: (c: C) => D, fb: (b: B) => C, fa: (...a: A) => B): (...a: A) => F; Type Parameters A B C D E F Parameters fe (e: E) => F fd (d: D) => E fc (c: C) => D fb (b: B) => C fa (...a: A) => B Returns (...a: A) => F compose(rest) Declaration export declare function compose<T>(...rest: ((t: T) => T)[]): (t: T) => T; Type Parameters T Parameters rest ((t: T) => T)[] Returns (t: T) => T decrementer(start) Returns a function that produces a monotonically increasing number value each time it is called. Declaration export declare function decrementer(start?: number): () => number; Parameters start number Returns () => number either(a, b) Returns a function that returns the result of calling its first argument if that result is \"truthy\", otherwise returning the result of calling its second argument. NOTE: This performs the same shortcutting as a logical OR (i.e. a() || b() <!-- --> ). Declaration export declare function either<T, U extends T, V extends T>(a: (t: T) => t is U, b: (t: T) => t is V): (t: T) => t is U | V; Type Parameters T U V Parameters a (t: T) => t is U b (t: T) => t is V Returns (t: T) => t is U | V either(a, b) Declaration export declare function either<A extends unknown[], R1, R2>(a: (...args: A) => R1, b: (...args: A) => R2): (...args: A) => R1 extends (null | undefined | false | 0 | 0n | '') ? R2 : R1; Type Parameters A R1 R2 Parameters a (...args: A) => R1 b (...args: A) => R2 Returns (...args: A) => R1 extends (null | undefined | false | 0 | 0n | '') ? R2 : R1 equate(a, b) Equates two values using the default Equaler <!-- --> . Declaration export declare function equate<T>(a: T, b: T): boolean; Type Parameters T Parameters a T b T Returns boolean factory(ctor) Returns a function that constructs an instance of the provided constructor. class Point { constructor(x, y) { this.x = x; this.y = y; } } const fn = factory(Point); fn(1, 2); // Point { x: 1, y: 2 } fn(3, 4); // Point { x: 3, y: 4 } Declaration export declare function factory<A extends unknown[], R>(ctor: new (...args: A) => R): (...args: A) => R; Type Parameters A R Parameters ctor new (...args: A) => R Returns (...args: A) => R factory(ctor, a0) Declaration export declare function factory<A0, A extends unknown[], R>(ctor: new (a0: A0, ...args: A) => R, a0: A0): (...args: A) => R; Type Parameters A0 A R Parameters ctor new (a0: A0, ...args: A) => R a0 A0 Returns (...args: A) => R factory(ctor, a0, a1) Declaration export declare function factory<A0, A1, A extends unknown[], R>(ctor: new (a0: A0, a1: A1, ...args: A) => R, a0: A0, a1: A1): (...args: A) => R; Type Parameters A0 A1 A R Parameters ctor new (a0: A0, a1: A1, ...args: A) => R a0 A0 a1 A1 Returns (...args: A) => R factory(ctor, a0, a1, a2) Declaration export declare function factory<A0, A1, A2, A extends unknown[], R>(ctor: new (a0: A0, a1: A1, a2: A2, ...args: A) => R, a0: A0, a1: A1, a2: A2): (...args: A) => R; Type Parameters A0 A1 A2 A R Parameters ctor new (a0: A0, a1: A1, a2: A2, ...args: A) => R a0 A0 a1 A1 a2 A2 Returns (...args: A) => R factory(ctor, a0, a1, a2, a3) Declaration export declare function factory<A0, A1, A2, A3, A extends unknown[], R>(ctor: new (a0: A0, a1: A1, a2: A2, a3: A3, ...args: A) => R, a0: A0, a1: A1, a2: A2, a3: A3): (...args: A) => R; Type Parameters A0 A1 A2 A3 A R Parameters ctor new (a0: A0, a1: A1, a2: A2, a3: A3, ...args: A) => R a0 A0 a1 A1 a2 A2 a3 A3 Returns (...args: A) => R factory(ctor, args) Declaration export declare function factory<A extends unknown[], R>(ctor: new (...args: A) => R, ...args: A): () => R; Type Parameters A R Parameters ctor new (...args: A) => R args A Returns () => R factory(ctor, args) Declaration export declare function factory<AX, R>(ctor: new (...args: AX[]) => R, ...args: AX[]): (...args: AX[]) => R; Type Parameters AX R Parameters ctor new (...args: AX[]) => R args AX[] Returns (...args: AX[]) => R fail_2(value) Throws the provided value. Declaration export declare function fail(value: unknown): never; Parameters value unknown Returns never fallback(a, b) Returns a function that returns the result of calling the first callback, if that result is neither null nor undefined <!-- --> ; otherwise, returns the result of calling the second callback with the same arguments. NOTE: This performs the same shortcutting as nullish-coalesce (i.e. a() ?? b() <!-- --> ). Declaration export declare function fallback<A extends unknown[], T, U>(a: (...args: A) => T, b: (...args: A) => U): (...args: A) => NonNullable<T> | U; Type Parameters A T U Parameters a (...args: A) => T b (...args: A) => U Returns (...args: A) => NonNullable <T> | U flip(f) Returns a function that calls the provided function, but swaps the first and second arguments. function compareNumbers(a, b) { return a - b }; [3, 1, 2].sort(compareNumbers); // [1, 2, 3] [3, 1, 2].sort(flip(compareNumbers)); // [3, 2, 1] Declaration export declare function flip<A, B, C extends unknown[], R>(f: (a: A, b: B, ...c: C) => R): (b: B, a: A, ...c: C) => R; Type Parameters A B C R Parameters f (a: A, b: B, ...c: C) => R Returns (b: B, a: A, ...c: C) => R hash(value) Generates a hashcode from a value. Declaration export declare function hash(value: unknown): number; Parameters value unknown Returns number identity(value) Returns the provided value. Declaration export declare function identity<T>(value: T): T; Type Parameters T Parameters value T Returns T incrementer(start) Returns a function that produces a monotonically increasing number value each time it is called. Declaration export declare function incrementer(start?: number): () => number; Parameters start number Returns () => number invoker(key) Returns a function that invokes a method on the object provided as the function's first argument. const fn = invoker(\"sayHello\", \"Bob\"); fn({ sayHello(name) { console.log(`Hello, ${name}!`); } }); // prints: \"Hello, Bob!\" Declaration export declare function invoker<K extends PropertyKey>(key: K): <T extends Record<K, (...args: A) => ReturnType<T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType<T[K]>; Type Parameters K Parameters key K Returns <T extends Record <K, (...args: A) => ReturnType <T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType <T[K]> invoker(key, a0) Declaration export declare function invoker<K extends PropertyKey, A0>(key: K, a0: A0): <T extends Record<K, (a0: A0, ...args: A) => ReturnType<T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType<T[K]>; Type Parameters K A0 Parameters key K a0 A0 Returns <T extends Record <K, (a0: A0, ...args: A) => ReturnType <T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType <T[K]> invoker(key, a0, a1) Declaration export declare function invoker<K extends PropertyKey, A0, A1>(key: K, a0: A0, a1: A1): <T extends Record<K, (a0: A0, a1: A1, ...args: A) => ReturnType<T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType<T[K]>; Type Parameters K A0 A1 Parameters key K a0 A0 a1 A1 Returns <T extends Record <K, (a0: A0, a1: A1, ...args: A) => ReturnType <T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType <T[K]> invoker(key, a0, a1, a2) Declaration export declare function invoker<K extends PropertyKey, A0, A1, A2>(key: K, a0: A0, a1: A1, a2: A2): <T extends Record<K, (a0: A0, a1: A1, a2: A2, ...args: A) => ReturnType<T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType<T[K]>; Type Parameters K A0 A1 A2 Parameters key K a0 A0 a1 A1 a2 A2 Returns <T extends Record <K, (a0: A0, a1: A1, a2: A2, ...args: A) => ReturnType <T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType <T[K]> invoker(key, a0, a1, a2, a3) Declaration export declare function invoker<K extends PropertyKey, A0, A1, A2, A3>(key: K, a0: A0, a1: A1, a2: A2, a3: A3): <T extends Record<K, (a0: A0, a1: A1, a2: A2, a3: A3, ...args: A) => ReturnType<T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType<T[K]>; Type Parameters K A0 A1 A2 A3 Parameters key K a0 A0 a1 A1 a2 A2 a3 A3 Returns <T extends Record <K, (a0: A0, a1: A1, a2: A2, a3: A3, ...args: A) => ReturnType <T[K]>>, A extends unknown[]>(object: T, ...args: A) => ReturnType <T[K]> invoker(key, args) Declaration export declare function invoker<K extends PropertyKey, A extends unknown[]>(key: K, ...args: A): <T extends Record<K, (...args: A) => ReturnType<T[K]>>>(object: T) => ReturnType<T[K]>; Type Parameters K A Parameters key K args A Returns <T extends Record <K, (...args: A) => ReturnType <T[K]>>>(object: T) => ReturnType <T[K]> invoker(key, args) Declaration export declare function invoker<K extends PropertyKey, AX>(key: K, ...args: AX[]): <T extends Record<K, (...args: AX[]) => ReturnType<T[K]>>>(object: T, ...args: AX[]) => ReturnType<T[K]>; Type Parameters K AX Parameters key K args AX[] Returns <T extends Record <K, (...args: AX[]) => ReturnType <T[K]>>>(object: T, ...args: AX[]) => ReturnType <T[K]> isDefined(value) Returns true if a value is neither null nor undefined <!-- --> . Declaration export declare function isDefined<T>(value: T): value is NonNullable<T>; Type Parameters T Parameters value T Returns value is NonNullable <T> lazy(factory, args) Returns a function that will evaluate once when called and will subsequently always return the same result. let count = 0; const fn = lazy(() => count++); fn(); // 0 fn(); // 0 count; // 1 Declaration export declare function lazy<A extends unknown[], T>(factory: (...args: A) => T, ...args: A): () => T; Type Parameters A T Parameters factory (...args: A) => T args A Returns () => T memoize(factory, options) Memoize a callback. An invocation for a memoized function will only evaluate once for the same argument list. You can control caching behavior for memoize by passing a custom cache object. The default cache behavior is provided by DefaultMemoizeCache . Declaration export declare function memoize<A extends unknown[], T>(factory: (...args: A) => T, options?: MemoizeOptions<A, T>): (...args: A) => T; Type Parameters A T Parameters factory (...args: A) => T The callback function to evaluate. options MemoizeOptions <A, T> Options that control caching behavior. Returns (...args: A) => T The memoized function. nAry(f, length) Truncates a function's arguments to a fixed length. Declaration export declare function nAry<T, R>(f: (this: T) => R, length: 0): (this: T) => R; Type Parameters T R Parameters f (this: T) => R length 0 Returns (this: T) => R nAry(f, length) Declaration export declare function nAry<T, A, R>(f: (this: T, a: A) => R, length: 1): (this: T, a: A) => R; Type Parameters T A R Parameters f (this: T, a: A) => R length 1 Returns (this: T, a: A) => R nAry(f, length) Declaration export declare function nAry<T, A, B, R>(f: (this: T, a: A, b: B) => R, length: 2): (this: T, a: A, b: B) => R; Type Parameters T A B R Parameters f (this: T, a: A, b: B) => R length 2 Returns (this: T, a: A, b: B) => R nAry(f, length) Declaration export declare function nAry<T, A, B, C, R>(f: (this: T, a: A, b: B, c: C) => R, length: 3): (this: T, a: A, b: B, c: C) => R; Type Parameters T A B C R Parameters f (this: T, a: A, b: B, c: C) => R length 3 Returns (this: T, a: A, b: B, c: C) => R nAry(f, length) Declaration export declare function nAry<T, A, B, C, D, R>(f: (this: T, a: A, b: B, c: C, d: D) => R, length: 4): (this: T, a: A, b: B, c: C, d: D) => R; Type Parameters T A B C D R Parameters f (this: T, a: A, b: B, c: C, d: D) => R length 4 Returns (this: T, a: A, b: B, c: C, d: D) => R noop(args) Does nothing. Declaration export declare function noop(...args: any[]): unknown; Parameters args any[] Returns unknown pipe(fa, fb) Left-to-right composition of functions (i.e. pipe(g, f) is x => f(g(x)) <!-- --> ). Declaration export declare function pipe<A extends unknown[], B, C>(fa: (...a: A) => B, fb: (b: B) => C): (...a: A) => C; Type Parameters A B C Parameters fa (...a: A) => B fb (b: B) => C Returns (...a: A) => C pipe(fa, fb, fc) Declaration export declare function pipe<A extends unknown[], B, C, D>(fa: (...a: A) => B, fb: (b: B) => C, fc: (c: C) => D): (...a: A) => D; Type Parameters A B C D Parameters fa (...a: A) => B fb (b: B) => C fc (c: C) => D Returns (...a: A) => D pipe(fa, fb, fc, fd) Declaration export declare function pipe<A extends unknown[], B, C, D, E>(fa: (...a: A) => B, fb: (b: B) => C, fc: (c: C) => D, fd: (d: D) => E): (...a: A) => E; Type Parameters A B C D E Parameters fa (...a: A) => B fb (b: B) => C fc (c: C) => D fd (d: D) => E Returns (...a: A) => E pipe(fa, fb, fc, fd, fe) Declaration export declare function pipe<A extends unknown[], B, C, D, E, F>(fa: (...a: A) => B, fb: (b: B) => C, fc: (c: C) => D, fd: (d: D) => E, fe: (e: E) => F): (...a: A) => F; Type Parameters A B C D E F Parameters fa (...a: A) => B fb (b: B) => C fc (c: C) => D fd (d: D) => E fe (e: E) => F Returns (...a: A) => F pipe(first, rest) Declaration export declare function pipe<A extends unknown[], B>(first: (...a: A) => B, ...rest: ((b: B) => B)[]): (...a: A) => B; Type Parameters A B Parameters first (...a: A) => B rest ((b: B) => B)[] Returns (...a: A) => B property(key) Returns a function that reads the value of a property from an object provided as the function's first argument. Declaration export declare function property<K extends PropertyKey>(key: K): <T extends Record<K, T[K]>>(object: T) => T[K]; Type Parameters K Parameters key K The key for the property. Returns <T extends Record <K, T[K]>>(object: T) => T[K] propertyWriter(key) Returns a function that writes a value to a property on an object provided as the function's first argument. Declaration export declare function propertyWriter<K extends PropertyKey>(key: K): <T extends Record<K, T[K]>>(object: T, value: T[K]) => void; Type Parameters K Parameters key K The key for the property. Returns <T extends Record <K, T[K]>>(object: T, value: T[K]) => void tuple(args) Makes a \"tuple\" from the provided arguments. Declaration export declare function tuple<A extends readonly unknown[]>(...args: A): A; Type Parameters A Parameters args A Returns A uncurryThis(f) Returns a function whose first argument is passed as the this receiver to the provided function when called. const hasOwn = uncurryThis(Object.prototype.hasOwnProperty); const obj = { x: 1 }; hasOwn(obj, \"x\"); // true hasOwn(obj, \"y\"); // false Declaration export declare function uncurryThis<T, A extends unknown[], R>(f: (this: T, ...args: A) => R): (this_: T, ...args: A) => R; Type Parameters T A R Parameters f (this: T, ...args: A) => R Returns (this_: T, ...args: A) => R Type Aliases MemoizeCacheSettledResult Describes a cache result. Declaration export declare type MemoizeCacheSettledResult<T> = MemoizeCacheFulfilledResult<T> | MemoizeCacheRejectedResult; Type Parameters T Namespaces clamp compare decrementer equate hash incrementer Op Op.ge Op.gt Op.le Op.lt Op.max Op.maxBy Op.min Op.minBy Op.req Op.rne"
  },
  "api/fn/clamp-namespace.html": {
    "href": "api/fn/clamp-namespace.html",
    "title": "clamp Namespace | @esfx API Reference",
    "keywords": "clamp Namespace Package : @esfx/fn Functions withComparer(comparer, allowNullishValues) Creates a copy of clamp for a specific Comparer <!-- --> . Declaration function withComparer<T>(comparer: Comparer<T>, allowNullishValues: true): (min: T, max: T) => (value: T) => T; Type Parameters T Parameters comparer Comparer <T> allowNullishValues true Returns (min: T, max: T) => (value: T) => T withComparer(comparer, allowNullishValues) Creates a copy of clamp for a specific Comparer <!-- --> . Declaration function withComparer<T>(comparer: Comparer<T>, allowNullishValues?: boolean): (min: T, max: T) => (value: T) => T; Type Parameters T Parameters comparer Comparer <T> allowNullishValues boolean Returns (min: T, max: T) => (value: T) => T"
  },
  "api/fn/compare-namespace.html": {
    "href": "api/fn/compare-namespace.html",
    "title": "compare Namespace | @esfx API Reference",
    "keywords": "compare Namespace Package : @esfx/fn Functions withComparer(comparer, allowNullishValues) Creates a copy of compare for a specific Comparer <!-- --> . Declaration function withComparer<T>(comparer: Comparer<T>, allowNullishValues: true): (a: T | null | undefined, b: T | null | undefined) => number; Type Parameters T Parameters comparer Comparer <T> allowNullishValues true Returns (a: T | null | undefined, b: T | null | undefined) => number withComparer(comparer, allowNullishValues) Creates a copy of compare for a specific Comparer <!-- --> . Declaration function withComparer<T>(comparer: Comparer<T>, allowNullishValues?: boolean): (a: T, b: T) => number; Type Parameters T Parameters comparer Comparer <T> allowNullishValues boolean Returns (a: T, b: T) => number"
  },
  "api/fn/decrementer-namespace.html": {
    "href": "api/fn/decrementer-namespace.html",
    "title": "decrementer Namespace | @esfx API Reference",
    "keywords": "decrementer Namespace Package : @esfx/fn Functions step(count, start) Returns a function that produces a monotonically decreasing number value each time it is called. Declaration function step(count: number, start?: number): () => number; Parameters count number start number Returns () => number"
  },
  "api/fn/defaultmemoizecache.html": {
    "href": "api/fn/defaultmemoizecache.html",
    "title": "DefaultMemoizeCache Class | @esfx API Reference",
    "keywords": "DefaultMemoizeCache Class Package : @esfx/fn The default implementation of a MemoizeCache<A, T> , as used by memoize(factory, options) . Non-primitive keys have a lifetime scoped to both the life of the key (using a WeakMap <!-- --> ) and the life of the cache. Results associated with a non-primitive key can be garbage collected if the key is garbage collected. Primitive keys have a lifetime scoped to the life of the cache, so results associated with a primitive key can only be garbage collected if the cache is garbage collected. Declaration export declare class DefaultMemoizeCache<A extends unknown[], T> implements MemoizeCache<A, T> Methods clear() Clears the cache. Declaration clear(): void; Returns void get(args) Gets or creates a cache entry for the provided sequence of arguments. Declaration get(args: Readonly<A>): MemoizeCacheEntry<T>; Parameters args Readonly <A> Returns MemoizeCacheEntry <T> has(args) Tests whether the cache has a result for the provided sequence of arguments. Declaration has(args: Readonly<A>): boolean; Parameters args Readonly <A> Returns boolean"
  },
  "api/fn/equate-namespace.html": {
    "href": "api/fn/equate-namespace.html",
    "title": "equate Namespace | @esfx API Reference",
    "keywords": "equate Namespace Package : @esfx/fn Functions withEqualer(equaler, allowNullishValues) Creates a copy of equate for a specific Equaler <!-- --> . Declaration function withEqualer<T>(equaler: Equaler<T>, allowNullishValues: true): (a: T | null | undefined, b: T | null | undefined) => boolean; Type Parameters T Parameters equaler Equaler <T> allowNullishValues true Returns (a: T | null | undefined, b: T | null | undefined) => boolean withEqualer(equaler, allowNullishValues) Creates a copy of equate for a specific Equaler <!-- --> . Declaration function withEqualer<T>(equaler: Equaler<T>, allowNullishValues?: boolean): (a: T, b: T) => boolean; Type Parameters T Parameters equaler Equaler <T> allowNullishValues boolean Returns (a: T, b: T) => boolean"
  },
  "api/fn/hash-namespace.html": {
    "href": "api/fn/hash-namespace.html",
    "title": "hash Namespace | @esfx API Reference",
    "keywords": "hash Namespace Package : @esfx/fn Functions withEqualer(equaler, allowNullishValues) Creates a copy of hash for a specific Equaler <!-- --> . Declaration function withEqualer<T>(equaler: Equaler<T>, allowNullishValues: true): (value: T | null | undefined) => number; Type Parameters T Parameters equaler Equaler <T> allowNullishValues true Returns (value: T | null | undefined) => number withEqualer(equaler, allowNullishValues) Creates a copy of hash for a specific Equaler <!-- --> . Declaration function withEqualer<T>(equaler: Equaler<T>, allowNullishValues?: boolean): (value: T) => number; Type Parameters T Parameters equaler Equaler <T> allowNullishValues boolean Returns (value: T) => number"
  },
  "api/fn/incrementer-namespace.html": {
    "href": "api/fn/incrementer-namespace.html",
    "title": "incrementer Namespace | @esfx API Reference",
    "keywords": "incrementer Namespace Package : @esfx/fn Functions step(count, start) Returns a function that produces a monotonically increasing number value each time it is called. Declaration function step(count: number, start?: number): () => number; Parameters count number start number Returns () => number"
  },
  "api/fn/memoizecache.html": {
    "href": "api/fn/memoizecache.html",
    "title": "MemoizeCache<A, T> Interface | @esfx API Reference",
    "keywords": "MemoizeCache<A, T> Interface Package : @esfx/fn Describes the minimum implementation of a cache for memoize(factory, options) . Declaration export interface MemoizeCache<A extends unknown[], T> Methods get(args) Gets (or creates) a MemoizeCacheEntry<T> unique to the provided arguments. Declaration get(args: Readonly<A>): MemoizeCacheEntry<T>; Parameters args Readonly <A> The arguments provided to memoize(factory, options) . Returns MemoizeCacheEntry <T>"
  },
  "api/fn/memoizecacheentry.html": {
    "href": "api/fn/memoizecacheentry.html",
    "title": "MemoizeCacheEntry<T> Interface | @esfx API Reference",
    "keywords": "MemoizeCacheEntry<T> Interface Package : @esfx/fn Describes the minimum implementation of a cache entry for a MemoizeCache<A, T> . Declaration export interface MemoizeCacheEntry<T> Properties result Gets or sets the result for the entry. Declaration result: MemoizeCacheSettledResult<T> | undefined; Property Value MemoizeCacheSettledResult <T> | undefined"
  },
  "api/fn/memoizecachefulfilledresult.html": {
    "href": "api/fn/memoizecachefulfilledresult.html",
    "title": "MemoizeCacheFulfilledResult<T> Interface | @esfx API Reference",
    "keywords": "MemoizeCacheFulfilledResult<T> Interface Package : @esfx/fn Describes a cache result that has a value. Declaration export interface MemoizeCacheFulfilledResult<T> Properties status Declaration status: \"fulfilled\"; Property Value \"fulfilled\" value Declaration value: T; Property Value T"
  },
  "api/fn/memoizecacherejectedresult.html": {
    "href": "api/fn/memoizecacherejectedresult.html",
    "title": "MemoizeCacheRejectedResult Interface | @esfx API Reference",
    "keywords": "MemoizeCacheRejectedResult Interface Package : @esfx/fn Describes a cache result that has an exception. Declaration export interface MemoizeCacheRejectedResult Properties reason Declaration reason: any; Property Value any status Declaration status: \"rejected\"; Property Value \"rejected\""
  },
  "api/fn/memoizeoptions.html": {
    "href": "api/fn/memoizeoptions.html",
    "title": "MemoizeOptions<A, T> Interface | @esfx API Reference",
    "keywords": "MemoizeOptions<A, T> Interface Package : @esfx/fn Declaration export interface MemoizeOptions<A extends unknown[], T> Properties cache Specifies the cache to use for memoize(factory, options) . Declaration cache?: MemoizeCache<A, T>; Property Value MemoizeCache <A, T>"
  },
  "api/fn/op.ge-namespace.html": {
    "href": "api/fn/op.ge-namespace.html",
    "title": "Op.ge Namespace | @esfx API Reference",
    "keywords": "Op.ge Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <T>(comparer: Comparer<T>) => (x: T, y: T) => boolean"
  },
  "api/fn/op.gt-namespace.html": {
    "href": "api/fn/op.gt-namespace.html",
    "title": "Op.gt Namespace | @esfx API Reference",
    "keywords": "Op.gt Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <T>(comparer: Comparer<T>) => (x: T, y: T) => boolean"
  },
  "api/fn/op.html": {
    "href": "api/fn/op.html",
    "title": "Op Namespace | @esfx API Reference",
    "keywords": "Op Namespace Package : @esfx/fn Functions add(x, y) Add/concat (i.e. x + y <!-- --> ). Declaration export declare function add(x: number, y: number): number; Parameters x number y number Returns number add(x, y) Declaration export declare function add(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint add(x, y) Declaration export declare function add(x: string, y: string | number | boolean | object | null | undefined): string; Parameters x string y string | number | boolean | object | null | undefined Returns string add(x, y) Declaration export declare function add(x: string | number | boolean | object | null | undefined, y: string): string; Parameters x string | number | boolean | object | null | undefined y string Returns string and(x, y) Logical AND (i.e. x && y <!-- --> ). Declaration export declare function and(x: boolean, y: boolean): boolean; Parameters x boolean y boolean Returns boolean bitand(x, y) Bitwise AND (i.e. x & y <!-- --> ). Declaration export declare function bitand(x: number, y: number): number; Parameters x number y number Returns number bitand(x, y) Declaration export declare function bitand(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint bitnot(x) Bitwise NOT (i.e. ~x <!-- --> ). Declaration export declare function bitnot(x: number): number; Parameters x number Returns number bitnot(x) Declaration export declare function bitnot(x: bigint): bigint; Parameters x bigint Returns bigint bitor(x, y) Bitwise OR (i.e. x | y <!-- --> ). Declaration export declare function bitor(x: number, y: number): number; Parameters x number y number Returns number bitor(x, y) Declaration export declare function bitor(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint bitxor(x, y) Bitwise XOR (i.e. x ^ y <!-- --> ). Declaration export declare function bitxor(x: number, y: number): number; Parameters x number y number Returns number bitxor(x, y) Declaration export declare function bitxor(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint coalesce(x, y) Nullish Coalesce (i.e. x ?? y <!-- --> ). Declaration export declare function coalesce<T, U>(x: T, y: U): NonNullable<T> | U; Type Parameters T U Parameters x T y U Returns NonNullable <T> | U div(x, y) Divide (i.e. x / y <!-- --> ). Declaration export declare function div(x: number, y: number): number; Parameters x number y number Returns number div(x, y) Declaration export declare function div(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint eq(x, y) Strict equality (i.e. x === y <!-- --> ). Declaration export declare function eq<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean ge(x, y) Relational greater-than-equals (i.e. x >= y <!-- --> ). Declaration export declare function ge<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean gt(x, y) Relational greater-than (i.e. x > y <!-- --> ). Declaration export declare function gt<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean le(x, y) Relational less-than-equals (i.e. x <= y <!-- --> ). Declaration export declare function le<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean lt(x, y) Relational less-than (i.e. x < y <!-- --> ). Declaration export declare function lt<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean max(x, y) Relational maximum (i.e. x >= y ? x : y <!-- --> ). Declaration export declare function max<T>(x: T, y: T): T; Type Parameters T Parameters x T y T Returns T maxBy(x, y, f) Relational maximum using a provided selector (i.e. f(x) <= f(y) ? x : y <!-- --> ). Declaration export declare function maxBy<T, K>(x: T, y: T, f: (v: T) => K): T; Type Parameters T K Parameters x T y T f (v: T) => K Returns T min(x, y) Relational minimum (i.e. x <= y ? x : y <!-- --> ). Declaration export declare function min<T>(x: T, y: T): T; Type Parameters T Parameters x T y T Returns T minBy(x, y, f) Relational minimum using a provided selector (i.e. f(x) <= f(y) ? x : y <!-- --> ). Declaration export declare function minBy<T, K>(x: T, y: T, f: (v: T) => K): T; Type Parameters T K Parameters x T y T f (v: T) => K Returns T mod(x, y) Modulo (i.e. x % y <!-- --> ). Declaration export declare function mod(x: number, y: number): number; Parameters x number y number Returns number mod(x, y) Declaration export declare function mod(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint mul(x, y) Multiply (i.e. x * y <!-- --> ). Declaration export declare function mul(x: number, y: number): number; Parameters x number y number Returns number mul(x, y) Declaration export declare function mul(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint ne(x, y) Strict equality (i.e. x !== y <!-- --> ). Declaration export declare function ne<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean neg(x) Negate (i.e. -x <!-- --> ). Declaration export declare function neg(x: number): number; Parameters x number Returns number neg(x) Declaration export declare function neg(x: bigint): bigint; Parameters x bigint Returns bigint not(x) Logical NOT (i.e. !x <!-- --> ). Declaration export declare function not(x: boolean): boolean; Parameters x boolean Returns boolean operator(op) Declaration export declare function operator<K extends keyof Operators>(op: K): Operators[K]; Type Parameters K Parameters op K Returns Operators [K] operator(op, arity) Declaration export declare function operator<K extends keyof UnaryOperators>(op: K, arity: 1): UnaryOperators[K]; Type Parameters K Parameters op K arity 1 Returns UnaryOperators [K] operator(op, arity) Declaration export declare function operator<K extends keyof BinaryOperators>(op: K, arity: 2): BinaryOperators[K]; Type Parameters K Parameters op K arity 2 Returns BinaryOperators [K] or(x, y) Logical OR (i.e. x || y <!-- --> ). Declaration export declare function or(x: boolean, y: boolean): boolean; Parameters x boolean y boolean Returns boolean plus(x) Unary plus (i.e. +x <!-- --> ). Declaration export declare function plus(x: number): number; Parameters x number Returns number pow(x, y) Exponentiate (i.e. x ** y <!-- --> ). Declaration export declare function pow(x: number, y: number): number; Parameters x number y number Returns number pow(x, y) Declaration export declare function pow(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint req(x, y) Relational equals (i.e. x >= y && x <= y <!-- --> ). Declaration export declare function req<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean rne(x, y) Relational not-equals (i.e. x < y || x > y <!-- --> ). Declaration export declare function rne<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean sal(x, n) Left shift (i.e. x << n <!-- --> ). Declaration export declare function shl(x: number, n: number): number; Parameters x number n number Returns number sal(x, n) Declaration export declare function shl(x: bigint, n: bigint): bigint; Parameters x bigint n bigint Returns bigint sar(x, n) Signed right shift (i.e. x >> n <!-- --> ). Declaration export declare function sar(x: number, n: number): number; Parameters x number n number Returns number sar(x, n) Declaration export declare function sar(x: bigint, n: bigint): bigint; Parameters x bigint n bigint Returns bigint shl(x, n) Left shift (i.e. x << n <!-- --> ). Declaration export declare function shl(x: number, n: number): number; Parameters x number n number Returns number shl(x, n) Declaration export declare function shl(x: bigint, n: bigint): bigint; Parameters x bigint n bigint Returns bigint shr(x, n) Unsigned right shift (i.e. x >>> n <!-- --> ). Declaration export declare function shr(x: number, n: number): number; Parameters x number n number Returns number shr(x, n) Declaration export declare function shr(x: bigint, n: bigint): bigint; Parameters x bigint n bigint Returns bigint sub(x, y) Subtract (i.e. x - y <!-- --> ). Declaration export declare function sub(x: number, y: number): number; Parameters x number y number Returns number sub(x, y) Declaration export declare function sub(x: bigint, y: bigint): bigint; Parameters x bigint y bigint Returns bigint weq(x, y) Weak equality (i.e. x == y <!-- --> ). Declaration export declare function weq<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean wne(x, y) Weak inequality (i.e. x != y <!-- --> ). Declaration export declare function wne<T>(x: T, y: T): boolean; Type Parameters T Parameters x T y T Returns boolean xor(x, y) Logical XOR (i.e. x ? !y : y <!-- --> ). Declaration export declare function xor(x: boolean, y: boolean): boolean; Parameters x boolean y boolean Returns boolean Type Aliases BinaryOperators Declaration export declare type BinaryOperators = typeof binaryOperators; Operators Declaration export declare type Operators = typeof unspecifiedOperators; UnaryOperators Declaration export declare type UnaryOperators = typeof unaryOperators;"
  },
  "api/fn/op.le-namespace.html": {
    "href": "api/fn/op.le-namespace.html",
    "title": "Op.le Namespace | @esfx API Reference",
    "keywords": "Op.le Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <T>(comparer: Comparer<T>) => (x: T, y: T) => boolean"
  },
  "api/fn/op.lt-namespace.html": {
    "href": "api/fn/op.lt-namespace.html",
    "title": "Op.lt Namespace | @esfx API Reference",
    "keywords": "Op.lt Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <T>(comparer: Comparer<T>) => (x: T, y: T) => boolean"
  },
  "api/fn/op.maxby-namespace.html": {
    "href": "api/fn/op.maxby-namespace.html",
    "title": "Op.maxBy Namespace | @esfx API Reference",
    "keywords": "Op.maxBy Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <K>(comparer: Comparer<K>) => <T>(x: T, y: T, f: (v: T) => K) => T"
  },
  "api/fn/op.max-namespace.html": {
    "href": "api/fn/op.max-namespace.html",
    "title": "Op.max Namespace | @esfx API Reference",
    "keywords": "Op.max Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <K>(comparer: Comparer<K>) => (x: K, y: K) => K"
  },
  "api/fn/op.minby-namespace.html": {
    "href": "api/fn/op.minby-namespace.html",
    "title": "Op.minBy Namespace | @esfx API Reference",
    "keywords": "Op.minBy Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <K>(comparer: Comparer<K>) => <T>(x: T, y: T, f: (v: T) => K) => T"
  },
  "api/fn/op.min-namespace.html": {
    "href": "api/fn/op.min-namespace.html",
    "title": "Op.min Namespace | @esfx API Reference",
    "keywords": "Op.min Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <T>(comparer: Comparer<T>) => (x: T, y: T) => T"
  },
  "api/fn/op.req-namespace.html": {
    "href": "api/fn/op.req-namespace.html",
    "title": "Op.req Namespace | @esfx API Reference",
    "keywords": "Op.req Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <T>(comparer: Comparer<T>) => (x: T, y: T) => boolean"
  },
  "api/fn/op.rne-namespace.html": {
    "href": "api/fn/op.rne-namespace.html",
    "title": "Op.rne Namespace | @esfx API Reference",
    "keywords": "Op.rne Namespace Package : @esfx/fn Variables withComparer Declaration withComparer: <T>(comparer: Comparer<T>) => (x: T, y: T) => boolean"
  },
  "api/fn-partial.html": {
    "href": "api/fn-partial.html",
    "title": "@esfx/fn-partial Package | @esfx API Reference",
    "keywords": "@esfx/fn-partial Package Partial application utility functions. Installation npm i @esfx/fn-partial Usage TBD Functions partial(f) Partially applies f <!-- --> . If placeholder is provided for any argument, that argument remains unapplied in the resulting function. If thisPlaceholder is provided for any argument, an argument in that position in the resulting function is used as the this binding. If restPlaceholder is provided as the last argument, any extra arguments passed to the resulting function are spread into the call to the original function. import { partial, placeholder as _ } from \"@esfx/iter/fn\"; const add = (a, b) => a + b; const addOne = partial(add, _, 1); addOne(2); // 3; Declaration export declare function partial<This, TResult>(f: (this: This) => TResult): (this: This) => TResult; Type Parameters This TResult Parameters f (this: This) => TResult Returns (this: This) => TResult partial(f, a, _this) Declaration export declare function partial<This, A, TResult>(f: (this: This, a: A) => TResult, a: _, _this: _this): (a: A, _this: This) => TResult; Type Parameters This A TResult Parameters f (this: This, a: A) => TResult a _ _this _this Returns (a: A, _this: This) => TResult partial(f, _this, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, _this: _this, a: A, b: B, c: _, _rest: _rest): (_this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult _this _this a A b B c _ _rest _rest Returns (_this: This, c: C, ...rest: TRest) => TResult partial(f, _this, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, _this: _this, a: _, b: _, c: C, _rest: _rest): (_this: This, a: A, b: B, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult _this _this a _ b _ c C _rest _rest Returns (_this: This, a: A, b: B, ...rest: TRest) => TResult partial(f, _this, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, _this: _this, a: A, b: _, c: _, _rest: _rest): (_this: This, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult _this _this a A b _ c _ _rest _rest Returns (_this: This, b: B, c: C, ...rest: TRest) => TResult partial(f, _this, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, _this: _this, a: _, b: B, c: _, _rest: _rest): (_this: This, a: A, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult _this _this a _ b B c _ _rest _rest Returns (_this: This, a: A, c: C, ...rest: TRest) => TResult partial(f, _this, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, _this: _this, a: _, b: _, c: _, _rest: _rest): (_this: This, a: A, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult _this _this a _ b _ c _ _rest _rest Returns (_this: This, a: A, b: B, c: C, ...rest: TRest) => TResult partial(f, a, _this, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, _this: _this, b: B, c: C, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A _this _this b B c C _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, _this, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, _this: _this, b: B, c: C, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ _this _this b B c C _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, _this, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, _this: _this, b: _, c: C, _rest: _rest): (_this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A _this _this b _ c C _rest _rest Returns (_this: This, b: B, ...rest: TRest) => TResult partial(f, a, _this, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, _this: _this, b: B, c: _, _rest: _rest): (_this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A _this _this b B c _ _rest _rest Returns (_this: This, c: C, ...rest: TRest) => TResult partial(f, a, _this, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, _this: _this, b: _, c: C, _rest: _rest): (a: A, _this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ _this _this b _ c C _rest _rest Returns (a: A, _this: This, b: B, ...rest: TRest) => TResult partial(f, a, _rest) Declaration export declare function partial<This, A, TRest extends any[], TResult>(f: (this: This, a: A, ...rest: TRest) => TResult, a: A, _rest: _rest): (this: This, ...rest: TRest) => TResult; Type Parameters This A TRest TResult Parameters f (this: This, a: A, ...rest: TRest) => TResult a A _rest _rest Returns (this: This, ...rest: TRest) => TResult partial(f, a, _this, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, _this: _this, b: _, c: _, _rest: _rest): (_this: This, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A _this _this b _ c _ _rest _rest Returns (_this: This, b: B, c: C, ...rest: TRest) => TResult partial(f, a, _this, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, _this: _this, b: B, c: _, _rest: _rest): (_this: This, a: A, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ _this _this b B c _ _rest _rest Returns (_this: This, a: A, c: C, ...rest: TRest) => TResult partial(f, a, _this, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, _this: _this, b: _, c: _, _rest: _rest): (a: A, _this: This, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ _this _this b _ c _ _rest _rest Returns (a: A, _this: This, b: B, c: C, ...rest: TRest) => TResult partial(f, a, b, _this, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: B, _this: _this, c: C, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b B _this _this c C _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, b, _this, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: B, _this: _this, c: C, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b B _this _this c C _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: _, _this: _this, c: C, _rest: _rest): (b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b _ _this _this c C _rest _rest Returns (b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: B, _this: _this, c: _, _rest: _rest): (_this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b B _this _this c _ _rest _rest Returns (_this: This, c: C, ...rest: TRest) => TResult partial(f, a, b, _this, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: _, _this: _this, c: C, _rest: _rest): (a: A, b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b _ _this _this c C _rest _rest Returns (a: A, b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: _, _this: _this, c: _, _rest: _rest): (b: B, _this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b _ _this _this c _ _rest _rest Returns (b: B, _this: This, c: C, ...rest: TRest) => TResult partial(f, a, b, _this, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: B, _this: _this, c: _, _rest: _rest): (a: A, _this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b B _this _this c _ _rest _rest Returns (a: A, _this: This, c: C, ...rest: TRest) => TResult partial(f, a, _rest) Declaration export declare function partial<This, A, TRest extends any[], TResult>(f: (this: This, a: A, ...rest: TRest) => TResult, a: _, _rest: _rest): (this: This, a: A, ...rest: TRest) => TResult; Type Parameters This A TRest TResult Parameters f (this: This, a: A, ...rest: TRest) => TResult a _ _rest _rest Returns (this: This, a: A, ...rest: TRest) => TResult partial(f, a, b, _this, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: _, _this: _this, c: _, _rest: _rest): (a: A, b: B, _this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b _ _this _this c _ _rest _rest Returns (a: A, b: B, _this: This, c: C, ...rest: TRest) => TResult partial(f, a, b, c, _this, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: B, c: C, _this: _this, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b B c C _this _this _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: B, c: C, _this: _this, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b B c C _this _this _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: _, c: C, _this: _this, _rest: _rest): (b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b _ c C _this _this _rest _rest Returns (b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: B, c: _, _this: _this, _rest: _rest): (c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b B c _ _this _this _rest _rest Returns (c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: _, c: C, _this: _this, _rest: _rest): (a: A, b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b _ c C _this _this _rest _rest Returns (a: A, b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: _, c: _, _this: _this, _rest: _rest): (b: B, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b _ c _ _this _this _rest _rest Returns (b: B, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: B, c: _, _this: _this, _rest: _rest): (a: A, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b B c _ _this _this _rest _rest Returns (a: A, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: _, c: _, _this: _this, _rest: _rest): (a: A, b: B, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b _ c _ _this _this _rest _rest Returns (a: A, b: B, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: C, d: D): (this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c C d D Returns (this: This) => TResult partial(f, _this, a, _rest) Declaration export declare function partial<This, A, TRest extends any[], TResult>(f: (this: This, a: A, ...rest: TRest) => TResult, _this: _this, a: A, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A TRest TResult Parameters f (this: This, a: A, ...rest: TRest) => TResult _this _this a A _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: C, d: D): (this: This, a: A) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c C d D Returns (this: This, a: A) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: C, d: D): (this: This, b: B) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c C d D Returns (this: This, b: B) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: _, d: D): (this: This, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c _ d D Returns (this: This, c: C) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: C, d: _): (this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c C d _ Returns (this: This, d: D) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: C, d: D): (this: This, a: A, b: B) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c C d D Returns (this: This, a: A, b: B) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: _, d: D): (this: This, a: A, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c _ d D Returns (this: This, a: A, c: C) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: C, d: _): (this: This, a: A, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c C d _ Returns (this: This, a: A, d: D) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: _, d: D): (this: This, b: B, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c _ d D Returns (this: This, b: B, c: C) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: C, d: _): (this: This, b: B, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c C d _ Returns (this: This, b: B, d: D) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: _, d: _): (this: This, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c _ d _ Returns (this: This, c: C, d: D) => TResult partial(f, _this, a, _rest) Declaration export declare function partial<This, A, TRest extends any[], TResult>(f: (this: This, a: A, ...rest: TRest) => TResult, _this: _this, a: _, _rest: _rest): (_this: This, a: A, ...rest: TRest) => TResult; Type Parameters This A TRest TResult Parameters f (this: This, a: A, ...rest: TRest) => TResult _this _this a _ _rest _rest Returns (_this: This, a: A, ...rest: TRest) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: _, d: D): (this: This, a: A, b: B, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c _ d D Returns (this: This, a: A, b: B, c: C) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: C, d: _): (this: This, a: A, b: B, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c C d _ Returns (this: This, a: A, b: B, d: D) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: _, d: _): (this: This, a: A, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c _ d _ Returns (this: This, a: A, c: C, d: D) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: _, d: _): (this: This, b: B, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c _ d _ Returns (this: This, b: B, c: C, d: D) => TResult partial(f, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: _, d: _): (this: This, a: A, b: B, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c _ d _ Returns (this: This, a: A, b: B, c: C, d: D) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: A, b: B, c: C, d: D): (_this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a A b B c C d D Returns (_this: This) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: _, b: B, c: C, d: D): (_this: This, a: A) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a _ b B c C d D Returns (_this: This, a: A) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: A, b: _, c: C, d: D): (_this: This, b: B) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a A b _ c C d D Returns (_this: This, b: B) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: A, b: B, c: _, d: D): (_this: This, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a A b B c _ d D Returns (_this: This, c: C) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: A, b: B, c: C, d: _): (_this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a A b B c C d _ Returns (_this: This, d: D) => TResult partial(f, a, _this, _rest) Declaration export declare function partial<This, A, TRest extends any[], TResult>(f: (this: This, a: A, ...rest: TRest) => TResult, a: A, _this: _this, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A TRest TResult Parameters f (this: This, a: A, ...rest: TRest) => TResult a A _this _this _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: _, b: _, c: C, d: D): (_this: This, a: A, b: B) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a _ b _ c C d D Returns (_this: This, a: A, b: B) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: _, b: B, c: _, d: D): (_this: This, a: A, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a _ b B c _ d D Returns (_this: This, a: A, c: C) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: _, b: B, c: C, d: _): (_this: This, a: A, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a _ b B c C d _ Returns (_this: This, a: A, d: D) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: A, b: _, c: _, d: D): (_this: This, b: B, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a A b _ c _ d D Returns (_this: This, b: B, c: C) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: A, b: _, c: C, d: _): (_this: This, b: B, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a A b _ c C d _ Returns (_this: This, b: B, d: D) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: A, b: B, c: _, d: _): (_this: This, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a A b B c _ d _ Returns (_this: This, c: C, d: D) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: _, b: _, c: _, d: D): (_this: This, a: A, b: B, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a _ b _ c _ d D Returns (_this: This, a: A, b: B, c: C) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: _, b: _, c: C, d: _): (_this: This, a: A, b: B, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a _ b _ c C d _ Returns (_this: This, a: A, b: B, d: D) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: _, b: B, c: _, d: _): (_this: This, a: A, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a _ b B c _ d _ Returns (_this: This, a: A, c: C, d: D) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: A, b: _, c: _, d: _): (_this: This, b: B, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a A b _ c _ d _ Returns (_this: This, b: B, c: C, d: D) => TResult partial(f, a, _this, _rest) Declaration export declare function partial<This, A, TRest extends any[], TResult>(f: (this: This, a: A, ...rest: TRest) => TResult, a: _, _this: _this, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A TRest TResult Parameters f (this: This, a: A, ...rest: TRest) => TResult a _ _this _this _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, _this, a, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, _this: _this, a: _, b: _, c: _, d: _): (_this: This, a: A, b: B, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult _this _this a _ b _ c _ d _ Returns (_this: This, a: A, b: B, c: C, d: D) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, _this: _this, b: B, c: C, d: D): (_this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A _this _this b B c C d D Returns (_this: This) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, _this: _this, b: B, c: C, d: D): (a: A, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ _this _this b B c C d D Returns (a: A, _this: This) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, _this: _this, b: _, c: C, d: D): (_this: This, b: B) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A _this _this b _ c C d D Returns (_this: This, b: B) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, _this: _this, b: B, c: _, d: D): (_this: This, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A _this _this b B c _ d D Returns (_this: This, c: C) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, _this: _this, b: B, c: C, d: _): (_this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A _this _this b B c C d _ Returns (_this: This, d: D) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, _this: _this, b: _, c: C, d: D): (a: A, _this: This, b: B) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ _this _this b _ c C d D Returns (a: A, _this: This, b: B) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, _this: _this, b: B, c: _, d: D): (a: A, _this: This, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ _this _this b B c _ d D Returns (a: A, _this: This, c: C) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, _this: _this, b: B, c: C, d: _): (a: A, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ _this _this b B c C d _ Returns (a: A, _this: This, d: D) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, _this: _this, b: _, c: _, d: D): (_this: This, b: B, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A _this _this b _ c _ d D Returns (_this: This, b: B, c: C) => TResult partial(f, a, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: A, b: B): (this: This) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a A b B Returns (this: This) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, _this: _this, b: _, c: C, d: _): (_this: This, b: B, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A _this _this b _ c C d _ Returns (_this: This, b: B, d: D) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, _this: _this, b: B, c: _, d: _): (_this: This, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A _this _this b B c _ d _ Returns (_this: This, c: C, d: D) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, _this: _this, b: _, c: _, d: D): (a: A, _this: This, b: B, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ _this _this b _ c _ d D Returns (a: A, _this: This, b: B, c: C) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, _this: _this, b: _, c: C, d: _): (a: A, _this: This, b: B, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ _this _this b _ c C d _ Returns (a: A, _this: This, b: B, d: D) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, _this: _this, b: B, c: _, d: _): (a: A, _this: This, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ _this _this b B c _ d _ Returns (a: A, _this: This, c: C, d: D) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, _this: _this, b: _, c: _, d: _): (_this: This, b: B, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A _this _this b _ c _ d _ Returns (_this: This, b: B, c: C, d: D) => TResult partial(f, a, _this, b, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, _this: _this, b: _, c: _, d: _): (a: A, _this: This, b: B, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ _this _this b _ c _ d _ Returns (a: A, _this: This, b: B, c: C, d: D) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, _this: _this, c: C, d: D): (_this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B _this _this c C d D Returns (_this: This) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, _this: _this, c: C, d: D): (a: A, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B _this _this c C d D Returns (a: A, _this: This) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, _this: _this, c: C, d: D): (b: B, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ _this _this c C d D Returns (b: B, _this: This) => TResult partial(f, a, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: _, b: B): (this: This, a: A) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a _ b B Returns (this: This, a: A) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, _this: _this, c: _, d: D): (_this: This, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B _this _this c _ d D Returns (_this: This, c: C) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, _this: _this, c: C, d: _): (_this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B _this _this c C d _ Returns (_this: This, d: D) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, _this: _this, c: C, d: D): (a: A, b: B, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ _this _this c C d D Returns (a: A, b: B, _this: This) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, _this: _this, c: _, d: D): (a: A, _this: This, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B _this _this c _ d D Returns (a: A, _this: This, c: C) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, _this: _this, c: C, d: _): (a: A, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B _this _this c C d _ Returns (a: A, _this: This, d: D) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, _this: _this, c: _, d: D): (b: B, _this: This, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ _this _this c _ d D Returns (b: B, _this: This, c: C) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, _this: _this, c: C, d: _): (b: B, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ _this _this c C d _ Returns (b: B, _this: This, d: D) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, _this: _this, c: _, d: _): (_this: This, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B _this _this c _ d _ Returns (_this: This, c: C, d: D) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, _this: _this, c: _, d: D): (a: A, b: B, _this: This, c: C) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ _this _this c _ d D Returns (a: A, b: B, _this: This, c: C) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, _this: _this, c: C, d: _): (a: A, b: B, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ _this _this c C d _ Returns (a: A, b: B, _this: This, d: D) => TResult partial(f, a, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: A, b: _): (this: This, b: B) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a A b _ Returns (this: This, b: B) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, _this: _this, c: _, d: _): (a: A, _this: This, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B _this _this c _ d _ Returns (a: A, _this: This, c: C, d: D) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, _this: _this, c: _, d: _): (b: B, _this: This, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ _this _this c _ d _ Returns (b: B, _this: This, c: C, d: D) => TResult partial(f, a, b, _this, c, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, _this: _this, c: _, d: _): (a: A, b: B, _this: This, c: C, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ _this _this c _ d _ Returns (a: A, b: B, _this: This, c: C, d: D) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: C, _this: _this, d: D): (_this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c C _this _this d D Returns (_this: This) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: C, _this: _this, d: D): (a: A, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c C _this _this d D Returns (a: A, _this: This) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: C, _this: _this, d: D): (b: B, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c C _this _this d D Returns (b: B, _this: This) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: _, _this: _this, d: D): (c: C, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c _ _this _this d D Returns (c: C, _this: This) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: C, _this: _this, d: _): (_this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c C _this _this d _ Returns (_this: This, d: D) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: C, _this: _this, d: D): (a: A, b: B, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c C _this _this d D Returns (a: A, b: B, _this: This) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: _, _this: _this, d: D): (a: A, c: C, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c _ _this _this d D Returns (a: A, c: C, _this: This) => TResult partial(f, _this) Declaration export declare function partial<This, TResult>(f: (this: This) => TResult, _this: _this): (_this: This) => TResult; Type Parameters This TResult Parameters f (this: This) => TResult _this _this Returns (_this: This) => TResult partial(f, a, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: _, b: _): (this: This, a: A, b: B) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a _ b _ Returns (this: This, a: A, b: B) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: C, _this: _this, d: _): (a: A, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c C _this _this d _ Returns (a: A, _this: This, d: D) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: _, _this: _this, d: D): (b: B, c: C, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c _ _this _this d D Returns (b: B, c: C, _this: This) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: C, _this: _this, d: _): (b: B, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c C _this _this d _ Returns (b: B, _this: This, d: D) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: _, _this: _this, d: _): (c: C, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c _ _this _this d _ Returns (c: C, _this: This, d: D) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: _, _this: _this, d: D): (a: A, b: B, c: C, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c _ _this _this d D Returns (a: A, b: B, c: C, _this: This) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: C, _this: _this, d: _): (a: A, b: B, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c C _this _this d _ Returns (a: A, b: B, _this: This, d: D) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: _, _this: _this, d: _): (a: A, c: C, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c _ _this _this d _ Returns (a: A, c: C, _this: This, d: D) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: _, _this: _this, d: _): (b: B, c: C, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c _ _this _this d _ Returns (b: B, c: C, _this: This, d: D) => TResult partial(f, a, b, c, _this, d) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: _, _this: _this, d: _): (a: A, b: B, c: C, _this: This, d: D) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c _ _this _this d _ Returns (a: A, b: B, c: C, _this: This, d: D) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: C, d: D, _this: _this): (_this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c C d D _this _this Returns (_this: This) => TResult partial(f, _this, a, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, _this: _this, a: A, b: B): (_this: This) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult _this _this a A b B Returns (_this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: C, d: D, _this: _this): (a: A, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c C d D _this _this Returns (a: A, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: C, d: D, _this: _this): (b: B, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c C d D _this _this Returns (b: B, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: _, d: D, _this: _this): (c: C, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c _ d D _this _this Returns (c: C, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: C, d: _, _this: _this): (d: D, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c C d _ _this _this Returns (d: D, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: C, d: D, _this: _this): (a: A, b: B, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c C d D _this _this Returns (a: A, b: B, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: _, d: D, _this: _this): (a: A, c: C, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c _ d D _this _this Returns (a: A, c: C, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: C, d: _, _this: _this): (a: A, d: D, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c C d _ _this _this Returns (a: A, d: D, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: _, d: D, _this: _this): (b: B, c: C, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c _ d D _this _this Returns (b: B, c: C, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: C, d: _, _this: _this): (b: B, d: D, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c C d _ _this _this Returns (b: B, d: D, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: B, c: _, d: _, _this: _this): (c: C, d: D, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b B c _ d _ _this _this Returns (c: C, d: D, _this: This) => TResult partial(f, _this, a, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, _this: _this, a: _, b: B): (_this: This, a: A) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult _this _this a _ b B Returns (_this: This, a: A) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: _, d: D, _this: _this): (a: A, b: B, c: C, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c _ d D _this _this Returns (a: A, b: B, c: C, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: C, d: _, _this: _this): (a: A, b: B, d: D, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c C d _ _this _this Returns (a: A, b: B, d: D, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: B, c: _, d: _, _this: _this): (a: A, c: C, d: D, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b B c _ d _ _this _this Returns (a: A, c: C, d: D, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: A, b: _, c: _, d: _, _this: _this): (b: B, c: C, d: D, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a A b _ c _ d _ _this _this Returns (b: B, c: C, d: D, _this: This) => TResult partial(f, a, b, c, d, _this) Declaration export declare function partial<This, A, B, C, D, TResult>(f: (this: This, a: A, b: B, c: C, d: D) => TResult, a: _, b: _, c: _, d: _, _this: _this): (a: A, b: B, c: C, d: D, _this: This) => TResult; Type Parameters This A B C D TResult Parameters f (this: This, a: A, b: B, c: C, d: D) => TResult a _ b _ c _ d _ _this _this Returns (a: A, b: B, c: C, d: D, _this: This) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: C, d: D, _rest: _rest): (this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c C d D _rest _rest Returns (this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: C, d: D, _rest: _rest): (this: This, a: A, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c C d D _rest _rest Returns (this: This, a: A, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: C, d: D, _rest: _rest): (this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c C d D _rest _rest Returns (this: This, b: B, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: _, d: D, _rest: _rest): (this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c _ d D _rest _rest Returns (this: This, c: C, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: C, d: _, _rest: _rest): (this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c C d _ _rest _rest Returns (this: This, d: D, ...rest: TRest) => TResult partial(f, _this, a, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, _this: _this, a: A, b: _): (_this: This, b: B) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult _this _this a A b _ Returns (_this: This, b: B) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: C, d: D, _rest: _rest): (this: This, a: A, b: B, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c C d D _rest _rest Returns (this: This, a: A, b: B, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: _, d: D, _rest: _rest): (this: This, a: A, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c _ d D _rest _rest Returns (this: This, a: A, c: C, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: C, d: _, _rest: _rest): (this: This, a: A, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c C d _ _rest _rest Returns (this: This, a: A, d: D, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: _, d: D, _rest: _rest): (this: This, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c _ d D _rest _rest Returns (this: This, b: B, c: C, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: C, d: _, _rest: _rest): (this: This, b: B, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c C d _ _rest _rest Returns (this: This, b: B, d: D, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: _, d: _, _rest: _rest): (this: This, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c _ d _ _rest _rest Returns (this: This, c: C, d: D, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: _, d: D, _rest: _rest): (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c _ d D _rest _rest Returns (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: C, d: _, _rest: _rest): (this: This, a: A, b: B, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c C d _ _rest _rest Returns (this: This, a: A, b: B, d: D, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: _, d: _, _rest: _rest): (this: This, a: A, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c _ d _ _rest _rest Returns (this: This, a: A, c: C, d: D, ...rest: TRest) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: _, d: _, _rest: _rest): (this: This, b: B, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c _ d _ _rest _rest Returns (this: This, b: B, c: C, d: D, ...rest: TRest) => TResult partial(f, _this, a, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, _this: _this, a: _, b: _): (_this: This, a: A, b: B) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult _this _this a _ b _ Returns (_this: This, a: A, b: B) => TResult partial(f, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: _, d: _, _rest: _rest): (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c _ d _ _rest _rest Returns (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: A, b: B, c: C, d: D, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a A b B c C d D _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: _, b: B, c: C, d: D, _rest: _rest): (_this: This, a: A, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a _ b B c C d D _rest _rest Returns (_this: This, a: A, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: A, b: _, c: C, d: D, _rest: _rest): (_this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a A b _ c C d D _rest _rest Returns (_this: This, b: B, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: A, b: B, c: _, d: D, _rest: _rest): (_this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a A b B c _ d D _rest _rest Returns (_this: This, c: C, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: A, b: B, c: C, d: _, _rest: _rest): (_this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a A b B c C d _ _rest _rest Returns (_this: This, d: D, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: _, b: _, c: C, d: D, _rest: _rest): (_this: This, a: A, b: B, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a _ b _ c C d D _rest _rest Returns (_this: This, a: A, b: B, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: _, b: B, c: _, d: D, _rest: _rest): (_this: This, a: A, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a _ b B c _ d D _rest _rest Returns (_this: This, a: A, c: C, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: _, b: B, c: C, d: _, _rest: _rest): (_this: This, a: A, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a _ b B c C d _ _rest _rest Returns (_this: This, a: A, d: D, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: A, b: _, c: _, d: D, _rest: _rest): (_this: This, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a A b _ c _ d D _rest _rest Returns (_this: This, b: B, c: C, ...rest: TRest) => TResult partial(f, a, _this, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: A, _this: _this, b: B): (_this: This) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a A _this _this b B Returns (_this: This) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: A, b: _, c: C, d: _, _rest: _rest): (_this: This, b: B, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a A b _ c C d _ _rest _rest Returns (_this: This, b: B, d: D, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: A, b: B, c: _, d: _, _rest: _rest): (_this: This, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a A b B c _ d _ _rest _rest Returns (_this: This, c: C, d: D, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: _, b: _, c: _, d: D, _rest: _rest): (_this: This, a: A, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a _ b _ c _ d D _rest _rest Returns (_this: This, a: A, b: B, c: C, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: _, b: _, c: C, d: _, _rest: _rest): (_this: This, a: A, b: B, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a _ b _ c C d _ _rest _rest Returns (_this: This, a: A, b: B, d: D, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: _, b: B, c: _, d: _, _rest: _rest): (_this: This, a: A, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a _ b B c _ d _ _rest _rest Returns (_this: This, a: A, c: C, d: D, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: A, b: _, c: _, d: _, _rest: _rest): (_this: This, b: B, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a A b _ c _ d _ _rest _rest Returns (_this: This, b: B, c: C, d: D, ...rest: TRest) => TResult partial(f, _this, a, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, _this: _this, a: _, b: _, c: _, d: _, _rest: _rest): (_this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult _this _this a _ b _ c _ d _ _rest _rest Returns (_this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, _this: _this, b: B, c: C, d: D, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A _this _this b B c C d D _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, _this: _this, b: B, c: C, d: D, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ _this _this b B c C d D _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, _this: _this, b: _, c: C, d: D, _rest: _rest): (_this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A _this _this b _ c C d D _rest _rest Returns (_this: This, b: B, ...rest: TRest) => TResult partial(f, a, _this, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: _, _this: _this, b: B): (a: A, _this: This) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a _ _this _this b B Returns (a: A, _this: This) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, _this: _this, b: B, c: _, d: D, _rest: _rest): (_this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A _this _this b B c _ d D _rest _rest Returns (_this: This, c: C, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, _this: _this, b: B, c: C, d: _, _rest: _rest): (_this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A _this _this b B c C d _ _rest _rest Returns (_this: This, d: D, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, _this: _this, b: _, c: C, d: D, _rest: _rest): (a: A, _this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ _this _this b _ c C d D _rest _rest Returns (a: A, _this: This, b: B, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, _this: _this, b: B, c: _, d: D, _rest: _rest): (a: A, _this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ _this _this b B c _ d D _rest _rest Returns (a: A, _this: This, c: C, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, _this: _this, b: B, c: C, d: _, _rest: _rest): (a: A, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ _this _this b B c C d _ _rest _rest Returns (a: A, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, _this: _this, b: _, c: _, d: D, _rest: _rest): (_this: This, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A _this _this b _ c _ d D _rest _rest Returns (_this: This, b: B, c: C, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, _this: _this, b: _, c: C, d: _, _rest: _rest): (_this: This, b: B, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A _this _this b _ c C d _ _rest _rest Returns (_this: This, b: B, d: D, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, _this: _this, b: B, c: _, d: _, _rest: _rest): (_this: This, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A _this _this b B c _ d _ _rest _rest Returns (_this: This, c: C, d: D, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, _this: _this, b: _, c: _, d: D, _rest: _rest): (a: A, _this: This, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ _this _this b _ c _ d D _rest _rest Returns (a: A, _this: This, b: B, c: C, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, _this: _this, b: _, c: C, d: _, _rest: _rest): (a: A, _this: This, b: B, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ _this _this b _ c C d _ _rest _rest Returns (a: A, _this: This, b: B, d: D, ...rest: TRest) => TResult partial(f, a, _this, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: A, _this: _this, b: _): (_this: This, b: B) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a A _this _this b _ Returns (_this: This, b: B) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, _this: _this, b: B, c: _, d: _, _rest: _rest): (a: A, _this: This, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ _this _this b B c _ d _ _rest _rest Returns (a: A, _this: This, c: C, d: D, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, _this: _this, b: _, c: _, d: _, _rest: _rest): (_this: This, b: B, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A _this _this b _ c _ d _ _rest _rest Returns (_this: This, b: B, c: C, d: D, ...rest: TRest) => TResult partial(f, a, _this, b, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, _this: _this, b: _, c: _, d: _, _rest: _rest): (a: A, _this: This, b: B, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ _this _this b _ c _ d _ _rest _rest Returns (a: A, _this: This, b: B, c: C, d: D, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, _this: _this, c: C, d: D, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B _this _this c C d D _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, _this: _this, c: C, d: D, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B _this _this c C d D _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, _this: _this, c: C, d: D, _rest: _rest): (b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ _this _this c C d D _rest _rest Returns (b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, _this: _this, c: _, d: D, _rest: _rest): (_this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B _this _this c _ d D _rest _rest Returns (_this: This, c: C, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, _this: _this, c: C, d: _, _rest: _rest): (_this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B _this _this c C d _ _rest _rest Returns (_this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, _this: _this, c: C, d: D, _rest: _rest): (a: A, b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ _this _this c C d D _rest _rest Returns (a: A, b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, _this: _this, c: _, d: D, _rest: _rest): (a: A, _this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B _this _this c _ d D _rest _rest Returns (a: A, _this: This, c: C, ...rest: TRest) => TResult partial(f, a, _this, b) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: _, _this: _this, b: _): (a: A, _this: This, b: B) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a _ _this _this b _ Returns (a: A, _this: This, b: B) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, _this: _this, c: C, d: _, _rest: _rest): (a: A, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B _this _this c C d _ _rest _rest Returns (a: A, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, _this: _this, c: _, d: D, _rest: _rest): (b: B, _this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ _this _this c _ d D _rest _rest Returns (b: B, _this: This, c: C, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, _this: _this, c: C, d: _, _rest: _rest): (b: B, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ _this _this c C d _ _rest _rest Returns (b: B, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, _this: _this, c: _, d: _, _rest: _rest): (_this: This, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B _this _this c _ d _ _rest _rest Returns (_this: This, c: C, d: D, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, _this: _this, c: _, d: D, _rest: _rest): (a: A, b: B, _this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ _this _this c _ d D _rest _rest Returns (a: A, b: B, _this: This, c: C, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, _this: _this, c: C, d: _, _rest: _rest): (a: A, b: B, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ _this _this c C d _ _rest _rest Returns (a: A, b: B, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, _this: _this, c: _, d: _, _rest: _rest): (a: A, _this: This, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B _this _this c _ d _ _rest _rest Returns (a: A, _this: This, c: C, d: D, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, _this: _this, c: _, d: _, _rest: _rest): (b: B, _this: This, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ _this _this c _ d _ _rest _rest Returns (b: B, _this: This, c: C, d: D, ...rest: TRest) => TResult partial(f, a, b, _this, c, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, _this: _this, c: _, d: _, _rest: _rest): (a: A, b: B, _this: This, c: C, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ _this _this c _ d _ _rest _rest Returns (a: A, b: B, _this: This, c: C, d: D, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: C, _this: _this, d: D, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c C _this _this d D _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, b, _this) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: A, b: B, _this: _this): (_this: This) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a A b B _this _this Returns (_this: This) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: C, _this: _this, d: D, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c C _this _this d D _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: C, _this: _this, d: D, _rest: _rest): (b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c C _this _this d D _rest _rest Returns (b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: _, _this: _this, d: D, _rest: _rest): (c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c _ _this _this d D _rest _rest Returns (c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: C, _this: _this, d: _, _rest: _rest): (_this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c C _this _this d _ _rest _rest Returns (_this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: C, _this: _this, d: D, _rest: _rest): (a: A, b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c C _this _this d D _rest _rest Returns (a: A, b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: _, _this: _this, d: D, _rest: _rest): (a: A, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c _ _this _this d D _rest _rest Returns (a: A, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: C, _this: _this, d: _, _rest: _rest): (a: A, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c C _this _this d _ _rest _rest Returns (a: A, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: _, _this: _this, d: D, _rest: _rest): (b: B, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c _ _this _this d D _rest _rest Returns (b: B, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: C, _this: _this, d: _, _rest: _rest): (b: B, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c C _this _this d _ _rest _rest Returns (b: B, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: _, _this: _this, d: _, _rest: _rest): (c: C, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c _ _this _this d _ _rest _rest Returns (c: C, _this: This, d: D, ...rest: TRest) => TResult partial(f, _rest) Declaration export declare function partial<This, TRest extends any[], TResult>(f: (this: This, ...rest: TRest) => TResult, _rest: _rest): (this: This, ...rest: TRest) => TResult; Type Parameters This TRest TResult Parameters f (this: This, ...rest: TRest) => TResult _rest _rest Returns (this: This, ...rest: TRest) => TResult partial(f, a, b, _this) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: _, b: B, _this: _this): (a: A, _this: This) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a _ b B _this _this Returns (a: A, _this: This) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: _, _this: _this, d: D, _rest: _rest): (a: A, b: B, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c _ _this _this d D _rest _rest Returns (a: A, b: B, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: C, _this: _this, d: _, _rest: _rest): (a: A, b: B, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c C _this _this d _ _rest _rest Returns (a: A, b: B, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: _, _this: _this, d: _, _rest: _rest): (a: A, c: C, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c _ _this _this d _ _rest _rest Returns (a: A, c: C, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: _, _this: _this, d: _, _rest: _rest): (b: B, c: C, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c _ _this _this d _ _rest _rest Returns (b: B, c: C, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, c, _this, d, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: _, _this: _this, d: _, _rest: _rest): (a: A, b: B, c: C, _this: This, d: D, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c _ _this _this d _ _rest _rest Returns (a: A, b: B, c: C, _this: This, d: D, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: C, d: D, _this: _this, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c C d D _this _this _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: C, d: D, _this: _this, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c C d D _this _this _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: C, d: D, _this: _this, _rest: _rest): (b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c C d D _this _this _rest _rest Returns (b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: _, d: D, _this: _this, _rest: _rest): (c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c _ d D _this _this _rest _rest Returns (c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: C, d: _, _this: _this, _rest: _rest): (d: D, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c C d _ _this _this _rest _rest Returns (d: D, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: A, b: _, _this: _this): (b: B, _this: This) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a A b _ _this _this Returns (b: B, _this: This) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: C, d: D, _this: _this, _rest: _rest): (a: A, b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c C d D _this _this _rest _rest Returns (a: A, b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: _, d: D, _this: _this, _rest: _rest): (a: A, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c _ d D _this _this _rest _rest Returns (a: A, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: C, d: _, _this: _this, _rest: _rest): (a: A, d: D, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c C d _ _this _this _rest _rest Returns (a: A, d: D, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: _, d: D, _this: _this, _rest: _rest): (b: B, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c _ d D _this _this _rest _rest Returns (b: B, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: C, d: _, _this: _this, _rest: _rest): (b: B, d: D, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c C d _ _this _this _rest _rest Returns (b: B, d: D, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: B, c: _, d: _, _this: _this, _rest: _rest): (c: C, d: D, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b B c _ d _ _this _this _rest _rest Returns (c: C, d: D, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: _, d: D, _this: _this, _rest: _rest): (a: A, b: B, c: C, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c _ d D _this _this _rest _rest Returns (a: A, b: B, c: C, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: C, d: _, _this: _this, _rest: _rest): (a: A, b: B, d: D, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c C d _ _this _this _rest _rest Returns (a: A, b: B, d: D, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: B, c: _, d: _, _this: _this, _rest: _rest): (a: A, c: C, d: D, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b B c _ d _ _this _this _rest _rest Returns (a: A, c: C, d: D, _this: This, ...rest: TRest) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: A, b: _, c: _, d: _, _this: _this, _rest: _rest): (b: B, c: C, d: D, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a A b _ c _ d _ _this _this _rest _rest Returns (b: B, c: C, d: D, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this) Declaration export declare function partial<This, A, B, TResult>(f: (this: This, a: A, b: B) => TResult, a: _, b: _, _this: _this): (a: A, b: B, _this: This) => TResult; Type Parameters This A B TResult Parameters f (this: This, a: A, b: B) => TResult a _ b _ _this _this Returns (a: A, b: B, _this: This) => TResult partial(f, a, b, c, d, _this, _rest) Declaration export declare function partial<This, A, B, C, D, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult, a: _, b: _, c: _, d: _, _this: _this, _rest: _rest): (a: A, b: B, c: C, d: D, _this: This, ...rest: TRest) => TResult; Type Parameters This A B C D TRest TResult Parameters f (this: This, a: A, b: B, c: C, d: D, ...rest: TRest) => TResult a _ b _ c _ d _ _this _this _rest _rest Returns (a: A, b: B, c: C, d: D, _this: This, ...rest: TRest) => TResult partial(f, a, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: A, b: B, _rest: _rest): (this: This, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a A b B _rest _rest Returns (this: This, ...rest: TRest) => TResult partial(f, a, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: _, b: B, _rest: _rest): (this: This, a: A, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a _ b B _rest _rest Returns (this: This, a: A, ...rest: TRest) => TResult partial(f, a, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: A, b: _, _rest: _rest): (this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a A b _ _rest _rest Returns (this: This, b: B, ...rest: TRest) => TResult partial(f, a, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: _, b: _, _rest: _rest): (this: This, a: A, b: B, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a _ b _ _rest _rest Returns (this: This, a: A, b: B, ...rest: TRest) => TResult partial(f, _this, a, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, _this: _this, a: A, b: B, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult _this _this a A b B _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, _this, a, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, _this: _this, a: _, b: B, _rest: _rest): (_this: This, a: A, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult _this _this a _ b B _rest _rest Returns (_this: This, a: A, ...rest: TRest) => TResult partial(f, _this, a, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, _this: _this, a: A, b: _, _rest: _rest): (_this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult _this _this a A b _ _rest _rest Returns (_this: This, b: B, ...rest: TRest) => TResult partial(f, _this, _rest) Declaration export declare function partial<This, TRest extends any[], TResult>(f: (this: This, ...rest: TRest) => TResult, _this: _this, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This TRest TResult Parameters f (this: This, ...rest: TRest) => TResult _this _this _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, _this, a, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, _this: _this, a: _, b: _, _rest: _rest): (_this: This, a: A, b: B, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult _this _this a _ b _ _rest _rest Returns (_this: This, a: A, b: B, ...rest: TRest) => TResult partial(f, a, _this, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: A, _this: _this, b: B, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a A _this _this b B _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, _this, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: _, _this: _this, b: B, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a _ _this _this b B _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, _this, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: A, _this: _this, b: _, _rest: _rest): (_this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a A _this _this b _ _rest _rest Returns (_this: This, b: B, ...rest: TRest) => TResult partial(f, a, _this, b, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: _, _this: _this, b: _, _rest: _rest): (a: A, _this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a _ _this _this b _ _rest _rest Returns (a: A, _this: This, b: B, ...rest: TRest) => TResult partial(f, a, b, _this, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: A, b: B, _this: _this, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a A b B _this _this _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, a, b, _this, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: _, b: B, _this: _this, _rest: _rest): (a: A, _this: This, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a _ b B _this _this _rest _rest Returns (a: A, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: A, b: _, _this: _this, _rest: _rest): (b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a A b _ _this _this _rest _rest Returns (b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, _this, _rest) Declaration export declare function partial<This, A, B, TRest extends any[], TResult>(f: (this: This, a: A, b: B, ...rest: TRest) => TResult, a: _, b: _, _this: _this, _rest: _rest): (a: A, b: B, _this: This, ...rest: TRest) => TResult; Type Parameters This A B TRest TResult Parameters f (this: This, a: A, b: B, ...rest: TRest) => TResult a _ b _ _this _this _rest _rest Returns (a: A, b: B, _this: This, ...rest: TRest) => TResult partial(f, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: B, c: C): (this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b B c C Returns (this: This) => TResult partial(f, a) Declaration export declare function partial<This, A, TResult>(f: (this: This, a: A) => TResult, a: A): (this: This) => TResult; Type Parameters This A TResult Parameters f (this: This, a: A) => TResult a A Returns (this: This) => TResult partial(f, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: B, c: C): (this: This, a: A) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b B c C Returns (this: This, a: A) => TResult partial(f, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: _, c: C): (this: This, b: B) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b _ c C Returns (this: This, b: B) => TResult partial(f, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: B, c: _): (this: This, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b B c _ Returns (this: This, c: C) => TResult partial(f, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: _, c: C): (this: This, a: A, b: B) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b _ c C Returns (this: This, a: A, b: B) => TResult partial(f, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: _, c: _): (this: This, b: B, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b _ c _ Returns (this: This, b: B, c: C) => TResult partial(f, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: B, c: _): (this: This, a: A, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b B c _ Returns (this: This, a: A, c: C) => TResult partial(f, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: _, c: _): (this: This, a: A, b: B, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b _ c _ Returns (this: This, a: A, b: B, c: C) => TResult partial(f, _this, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, _this: _this, a: A, b: B, c: C): (_this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult _this _this a A b B c C Returns (_this: This) => TResult partial(f, _this, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, _this: _this, a: _, b: B, c: C): (_this: This, a: A) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult _this _this a _ b B c C Returns (_this: This, a: A) => TResult partial(f, _this, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, _this: _this, a: A, b: _, c: C): (_this: This, b: B) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult _this _this a A b _ c C Returns (_this: This, b: B) => TResult partial(f, a) Declaration export declare function partial<This, A, TResult>(f: (this: This, a: A) => TResult, a: _): (this: This, a: A) => TResult; Type Parameters This A TResult Parameters f (this: This, a: A) => TResult a _ Returns (this: This, a: A) => TResult partial(f, _this, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, _this: _this, a: A, b: B, c: _): (_this: This, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult _this _this a A b B c _ Returns (_this: This, c: C) => TResult partial(f, _this, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, _this: _this, a: _, b: _, c: C): (_this: This, a: A, b: B) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult _this _this a _ b _ c C Returns (_this: This, a: A, b: B) => TResult partial(f, _this, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, _this: _this, a: A, b: _, c: _): (_this: This, b: B, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult _this _this a A b _ c _ Returns (_this: This, b: B, c: C) => TResult partial(f, _this, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, _this: _this, a: _, b: B, c: _): (_this: This, a: A, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult _this _this a _ b B c _ Returns (_this: This, a: A, c: C) => TResult partial(f, _this, a, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, _this: _this, a: _, b: _, c: _): (_this: This, a: A, b: B, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult _this _this a _ b _ c _ Returns (_this: This, a: A, b: B, c: C) => TResult partial(f, a, _this, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, _this: _this, b: B, c: C): (_this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A _this _this b B c C Returns (_this: This) => TResult partial(f, a, _this, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, _this: _this, b: B, c: C): (a: A, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ _this _this b B c C Returns (a: A, _this: This) => TResult partial(f, a, _this, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, _this: _this, b: _, c: C): (_this: This, b: B) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A _this _this b _ c C Returns (_this: This, b: B) => TResult partial(f, a, _this, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, _this: _this, b: B, c: _): (_this: This, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A _this _this b B c _ Returns (_this: This, c: C) => TResult partial(f, a, _this, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, _this: _this, b: _, c: C): (a: A, _this: This, b: B) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ _this _this b _ c C Returns (a: A, _this: This, b: B) => TResult partial(f, _this, a) Declaration export declare function partial<This, A, TResult>(f: (this: This, a: A) => TResult, _this: _this, a: A): (_this: This) => TResult; Type Parameters This A TResult Parameters f (this: This, a: A) => TResult _this _this a A Returns (_this: This) => TResult partial(f, a, _this, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, _this: _this, b: _, c: _): (_this: This, b: B, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A _this _this b _ c _ Returns (_this: This, b: B, c: C) => TResult partial(f, a, _this, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, _this: _this, b: B, c: _): (a: A, _this: This, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ _this _this b B c _ Returns (a: A, _this: This, c: C) => TResult partial(f, a, _this, b, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, _this: _this, b: _, c: _): (a: A, _this: This, b: B, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ _this _this b _ c _ Returns (a: A, _this: This, b: B, c: C) => TResult partial(f, a, b, _this, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: B, _this: _this, c: C): (_this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b B _this _this c C Returns (_this: This) => TResult partial(f, a, b, _this, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: B, _this: _this, c: C): (a: A, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b B _this _this c C Returns (a: A, _this: This) => TResult partial(f, a, b, _this, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: _, _this: _this, c: C): (b: B, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b _ _this _this c C Returns (b: B, _this: This) => TResult partial(f, a, b, _this, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: B, _this: _this, c: _): (_this: This, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b B _this _this c _ Returns (_this: This, c: C) => TResult partial(f, a, b, _this, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: _, _this: _this, c: C): (a: A, b: B, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b _ _this _this c C Returns (a: A, b: B, _this: This) => TResult partial(f, a, b, _this, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: _, _this: _this, c: _): (b: B, _this: This, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b _ _this _this c _ Returns (b: B, _this: This, c: C) => TResult partial(f, a, b, _this, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: B, _this: _this, c: _): (a: A, _this: This, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b B _this _this c _ Returns (a: A, _this: This, c: C) => TResult partial(f, _this, a) Declaration export declare function partial<This, A, TResult>(f: (this: This, a: A) => TResult, _this: _this, a: _): (_this: This, a: A) => TResult; Type Parameters This A TResult Parameters f (this: This, a: A) => TResult _this _this a _ Returns (_this: This, a: A) => TResult partial(f, a, b, _this, c) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: _, _this: _this, c: _): (a: A, b: B, _this: This, c: C) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b _ _this _this c _ Returns (a: A, b: B, _this: This, c: C) => TResult partial(f, a, b, c, _this) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: B, c: C, _this: _this): (_this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b B c C _this _this Returns (_this: This) => TResult partial(f, a, b, c, _this) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: B, c: C, _this: _this): (a: A, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b B c C _this _this Returns (a: A, _this: This) => TResult partial(f, a, b, c, _this) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: _, c: C, _this: _this): (b: B, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b _ c C _this _this Returns (b: B, _this: This) => TResult partial(f, a, b, c, _this) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: B, c: _, _this: _this): (c: C, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b B c _ _this _this Returns (c: C, _this: This) => TResult partial(f, a, b, c, _this) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: _, c: C, _this: _this): (a: A, b: B, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b _ c C _this _this Returns (a: A, b: B, _this: This) => TResult partial(f, a, b, c, _this) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: A, b: _, c: _, _this: _this): (b: B, c: C, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a A b _ c _ _this _this Returns (b: B, c: C, _this: This) => TResult partial(f, a, b, c, _this) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: B, c: _, _this: _this): (a: A, c: C, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b B c _ _this _this Returns (a: A, c: C, _this: This) => TResult partial(f, a, b, c, _this) Declaration export declare function partial<This, A, B, C, TResult>(f: (this: This, a: A, b: B, c: C) => TResult, a: _, b: _, c: _, _this: _this): (a: A, b: B, c: C, _this: This) => TResult; Type Parameters This A B C TResult Parameters f (this: This, a: A, b: B, c: C) => TResult a _ b _ c _ _this _this Returns (a: A, b: B, c: C, _this: This) => TResult partial(f, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: B, c: C, _rest: _rest): (this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b B c C _rest _rest Returns (this: This, ...rest: TRest) => TResult partial(f, a, _this) Declaration export declare function partial<This, A, TResult>(f: (this: This, a: A) => TResult, a: A, _this: _this): (_this: This) => TResult; Type Parameters This A TResult Parameters f (this: This, a: A) => TResult a A _this _this Returns (_this: This) => TResult partial(f, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: B, c: C, _rest: _rest): (this: This, a: A, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b B c C _rest _rest Returns (this: This, a: A, ...rest: TRest) => TResult partial(f, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: _, c: C, _rest: _rest): (this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b _ c C _rest _rest Returns (this: This, b: B, ...rest: TRest) => TResult partial(f, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: B, c: _, _rest: _rest): (this: This, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b B c _ _rest _rest Returns (this: This, c: C, ...rest: TRest) => TResult partial(f, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: _, c: C, _rest: _rest): (this: This, a: A, b: B, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b _ c C _rest _rest Returns (this: This, a: A, b: B, ...rest: TRest) => TResult partial(f, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: A, b: _, c: _, _rest: _rest): (this: This, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a A b _ c _ _rest _rest Returns (this: This, b: B, c: C, ...rest: TRest) => TResult partial(f, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: B, c: _, _rest: _rest): (this: This, a: A, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b B c _ _rest _rest Returns (this: This, a: A, c: C, ...rest: TRest) => TResult partial(f, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, a: _, b: _, c: _, _rest: _rest): (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult a _ b _ c _ _rest _rest Returns (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult partial(f, _this, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, _this: _this, a: A, b: B, c: C, _rest: _rest): (_this: This, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult _this _this a A b B c C _rest _rest Returns (_this: This, ...rest: TRest) => TResult partial(f, _this, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, _this: _this, a: _, b: B, c: C, _rest: _rest): (_this: This, a: A, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult _this _this a _ b B c C _rest _rest Returns (_this: This, a: A, ...rest: TRest) => TResult partial(f, _this, a, b, c, _rest) Declaration export declare function partial<This, A, B, C, TRest extends any[], TResult>(f: (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult, _this: _this, a: A, b: _, c: C, _rest: _rest): (_this: This, b: B, ...rest: TRest) => TResult; Type Parameters This A B C TRest TResult Parameters f (this: This, a: A, b: B, c: C, ...rest: TRest) => TResult _this _this a A b _ c C _rest _rest Returns (_this: This, b: B, ...rest: TRest) => TResult Variables placeholder A placeholder for a partial application argument. See partial for more information. Declaration placeholder: unique symbol restPlaceholder A placeholder for a partial application argument that should pass on excess arguments. See partial for more information. Declaration restPlaceholder: unique symbol thisPlaceholder A placeholder for a partial application argument that should be used as the this binding. See partial for more information. Declaration thisPlaceholder: unique symbol Namespaces partial"
  },
  "api/fn-partial/partial-namespace.html": {
    "href": "api/fn-partial/partial-namespace.html",
    "title": "partial Namespace | @esfx API Reference",
    "keywords": "partial Namespace Package : @esfx/fn-partial Variables _ Declaration _: typeof placeholder _rest Declaration _rest: typeof restPlaceholder _this Declaration _this: typeof thisPlaceholder"
  },
  "api/indexed-object.html": {
    "href": "api/indexed-object.html",
    "title": "@esfx/indexed-object Package | @esfx API Reference",
    "keywords": "@esfx/indexed-object Package Provides a base class for custom integer-indexed collections. The underlying implementation uses a Proxy to trap integer indexes in a fashion similar to the Integer-Indexed Exotic Object in the ECMAScript specification. Installation npm i @esfx/indexed-object Usage TypeScript JavaScript (CommonJS) import { IntegerIndexedObject } from \"@esfx/indexed-object\"; class BooleansCollection extends IntegerIndexedObject<boolean> { protected getLength() { return 2; } protected getIndex(index: number) { switch (index) { case 0: return false; case 1: return true; default: return undefined; } } // hasIndex(index): boolean // setIndex(index, value): boolean // deleteIndex(index): boolean } const booleans = new BooleansCollection(); console.log(booleans[0]); // false console.log(booleans[1]); // true const { IntegerIndexedObject } = require(\"@esfx/indexed-object\"); class BooleansCollection extends IntegerIndexedObject { /** @protected */ getLength() { return 2; } /** @protected */ getIndex(index) { switch (index) { case 0: return false; case 1: return true; default: return undefined; } } // hasIndex(index): boolean // setIndex(index, value): boolean // deleteIndex(index): boolean } const booleans = new BooleansCollection(); console.log(booleans[0]); // false console.log(booleans[1]); // true Classes IntegerIndexedObject Represents an object that can be indexed by an integer value similar to a native Array or TypedArray."
  },
  "api/indexed-object/integerindexedobject.html": {
    "href": "api/indexed-object/integerindexedobject.html",
    "title": "IntegerIndexedObject Class | @esfx API Reference",
    "keywords": "IntegerIndexedObject Class Package : @esfx/indexed-object Represents an object that can be indexed by an integer value similar to a native Array or TypedArray. Declaration export declare abstract class IntegerIndexedObject<T> Constructors constructor() Constructs a new instance of the IntegerIndexedObject class Declaration constructor(); Methods deleteIndex(index) Deletes the value at the specified index. Declaration protected deleteIndex(index: number): boolean; Parameters index number An integer index greater than or equal to zero ( 0 <!-- --> ). Returns boolean true if the value was successfully deleted; otherwise, false <!-- --> . getIndex(index) Gets the value at the specified index. Declaration protected abstract getIndex(index: number): T; Parameters index number An integer index greater than or equal to zero ( 0 <!-- --> ). Returns T getLength() Gets the \"length\" of the indexed object, which should be one more than the largest index stored in the object. Declaration protected abstract getLength(): number; Returns number hasIndex(index) Determines whether the object contains a value at the specified index. Declaration protected hasIndex(index: number): boolean; Parameters index number An integer index greater than or equal to zero ( 0 <!-- --> ). Returns boolean setIndex(index, value) Sets the value at the specified index. Declaration protected setIndex(index: number, value: T): boolean; Parameters index number An integer index greater than or equal to zero ( 0 <!-- --> ). value T The value to set for the specified index. Returns boolean true if the value could be set; otherwise, false <!-- --> ."
  },
  "api/interval.html": {
    "href": "api/interval.html",
    "title": "@esfx/interval Package | @esfx API Reference",
    "keywords": "@esfx/interval Package An implementation of Index and Interval types for ECMAScript Installation npm i @esfx/interval Usage TBD Classes Index Represents an ordinal index within an indexed collection. Interval Represents an interval within an indexed collection."
  },
  "api/interval/index.html": {
    "href": "api/interval/index.html",
    "title": "Index Class | @esfx API Reference",
    "keywords": "Index Class Package : @esfx/interval Represents an ordinal index within an indexed collection. Declaration export declare class Index implements Equatable Constructors constructor(value, isFromEnd) Constructs a new instance of the Index class Declaration constructor(value: number, isFromEnd?: boolean); Parameters value number isFromEnd boolean Properties end Gets an Index representing the last element of an indexed collection. Declaration static get end(): Index; Property Value Index isFromEnd Gets a value indicating whether the index value is relative to the end of the collection. Declaration get isFromEnd(): boolean; Property Value boolean start Gets an Index representing the first element of an indexed collection. Declaration static get start(): Index; Property Value Index value Gets the value for the index. Declaration get value(): number; Property Value number Methods [Equatable.equals](other) Declaration [Equatable.equals](other: unknown): boolean; Parameters other unknown Returns boolean [Equatable.hash]() Declaration [Equatable.hash](): number; Returns number equals(other) Declaration equals(other: Index): boolean; Parameters other Index Returns boolean fromEnd(value) Creates an index relative to the end of an indexed collection. Declaration static fromEnd(value: number): Index; Parameters value number Returns Index fromStart(value) Creates an index relative to the start of an indexed collection. Declaration static fromStart(value: number): Index; Parameters value number Returns Index getIndex(length) Computes the index based on a fixed length. Declaration getIndex(length: number): number; Parameters length number The number of elements in the collection. Returns number hash() Declaration hash(): number; Returns number toString() Declaration toString(): string; Returns string"
  },
  "api/interval/interval.html": {
    "href": "api/interval/interval.html",
    "title": "Interval Class | @esfx API Reference",
    "keywords": "Interval Class Package : @esfx/interval Represents an interval within an indexed collection. Declaration export declare class Interval Constructors constructor(start, end, step) Creates a new Interval <!-- --> . Declaration constructor(start: number | Index, end: number | Index, step?: number); Parameters start number | Index The start of the interval (inclusive). end number | Index The end of the interval (exclusive). step number The number of elements to advance when stepping through an indexed collection (default: 1 <!-- --> ). Properties all Gets an Interval that represents every element of a collection. Declaration static get all(): Interval; Property Value Interval end Gets an Index that represents the end of the interval (exclusive). Declaration get end(): Index; Property Value Index start Gets an Index that represents the start of the interval (inclusive). Declaration get start(): Index; Property Value Index step Gets the number of elements to advance when stepping through an indexed collection. Declaration get step(): number; Property Value number Methods [Equatable.equals](other) Declaration [Equatable.equals](other: unknown): boolean; Parameters other unknown Returns boolean [Equatable.hash]() Declaration [Equatable.hash](): number; Returns number [Symbol.iterator]() Declaration [Symbol.iterator](): Generator<number, void, unknown>; Returns Generator <number, void, unknown> endAt(index) Creates a new Interval between the specified index (exclusive) and the start of the indexed collection. Declaration static endAt(index: number | Index): Interval; Parameters index number | Index Returns Interval equals(other) Declaration equals(other: Interval): boolean; Parameters other Interval Returns boolean getIndices(length) Calculates the start and end offsets given the length of an indexed collection. Declaration getIndices(length: number): [number, number, number]; Parameters length number Returns [number, number, number] A tuple of [start, end, step] <!-- --> . hash() Declaration hash(): number; Returns number startAt(index) Creates a new Interval between the specified index (inclusive) and the end of the indexed collection. Declaration static startAt(index: number | Index): Interval; Parameters index number | Index Returns Interval toString() Declaration toString(): string; Returns string values(length) Yields each offset within the interval given the length of an indexed collection. Declaration values(length?: number): Generator<number, void, unknown>; Parameters length number Returns Generator <number, void, unknown>"
  },
  "api/iter.html": {
    "href": "api/iter.html",
    "title": "@esfx/iter Package | @esfx API Reference",
    "keywords": "@esfx/iter Package A collection of iteration and query APIs for ECMAScript iterables. @esfx/fn @esfx/iter-fn @esfx/iter-grouping @esfx/iter-hierarchy @esfx/iter-lookup @esfx/iter-ordered @esfx/iter-page @esfx/iter-query @esfx/equatable @esfx/collection-core @esfx/collections-hashmap @esfx/collections-hashset Installation npm i @esfx/iter Usage TBD"
  },
  "api/iter-fn.html": {
    "href": "api/iter-fn.html",
    "title": "@esfx/iter-fn Package | @esfx API Reference",
    "keywords": "@esfx/iter-fn Package An iteration and query API for ECMAScript iterables. Installation npm i @esfx/iter-fn Usage TypeScript JavaScript (CommonJS) import { map } from \"@esfx/iter-fn\"; const x = map([1, 2, 3], x => x * 2); x; // [2, 4, 6] const { map } = require(\"@esfx/iter-fn\"); const x = map([1, 2, 3], x => x * 2); x; // [2, 4, 6] Interfaces ConsumeOptions Functions ancestors(source, predicate) Selects the ancestors of each node in the iterable. This is equivalent to the ancestor::* selector in XPath. Hierarchy Declaration export declare function ancestors<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> ancestors(source, predicate) Declaration export declare function ancestors<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> ancestorsAndSelf(source, predicate) Selects the ancestors of each node in the iterable, along with the node itself. This is equivalent to the ancestor-or-self::* selector in XPath. Hierarchy Declaration export declare function ancestorsAndSelf<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> ancestorsAndSelf(source, predicate) Declaration export declare function ancestorsAndSelf<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> append(source, value) Creates an Iterable for the elements of source with the provided value appended to the end. Declaration export declare function append<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, value: T): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> The Iterable to append to. value T The value to append. Subquery Returns HierarchyIterable <TNode, T> append(source, value) Creates an Iterable for the elements of source with the provided value appended to the end. Declaration export declare function append<T>(source: Iterable<T>, value: T): Iterable<T>; Type Parameters T Parameters source Iterable <T> The Iterable to append to. value T The value to append. Subquery Returns Iterable <T> average(source) Computes the average for a series of numbers. Declaration export declare function average(source: Iterable<number>): number; Parameters source Iterable <number> An Iterable object. Scalar Returns number average(source, elementSelector) Computes the average for a series of numbers. Declaration export declare function average<T>(source: Iterable<T>, elementSelector: (element: T) => number): number; Type Parameters T Parameters source Iterable <T> An Iterable object. elementSelector (element: T) => number A callback used to convert a value in source to a number. Scalar Returns number bottomMost(source, predicate, equaler) Creates a HierarchyIterable for the bottom-most elements of a HierarchyIterable <!-- --> . Elements of source that are an ancestor of any other element of source are removed. Declaration export declare function bottomMost<TNode, T extends TNode, U extends T>(source: HierarchyIterable<TNode, T>, predicate: (value: T) => value is U, equaler?: Equaler<TNode>): HierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source HierarchyIterable <TNode, T> A HierarchyIterable object. predicate (value: T) => value is U An optional callback used to filter the results. Hierarchy equaler Equaler <TNode> Returns HierarchyIterable <TNode, U> bottomMost(source, predicate, equaler) Creates a HierarchyIterable for the bottom-most elements of a HierarchyIterable <!-- --> . Elements of source that are an ancestor of any other element of source are removed. Declaration export declare function bottomMost<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate?: (value: T) => boolean, equaler?: Equaler<TNode>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> A HierarchyIterable object. predicate (value: T) => boolean An optional callback used to filter the results. equaler Equaler <TNode> An optional Equaler used to compare equality between nodes. Hierarchy Returns HierarchyIterable <TNode, T> children(source, predicate) Selects the children of each node in the iterable. This is equivalent to the child::* selector in XPath, or the > combinator in CSS. Hierarchy Declaration export declare function children<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> children(source, predicate) Declaration export declare function children<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> concat(left, right) Creates an Iterable that concatenates two Iterable objects. Declaration export declare function concat<TNode, T extends TNode>(left: HierarchyIterable<TNode, T>, right: Iterable<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left HierarchyIterable <TNode, T> An Iterable object. right Iterable <T> An Iterable object. Subquery Returns HierarchyIterable <TNode, T> concat(left, right) Creates an Iterable that concatenates two Iterable objects. Declaration export declare function concat<TNode, T extends TNode>(left: Iterable<T>, right: HierarchyIterable<TNode, T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left Iterable <T> An Iterable object. right HierarchyIterable <TNode, T> An Iterable object. Subquery Returns HierarchyIterable <TNode, T> concat(left, right) Creates an Iterable that concatenates two Iterable objects. Declaration export declare function concat<T>(left: Iterable<T>, right: Iterable<T>): Iterable<T>; Type Parameters T Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. Subquery Returns Iterable <T> consume(iterator, options) Creates an Iterable that, when iterated, consumes the provided Iterator <!-- --> . Declaration export declare function consume<T>(iterator: Iterator<T>, options?: ConsumeOptions): Iterable<T>; Type Parameters T Parameters iterator Iterator <T> An Iterator object. Query options ConsumeOptions Returns Iterable <T> continuous(value) Creates an Iterable that repeats the provided value forever. Declaration export declare function continuous<T>(value: T): Iterable<T>; Type Parameters T Parameters value T The value for each element of the Iterable <!-- --> . Query Returns Iterable <T> copyTo(source, collection, start, count) Writes each element of a source iterable to a destination. The destination must already have enough space to write the requested number of elements (i.e. arrays are *not* resized). Declaration export declare function copyTo<T, U extends IndexedCollection<T> | T[]>(source: Iterable<T>, collection: U, start?: number, count?: number): U; Type Parameters T U Parameters source Iterable <T> An Iterable object. collection U The destination array or IndexedCollection <!-- --> . start number The offset into the array at which to start writing. count number The number of elements to write to the array. Scalar Returns U corresponds(left, right, equaler) Computes a scalar value indicating whether every element in left corresponds to a matching element in right at the same position. Declaration export declare function corresponds<T>(left: Iterable<T>, right: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Type Parameters T Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns boolean corresponds(left, right, equaler) Computes a scalar value indicating whether every element in left corresponds to a matching element in right at the same position. Declaration export declare function corresponds<T, U>(left: Iterable<T>, right: Iterable<U>, equaler: (left: T, right: U) => boolean): boolean; Type Parameters T U Parameters left Iterable <T> An Iterable object. right Iterable <U> An Iterable object. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns boolean correspondsBy(left, right, keySelector, keyEqualer) Computes a scalar value indicating whether the key for every element in left corresponds to a matching key in right at the same position. Declaration export declare function correspondsBy<T, K>(left: Iterable<T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): boolean; Type Parameters T K Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. Scalar keyEqualer Equaler <K> Returns boolean correspondsBy(left, right, leftKeySelector, rightKeySelector, keyEqualer) Computes a scalar value indicating whether the key for every element in left corresponds to a matching key in right at the same position. Declaration export declare function correspondsBy<T, U, K>(left: Iterable<T>, right: Iterable<U>, leftKeySelector: (element: T) => K, rightKeySelector: (element: U) => K, keyEqualer?: EqualityComparison<K> | Equaler<K>): boolean; Type Parameters T U K Parameters left Iterable <T> An Iterable object. right Iterable <U> An Iterable object. leftKeySelector (element: T) => K A callback used to select the key for each element in left <!-- --> . rightKeySelector (element: U) => K A callback used to select the key for each element in right <!-- --> . keyEqualer EqualityComparison <K> | Equaler <K> An optional callback used to compare the equality of two keys. Scalar Returns boolean count(source, predicate) Counts the number of elements, optionally filtering elements using the supplied callback. Declaration export declare function count<T>(source: Iterable<T>, predicate?: (element: T) => boolean): number; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns number defaultIfEmpty(source, defaultValue) Creates an Iterable that contains the provided default value if source contains no elements. Declaration export declare function defaultIfEmpty<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, defaultValue: T): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. defaultValue T The default value. Subquery Returns HierarchyIterable <TNode, T> defaultIfEmpty(source, defaultValue) Creates an Iterable that contains the provided default value if source contains no elements. Declaration export declare function defaultIfEmpty<T>(source: Iterable<T>, defaultValue: T): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. defaultValue T The default value. Subquery Returns Iterable <T> descendants(source, predicate) Selects the descendents of each node in the iterable. This is equivalent to the descendant::* selector in XPath, or the (space) combinator in CSS. Hierarchy Declaration export declare function descendants<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> descendants(source, predicate) Declaration export declare function descendants<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> descendantsAndSelf(source, predicate) Selects the descendents of each node in the iterable, along with the node itself. This is equivalent to the descendant-or-self::* selector in XPath. Hierarchy Declaration export declare function descendantsAndSelf<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> descendantsAndSelf(source, predicate) Declaration export declare function descendantsAndSelf<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> distinct(source, keyEqualer) Creates an Iterable for the distinct elements of source <!-- --> . Subquery Declaration export declare function distinct<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keyEqualer Equaler <K> Returns HierarchyIterable <TNode, T> distinct(source, equaler) Creates an Iterable for the distinct elements of source <!-- --> . Subquery Declaration export declare function distinct<T>(source: Iterable<T>, equaler?: Equaler<T>): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. equaler Equaler <T> An Equaler object used to compare element equality. Returns Iterable <T> distinctBy(source, keySelector, keyEqualer) Creates an Iterable for the distinct elements of source <!-- --> . Subquery Declaration export declare function distinctBy<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (value: T) => K, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (value: T) => K A callback used to select the key to determine uniqueness. keyEqualer Equaler <K> An Equaler object used to compare key equality. Returns HierarchyIterable <TNode, T> distinctBy(source, keySelector, keyEqualer) Creates an Iterable for the distinct elements of source <!-- --> . Subquery Declaration export declare function distinctBy<T, K>(source: Iterable<T>, keySelector: (value: T) => K, keyEqualer?: Equaler<K>): Iterable<T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (value: T) => K A callback used to select the key to determine uniqueness. keyEqualer Equaler <K> An Equaler object used to compare key equality. Returns Iterable <T> drop(source, count) Creates a subquery containing all elements except the first elements up to the supplied count. Declaration export declare function drop<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, count: number): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. count number The number of elements to skip. Subquery Returns HierarchyIterable <TNode, T> drop(source, count) Creates a subquery containing all elements except the first elements up to the supplied count. Declaration export declare function drop<T>(source: Iterable<T>, count: number): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. count number The number of elements to skip. Subquery Returns Iterable <T> dropRight(source, count) Creates a subquery containing all elements except the last elements up to the supplied count. Declaration export declare function dropRight<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, count: number): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. count number The number of elements to skip. Subquery Returns HierarchyIterable <TNode, T> dropRight(source, count) Creates a subquery containing all elements except the last elements up to the supplied count. Declaration export declare function dropRight<T>(source: Iterable<T>, count: number): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. count number The number of elements to skip. Subquery Returns Iterable <T> dropUntil(source, predicate) Creates a subquery containing all elements except the first elements that do not match the supplied predicate. Declaration export declare function dropUntil<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate: (element: T) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Subquery Returns HierarchyIterable <TNode, T> dropUntil(source, predicate) Creates a subquery containing all elements except the first elements that do not match the supplied predicate. Declaration export declare function dropUntil<T>(source: Iterable<T>, predicate: (element: T) => boolean): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Subquery Returns Iterable <T> dropWhile(source, predicate) Creates a subquery containing all elements except the first elements that match the supplied predicate. Declaration export declare function dropWhile<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate: (element: T) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Subquery Returns HierarchyIterable <TNode, T> dropWhile(source, predicate) Creates a subquery containing all elements except the first elements that match the supplied predicate. Declaration export declare function dropWhile<T>(source: Iterable<T>, predicate: (element: T) => boolean): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Subquery Returns Iterable <T> elementAt(source, offset) Finds the value at the provided offset. A negative offset starts from the last element. Declaration export declare function elementAt<T>(source: Iterable<T>, offset: number | Index): T | undefined; Type Parameters T Parameters source Iterable <T> An Iterable object. offset number | Index An offset. Scalar Returns T | undefined empty() Creates an Iterable with no elements. Query Declaration export declare function empty<T>(): Iterable<T>; Type Parameters T Returns Iterable <T> endsWith(left, right, equaler) Computes a scalar value indicating whether the elements of left end with the same sequence of elements in right <!-- --> . Declaration export declare function endsWith<T>(left: Iterable<T>, right: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Type Parameters T Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns boolean endsWith(left, right, equaler) Computes a scalar value indicating whether the elements of left end with the same sequence of elements in right <!-- --> . Declaration export declare function endsWith<T, U>(left: Iterable<T>, right: Iterable<U>, equaler: (left: T, right: U) => boolean): boolean; Type Parameters T U Parameters left Iterable <T> An Iterable object. right Iterable <U> An Iterable object. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns boolean every(source, predicate) Computes a scalar value indicating whether all elements match the supplied callback. Declaration export declare function every<T, U extends T>(source: Iterable<T>, predicate: (element: T) => element is U): source is Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T) => element is U A callback used to match each element. Scalar Returns source is Iterable <U> every(source, predicate) Computes a scalar value indicating whether all elements match the supplied callback. Declaration export declare function every<T>(source: Iterable<T>, predicate: (element: T) => boolean): boolean; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Scalar Returns boolean except(left, right, equaler) Creates an Iterable for the set difference between two Iterable objects. Declaration export declare function except<TNode, T extends TNode>(left: HierarchyIterable<TNode, T>, right: Iterable<T>, equaler?: Equaler<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left HierarchyIterable <TNode, T> An Iterable object. right Iterable <T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns HierarchyIterable <TNode, T> except(left, right, equaler) Creates an Iterable for the set difference between two Iterable objects. Declaration export declare function except<T>(left: Iterable<T>, right: Iterable<T>, equaler?: Equaler<T>): Iterable<T>; Type Parameters T Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns Iterable <T> exceptBy(left, right, keySelector, keyEqualer) Creates an Iterable for the set difference between two Iterable objects, where set identity is determined by the selected key. Declaration export declare function exceptBy<TNode, T extends TNode, K>(left: HierarchyIterable<TNode, T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left HierarchyIterable <TNode, T> An Iterable object. right Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns HierarchyIterable <TNode, T> exceptBy(left, right, keySelector, keyEqualer) Creates an Iterable for the set difference between two Iterable objects, where set identity is determined by the selected key. Declaration export declare function exceptBy<T, K>(left: Iterable<T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Iterable<T>; Type Parameters T K Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable <T> exclude(source, values) Creates an Iterable with every instance of the specified value removed. Declaration export declare function exclude<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, ...values: T[]): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. values T[] The values to exclude. Subquery Returns HierarchyIterable <TNode, T> exclude(source, values) Creates an Iterable with every instance of the specified value removed. Declaration export declare function exclude<T>(source: Iterable<T>, ...values: T[]): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. values T[] The values to exclude. Subquery Returns Iterable <T> filter(source, predicate) Creates an Iterable whose elements match the supplied predicate. Declaration export declare function filter<TNode, T extends TNode, U extends T>(source: HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T, offset: number) => element is U A callback used to match each element. Subquery Returns HierarchyIterable <TNode, U> filter(source, predicate) Creates an Iterable whose elements match the supplied predicate. Declaration export declare function filter<T, U extends T>(source: Iterable<T>, predicate: (element: T, offset: number) => element is U): Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T, offset: number) => element is U A callback used to match each element. Subquery Returns Iterable <U> filter(source, predicate) Creates an Iterable whose elements match the supplied predicate. Declaration export declare function filter<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T, offset: number) => boolean A callback used to match each element. Subquery Returns HierarchyIterable <TNode, T> filter(source, predicate) Creates an Iterable whose elements match the supplied predicate. Declaration export declare function filter<T>(source: Iterable<T>, predicate: (element: T, offset: number) => boolean): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T, offset: number) => boolean A callback used to match each element. Subquery Returns Iterable <T> filterBy(source, keySelector, predicate) Creates an Iterable where the selected key for each element matches the supplied predicate. Declaration export declare function filterBy<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, predicate: (key: K, offset: number) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => boolean A callback used to match each key. Subquery Returns HierarchyIterable <TNode, T> filterBy(source, keySelector, predicate) Creates an Iterable where the selected key for each element matches the supplied predicate. Declaration export declare function filterBy<T, K>(source: Iterable<T>, keySelector: (element: T) => K, predicate: (key: K, offset: number) => boolean): Iterable<T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => boolean A callback used to match each key. Subquery Returns Iterable <T> filterDefined(source) Creates an Iterable whose elements are neither null nor undefined <!-- --> . Declaration export declare function filterDefined<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>): HierarchyIterable<TNode, NonNullable<T>>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. Subquery Returns HierarchyIterable <TNode, NonNullable <T>> filterDefined(source) Creates an Iterable whose elements are neither null nor undefined <!-- --> . Declaration export declare function filterDefined<T>(source: Iterable<T>): Iterable<NonNullable<T>>; Type Parameters T Parameters source Iterable <T> An Iterable object. Subquery Returns Iterable < NonNullable <T>> filterDefinedBy(source, keySelector) Creates an Iterable where the selected key for each element is neither null nor undefined <!-- --> . Declaration export declare function filterDefinedBy<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (value: T) => K): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (value: T) => K A callback used to select the key for each element. Subquery Returns HierarchyIterable <TNode, T> filterDefinedBy(source, keySelector) Creates an Iterable where the selected key for each element is neither null nor undefined <!-- --> . Declaration export declare function filterDefinedBy<T, K>(source: Iterable<T>, keySelector: (value: T) => K): Iterable<T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (value: T) => K A callback used to select the key for each element. Subquery Returns Iterable <T> filterNot(source, predicate) Creates an Iterable whose elements do not match the supplied predicate. Declaration export declare function filterNot<TNode, T extends TNode, U extends T>(source: HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T, offset: number) => element is U A callback used to match each element. Subquery Returns HierarchyIterable <TNode, U> filterNot(source, predicate) Creates an Iterable whose elements do not match the supplied predicate. Declaration export declare function filterNot<T, U extends T>(source: Iterable<T>, predicate: (element: T, offset: number) => element is U): Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T, offset: number) => element is U A callback used to match each element. Subquery Returns Iterable <U> filterNot(source, predicate) Creates an Iterable whose elements do not match the supplied predicate. Declaration export declare function filterNot<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T, offset: number) => boolean A callback used to match each element. Subquery Returns HierarchyIterable <TNode, T> filterNot(source, predicate) Creates an Iterable whose elements do not match the supplied predicate. Declaration export declare function filterNot<T>(source: Iterable<T>, predicate: (element: T, offset: number) => boolean): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T, offset: number) => boolean A callback used to match each element. Subquery Returns Iterable <T> filterNotBy(source, keySelector, predicate) Creates an Iterable where the selected key for each element does not match the supplied predicate. Declaration export declare function filterNotBy<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, predicate: (key: K, offset: number) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => boolean A callback used to match each key. Subquery Returns HierarchyIterable <TNode, T> filterNotBy(source, keySelector, predicate) Creates an Iterable where the selected key for each element does not match the supplied predicate. Declaration export declare function filterNotBy<T, K>(source: Iterable<T>, keySelector: (element: T) => K, predicate: (key: K, offset: number) => boolean): Iterable<T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => boolean A callback used to match each key. Subquery Returns Iterable <T> filterNotDefinedBy(source, keySelector) Creates an Iterable where the selected key for each element is either null or undefined <!-- --> . Declaration export declare function filterNotDefinedBy<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (value: T) => K): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (value: T) => K A callback used to select the key for each element. Subquery Returns HierarchyIterable <TNode, T> filterNotDefinedBy(source, keySelector) Creates an Iterable where the selected key for each element is either null or undefined <!-- --> . Declaration export declare function filterNotDefinedBy<T, K>(source: Iterable<T>, keySelector: (value: T) => K): Iterable<T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (value: T) => K A callback used to select the key for each element. Subquery Returns Iterable <T> first(source, predicate) Gets the first element, optionally filtering elements using the supplied callback. Declaration export declare function first<T, U extends T>(source: Iterable<T>, predicate: (element: T) => element is U): U | undefined; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns U | undefined first(source, predicate) Gets the first element, optionally filtering elements using the supplied callback. Declaration export declare function first<T>(source: Iterable<T>, predicate?: (element: T) => boolean): T | undefined; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns T | undefined firstChild(source, predicate) Selects the first child of each node in the iterable. This is equivalent to the child::*[first()] selector in XPath, or the :first-child pseudo class in CSS. Hierarchy Declaration export declare function firstChild<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> firstChild(source, predicate) Declaration export declare function firstChild<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> flatMap(source, projection) Creates an Iterable that iterates the results of applying a callback to each element of source <!-- --> . Declaration export declare function flatMap<T, U>(source: Iterable<T>, projection: (element: T) => Iterable<U>): Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. projection (element: T) => Iterable <U> A callback used to map each element into an iterable. Subquery Returns Iterable <U> flatMap(source, projection, resultSelector) Creates an Iterable that iterates the results of applying a callback to each element of source <!-- --> . Declaration export declare function flatMap<T, U, R>(source: Iterable<T>, projection: (element: T) => Iterable<U>, resultSelector: (element: T, innerElement: U) => R): Iterable<R>; Type Parameters T U R Parameters source Iterable <T> An Iterable object. projection (element: T) => Iterable <U> A callback used to map each element into an iterable. resultSelector (element: T, innerElement: U) => R A callback used to map an element and one of its projected values into a result. Subquery Returns Iterable <R> following(source, predicate) Selects the nodes that follow each node in the iterable. This is equivalent to the following-sibling::* selector in XPath or the ~ combinator in CSS. Hierarchy Declaration export declare function following<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> following(source, predicate) Declaration export declare function following<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> followingSiblings(source, predicate) Selects the siblings that follow each node in the iterable. This is equivalent to the following-sibling::* selector in XPath or the ~ combinator in CSS. Hierarchy Declaration export declare function followingSiblings<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> followingSiblings(source, predicate) Declaration export declare function followingSiblings<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> forEach(source, callback) Invokes a callback for each element of source <!-- --> . Declaration export declare function forEach<T>(source: Iterable<T>, callback: (element: T, offset: number) => void): void; Type Parameters T Parameters source Iterable <T> An Iterable object. callback (element: T, offset: number) => void The callback to invoke. Scalar Returns void fullJoin(outer, inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates an Iterable for the correlated elements between an outer Iterable object and an inner Iterable object. Declaration export declare function fullJoin<O, I, K, R>(outer: Iterable<O>, inner: Iterable<I>, outerKeySelector: (element: O) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: O | undefined, inner: I | undefined) => R, keyEqualer?: Equaler<K>): Iterable<R>; Type Parameters O I K R Parameters outer Iterable <O> An Iterable object. inner Iterable <I> An Iterable object. outerKeySelector (element: O) => K A callback used to select the key for an element in outer <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in inner <!-- --> . resultSelector (outer: O | undefined, inner: I | undefined) => R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns Iterable <R> generate(count, generator) Creates an Iterable whose values are provided by a callback executed a provided number of times. Declaration export declare function generate<T>(count: number, generator: (offset: number) => T): Iterable<T>; Type Parameters T Parameters count number The number of times to execute the callback. generator (offset: number) => T The callback to execute. Query Returns Iterable <T> groupBy(source, keySelector, keyEqualer) Groups each element of an Iterable by its key. Declaration export declare function groupBy<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Iterable<HierarchyGrouping<K, TNode, T>>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable < HierarchyGrouping <K, TNode, T>> groupBy(source, keySelector, elementSelector, resultSelector, keyEqualer) Groups each element of an Iterable by its key. Declaration export declare function groupBy<TNode, T extends TNode, K, R>(source: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, elementSelector: undefined, resultSelector: (key: K, elements: HierarchyIterable<TNode, T>) => R, keyEqualer?: Equaler<K>): Iterable<R>; Type Parameters TNode T K R Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector undefined A callback used to select a value for an element. resultSelector (key: K, elements: HierarchyIterable <TNode, T>) => R A callback used to select a result from a group. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable <R> groupBy(source, keySelector, keyEqualer) Groups each element of an Iterable by its key. Declaration export declare function groupBy<T, K>(source: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Iterable<Grouping<K, T>>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable < Grouping <K, T>> groupBy(source, keySelector, elementSelector, keyEqualer) Groups each element of an Iterable by its key. Declaration export declare function groupBy<T, K, V>(source: Iterable<T>, keySelector: (element: T) => K, elementSelector: (element: T) => V, keyEqualer?: Equaler<K>): Iterable<Grouping<K, V>>; Type Parameters T K V Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => V A callback used to select a value for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable < Grouping <K, V>> groupBy(source, keySelector, elementSelector, resultSelector, keyEqualer) Groups each element of an Iterable by its key. Declaration export declare function groupBy<T, K, V, R>(source: Iterable<T>, keySelector: (element: T) => K, elementSelector: (element: T) => V, resultSelector: (key: K, elements: Iterable<V>) => R, keyEqualer?: Equaler<K>): Iterable<R>; Type Parameters T K V R Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => V A callback used to select a value for an element. resultSelector (key: K, elements: Iterable <V>) => R A callback used to select a result from a group. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable <R> groupJoin(outer, inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates a grouped Iterable for the correlated elements between an outer Iterable object and an inner Iterable object. Declaration export declare function groupJoin<O, I, K, R>(outer: Iterable<O>, inner: Iterable<I>, outerKeySelector: (element: O) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: O, inner: Iterable<I>) => R, keyEqualer?: Equaler<K>): Iterable<R>; Type Parameters O I K R Parameters outer Iterable <O> An Iterable object. inner Iterable <I> An Iterable object. outerKeySelector (element: O) => K A callback used to select the key for an element in outer <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in inner <!-- --> . resultSelector (outer: O, inner: Iterable <I>) => R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns Iterable <R> includes(source, value, equaler) Computes a scalar value indicating whether the provided value is included in an Iterable <!-- --> . Declaration export declare function includes<T>(source: Iterable<T>, value: T, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Type Parameters T Parameters source Iterable <T> An Iterable object. value T A value. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns boolean includes(source, value, equaler) Computes a scalar value indicating whether the provided value is included in an Iterable <!-- --> . Declaration export declare function includes<T, U>(source: Iterable<T>, value: U, equaler: (left: T, right: U) => boolean): boolean; Type Parameters T U Parameters source Iterable <T> An Iterable object. value U A value. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns boolean includesSequence(left, right, equaler) Computes a scalar value indicating whether the elements of left include an exact sequence of elements from right <!-- --> . Declaration export declare function includesSequence<T>(left: Iterable<T>, right: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Type Parameters T Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns boolean includesSequence(left, right, equaler) Computes a scalar value indicating whether the elements of left include an exact sequence of elements from right <!-- --> . Declaration export declare function includesSequence<T, U>(left: Iterable<T>, right: Iterable<U>, equaler: (left: T, right: U) => boolean): boolean; Type Parameters T U Parameters left Iterable <T> An Iterable object. right Iterable <U> An Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns boolean intersect(left, right, equaler) Creates an Iterable for the set intersection of two Iterable objects. Declaration export declare function intersect<TNode, T extends TNode>(left: HierarchyIterable<TNode, T>, right: Iterable<T>, equaler?: Equaler<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left HierarchyIterable <TNode, T> An Iterable object. right Iterable <T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns HierarchyIterable <TNode, T> intersect(left, right, equaler) Creates an Iterable for the set intersection of two Iterable objects. Declaration export declare function intersect<TNode, T extends TNode>(left: Iterable<T>, right: HierarchyIterable<TNode, T>, equaler?: Equaler<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left Iterable <T> An Iterable object. right HierarchyIterable <TNode, T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns HierarchyIterable <TNode, T> intersect(left, right, equaler) Creates an Iterable for the set intersection of two Iterable objects. Declaration export declare function intersect<T>(left: Iterable<T>, right: Iterable<T>, equaler?: Equaler<T>): Iterable<T>; Type Parameters T Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns Iterable <T> intersectBy(left, right, keySelector, keyEqualer) Creates an Iterable for the set intersection of two Iterable objects, where set identity is determined by the selected key. Declaration export declare function intersectBy<TNode, T extends TNode, K>(left: HierarchyIterable<TNode, T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left HierarchyIterable <TNode, T> An Iterable object. right Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns HierarchyIterable <TNode, T> intersectBy(left, right, keySelector, keyEqualer) Creates an Iterable for the set intersection of two Iterable objects, where set identity is determined by the selected key. Declaration export declare function intersectBy<TNode, T extends TNode, K>(left: Iterable<T>, right: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left Iterable <T> An Iterable object. right HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns HierarchyIterable <TNode, T> intersectBy(left, right, keySelector, keyEqualer) Creates an Iterable for the set intersection of two Iterable objects, where set identity is determined by the selected key. Declaration export declare function intersectBy<T, K>(left: Iterable<T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Iterable<T>; Type Parameters T K Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable <T> into(source, callback) Pass the entire source to the provided callback, returning a scalar result. Useful as the last step in a query. Declaration export declare function into<T, S extends Iterable<T>, R>(source: S, callback: (source: S) => R): R; Type Parameters T S R Parameters source S An Iterable object. callback (source: S) => R A callback function. Subquery Returns R join(outer, inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates an Iterable for the correlated elements of two Iterable objects. Declaration export declare function join<O, I, K, R>(outer: Iterable<O>, inner: Iterable<I>, outerKeySelector: (element: O) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: O, inner: I) => R, keyEqualer?: Equaler<K>): Iterable<R>; Type Parameters O I K R Parameters outer Iterable <O> An Iterable object. inner Iterable <I> An Iterable object. outerKeySelector (element: O) => K A callback used to select the key for an element in outer <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in inner <!-- --> . resultSelector (outer: O, inner: I) => R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns Iterable <R> last(source, predicate) Gets the last element of a Iterable <!-- --> , optionally filtering elements using the supplied callback. Declaration export declare function last<T, U extends T>(source: Iterable<T>, predicate: (element: T) => element is U): U | undefined; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns U | undefined last(source, predicate) Gets the last element of a Iterable <!-- --> , optionally filtering elements using the supplied callback. Declaration export declare function last<T>(source: Iterable<T>, predicate?: (element: T) => boolean): T | undefined; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns T | undefined lastChild(source, predicate) Selects the last child of each node in the iterable. This is equivalent to the child::*[last()] selector in XPath, or the :last-child pseudo class in CSS. Hierarchy Declaration export declare function lastChild<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> lastChild(source, predicate) Declaration export declare function lastChild<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> map(source, selector) Creates an Iterable by applying a callback to each element of a Iterable <!-- --> . Declaration export declare function map<T, U>(source: Iterable<T>, selector: (element: T, offset: number) => U): Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. selector (element: T, offset: number) => U A callback used to map each element. Subquery Returns Iterable <U> materialize(source) Eagerly evaluate the Iterable <!-- --> , returning a new Iterable <!-- --> . Subquery Declaration export declare function materialize<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> Returns HierarchyIterable <TNode, T> materialize(source) Declaration export declare function materialize<T>(source: Iterable<T>): Iterable<T>; Type Parameters T Parameters source Iterable <T> Returns Iterable <T> max(source, comparer) Gets the maximum element of a Iterable <!-- --> , optionally comparing elements using the supplied callback. Declaration export declare function max<T>(source: Iterable<T>, comparer?: Comparison<T> | Comparer<T>): T | undefined; Type Parameters T Parameters source Iterable <T> An Iterable object. comparer Comparison <T> | Comparer <T> An optional callback used to compare two elements. Scalar Returns T | undefined maxBy(source, keySelector, keyComparer) Gets the maximum element of a Iterable <!-- --> , optionally comparing the keys of each element using the supplied callback. Declaration export declare function maxBy<T, K>(source: Iterable<T>, keySelector: (value: T) => K, keyComparer?: Comparison<K> | Comparer<K>): T | undefined; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (value: T) => K A callback used to choose the key to compare. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare the keys. Scalar Returns T | undefined min(source, comparer) Gets the minimum element of a Iterable <!-- --> , optionally comparing elements using the supplied callback. Declaration export declare function min<T>(source: Iterable<T>, comparer?: Comparison<T> | Comparer<T>): T | undefined; Type Parameters T Parameters source Iterable <T> An Iterable object. comparer Comparison <T> | Comparer <T> An optional callback used to compare two elements. Scalar Returns T | undefined minBy(source, keySelector, keyComparer) Gets the minimum element of a Iterable <!-- --> , optionally comparing the keys of each element using the supplied callback. Declaration export declare function minBy<T, K>(source: Iterable<T>, keySelector: (value: T) => K, keyComparer?: Comparison<K> | Comparer<K>): T | undefined; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (value: T) => K A callback used to choose the key to compare. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare the keys. Scalar Returns T | undefined nthChild(source, offset, predicate) Creates a HierarchyIterable for the child of each element at the specified offset. A negative offset starts from the last child. This is equivalent to the :nth-child() pseudo-class in CSS. Declaration export declare function nthChild<TNode, U extends TNode>(source: HierarchyIterable<TNode>, offset: number, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> A HierarchyIterable object. offset number The offset for the child. predicate (element: TNode) => element is U An optional callback used to filter the results. Hierarchy Returns HierarchyIterable <TNode, U> nthChild(source, offset, predicate) Declaration export declare function nthChild<TNode>(source: HierarchyIterable<TNode>, offset: number, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> offset number predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> once(value) Creates an Iterable over a single element. Declaration export declare function once<T>(value: T): Iterable<T>; Type Parameters T Parameters value T The only element for the Iterable <!-- --> . Query Returns Iterable <T> orderBy(source, keySelector, keyComparer) Creates an OrderedIterable whose elements are sorted in ascending order by the provided key. Declaration export declare function orderBy<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): OrderedHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedHierarchyIterable <TNode, T> orderBy(source, keySelector, keyComparer) Creates an OrderedIterable whose elements are sorted in ascending order by the provided key. Declaration export declare function orderBy<T, K>(source: Iterable<T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): OrderedIterable<T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedIterable <T> orderByDescending(source, keySelector, keyComparer) Creates an OrderedIterable whose elements are sorted in descending order by the provided key. Declaration export declare function orderByDescending<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): OrderedHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedHierarchyIterable <TNode, T> orderByDescending(source, keySelector, keyComparer) Creates an OrderedIterable whose elements are sorted in descending order by the provided key. Declaration export declare function orderByDescending<T, K>(source: Iterable<T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): OrderedIterable<T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedIterable <T> pageBy(source, pageSize) Creates an Iterable that splits an Iterable into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration export declare function pageBy<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, pageSize: number): Iterable<HierarchyPage<TNode, T>>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. pageSize number The number of elements per page. Subquery Returns Iterable < HierarchyPage <TNode, T>> pageBy(source, pageSize, pageSelector) Creates an Iterable that splits an Iterable into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration export declare function pageBy<TNode, T extends TNode, R>(source: HierarchyIterable<TNode, T>, pageSize: number, pageSelector: (page: number, offset: number, values: HierarchyIterable<TNode, T>) => R): Iterable<R>; Type Parameters TNode T R Parameters source HierarchyIterable <TNode, T> An Iterable object. pageSize number The number of elements per page. pageSelector (page: number, offset: number, values: HierarchyIterable <TNode, T>) => R A callback used to create a result for a page. Subquery Returns Iterable <R> pageBy(source, pageSize) Creates an Iterable that splits an Iterable into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration export declare function pageBy<T>(source: Iterable<T>, pageSize: number): Iterable<Page<T>>; Type Parameters T Parameters source Iterable <T> An Iterable object. pageSize number The number of elements per page. Subquery Returns Iterable < Page <T>> pageBy(source, pageSize, pageSelector) Creates an Iterable that splits an Iterable into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration export declare function pageBy<T, R>(source: Iterable<T>, pageSize: number, pageSelector: (page: number, offset: number, values: Iterable<T>) => R): Iterable<R>; Type Parameters T R Parameters source Iterable <T> An Iterable object. pageSize number The number of elements per page. pageSelector (page: number, offset: number, values: Iterable <T>) => R A callback used to create a result for a page. Subquery Returns Iterable <R> parents(source, predicate) Selects the parent of each node in the iterable. This is equivalent to the parent::* or .. selectors in XPath. Hierarchy Declaration export declare function parents<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> parents(source, predicate) Declaration export declare function parents<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> patch(source, start, skipCount, range) Creates an Iterable for the elements of source with the provided range patched into the results. Declaration export declare function patch<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, start: number, skipCount?: number, range?: Iterable<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> The Iterable to patch. start number The offset at which to patch the range. skipCount number The number of elements to skip from start. range Iterable <T> The range to patch into the result. Subquery Returns HierarchyIterable <TNode, T> patch(source, start, skipCount, range) Creates an Iterable for the elements of source with the provided range patched into the results. Declaration export declare function patch<T>(source: Iterable<T>, start: number, skipCount?: number, range?: Iterable<T>): Iterable<T>; Type Parameters T Parameters source Iterable <T> The Iterable to patch. start number The offset at which to patch the range. skipCount number The number of elements to skip from start. range Iterable <T> The range to patch into the result. Subquery Returns Iterable <T> preceding(source, predicate) Selects the nodes that precede each node in the iterable. This is equivalent to the preceding::** selector in XPath. Hierarchy Declaration export declare function preceding<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> preceding(source, predicate) Declaration export declare function preceding<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> precedingSiblings(source, predicate) Selects the siblings that precede each node in the iterable. This is equivalent to the preceding-sibling::** selector in XPath. Hierarchy Declaration export declare function precedingSiblings<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> precedingSiblings(source, predicate) Declaration export declare function precedingSiblings<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> prepend(source, value) Creates a subquery for the elements of the source with the provided value prepended to the beginning. Declaration export declare function prepend<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, value: T): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> value T The value to prepend. Subquery Returns HierarchyIterable <TNode, T> prepend(source, value) Creates a subquery for the elements of the source with the provided value prepended to the beginning. Declaration export declare function prepend<T>(source: Iterable<T>, value: T): Iterable<T>; Type Parameters T Parameters source Iterable <T> value T The value to prepend. Subquery Returns Iterable <T> range(start, end, increment) Creates an Iterable over a range of numbers. Declaration export declare function range(start: number, end: number, increment?: number): Iterable<number>; Parameters start number The starting number of the range. end number The ending number of the range. increment number The amount by which to change between each itereated value. Query Returns Iterable <number> reduce(source, accumulator) Computes a scalar value by applying an accumulator callback over each element. Declaration export declare function reduce<T>(source: Iterable<T>, accumulator: (current: T, element: T, offset: number) => T): T; Type Parameters T Parameters source Iterable <T> An Iterable object. accumulator (current: T, element: T, offset: number) => T the callback used to compute the result. Scalar Returns T reduce(source, accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element. Declaration export declare function reduce<T, U>(source: Iterable<T>, accumulator: (current: U, element: T, offset: number) => U, seed: U, resultSelector?: (result: U, count: number) => U): U; Type Parameters T U Parameters source Iterable <T> An Iterable object. accumulator (current: U, element: T, offset: number) => U the callback used to compute the result. seed U An optional seed value. Scalar resultSelector (result: U, count: number) => U Returns U reduce(source, accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element. Declaration export declare function reduce<T, U, R>(source: Iterable<T>, accumulator: (current: U, element: T, offset: number) => U, seed: U, resultSelector: (result: U, count: number) => R): R; Type Parameters T U R Parameters source Iterable <T> An Iterable object. accumulator (current: U, element: T, offset: number) => U the callback used to compute the result. seed U An optional seed value. resultSelector (result: U, count: number) => R An optional callback used to compute the final result. Scalar Returns R reduceRight(source, accumulator) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration export declare function reduceRight<T>(source: Iterable<T>, accumulator: (current: T, element: T, offset: number) => T): T; Type Parameters T Parameters source Iterable <T> An Iterable object. accumulator (current: T, element: T, offset: number) => T the callback used to compute the result. Scalar Returns T reduceRight(source, accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration export declare function reduceRight<T, U>(source: Iterable<T>, accumulator: (current: U, element: T, offset: number) => U, seed: U, resultSelector?: (result: U, count: number) => U): U; Type Parameters T U Parameters source Iterable <T> An Iterable object. accumulator (current: U, element: T, offset: number) => U the callback used to compute the result. seed U An optional seed value. Scalar resultSelector (result: U, count: number) => U Returns U reduceRight(source, accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration export declare function reduceRight<T, U, R>(source: Iterable<T>, accumulator: (current: U, element: T, offset: number) => U, seed: U, resultSelector: (result: U, count: number) => R): R; Type Parameters T U R Parameters source Iterable <T> An Iterable object. accumulator (current: U, element: T, offset: number) => U the callback used to compute the result. seed U An optional seed value. resultSelector (result: U, count: number) => R An optional callback used to compute the final result. Scalar Returns R repeat(value, count) Creates an Iterable for a value repeated a provided number of times. Declaration export declare function repeat<T>(value: T, count: number): Iterable<T>; Type Parameters T Parameters value T The value for each element of the Iterable. count number The number of times to repeat the value. Query Returns Iterable <T> reverse(source) Creates a subquery whose elements are in the reverse order. Ordering Declaration export declare function reverse<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> Returns HierarchyIterable <TNode, T> reverse(source) Creates a subquery whose elements are in the reverse order. Ordering Declaration export declare function reverse<T>(source: Iterable<T>): Iterable<T>; Type Parameters T Parameters source Iterable <T> Returns Iterable <T> root(source, predicate) Selects the root element of each node in the iterable. This is equivalent to the / selector in XPath, or the :root selector in CSS. Hierarchy Declaration export declare function root<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> root(source, predicate) Declaration export declare function root<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> scan(source, accumulator) Creates a subquery containing the cumulative results of applying the provided callback to each element. Declaration export declare function scan<T>(source: Iterable<T>, accumulator: (current: T, element: T, offset: number) => T): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. accumulator (current: T, element: T, offset: number) => T The callback used to compute each result. Subquery Returns Iterable <T> scan(source, accumulator, seed) Creates a subquery containing the cumulative results of applying the provided callback to each element. Declaration export declare function scan<T, U>(source: Iterable<T>, accumulator: (current: U, element: T, offset: number) => U, seed: U): Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. accumulator (current: U, element: T, offset: number) => U The callback used to compute each result. seed U An optional seed value. Subquery Returns Iterable <U> scanRight(source, accumulator) Creates a subquery containing the cumulative results of applying the provided callback to each element in reverse. Declaration export declare function scanRight<T>(source: Iterable<T>, accumulator: (current: T, element: T, offset: number) => T): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. accumulator (current: T, element: T, offset: number) => T The callback used to compute each result. Subquery Returns Iterable <T> scanRight(source, accumulator, seed) Creates a subquery containing the cumulative results of applying the provided callback to each element in reverse. Declaration export declare function scanRight<T, U>(source: Iterable<T>, accumulator: (current: U, element: T, offset: number) => U, seed: U): Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. accumulator (current: U, element: T, offset: number) => U The callback used to compute each result. seed U An optional seed value. Subquery Returns Iterable <U> self(source, predicate) Selects each node in the iterable. This is equivalent to the self::* or . selectors in XPath. Hierarchy Declaration export declare function self<TNode, T extends TNode, U extends T>(source: HierarchyIterable<TNode, T>, predicate: (element: T) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source HierarchyIterable <TNode, T> predicate (element: T) => element is U Returns HierarchyIterable <TNode, U> self(source, predicate) Declaration export declare function self<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate?: (element: T) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> predicate (element: T) => boolean Returns HierarchyIterable <TNode, T> siblings(source, predicate) Selects the siblings of each node in the iterable, excluding the node itself. Hierarchy Declaration export declare function siblings<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> siblings(source, predicate) Declaration export declare function siblings<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> siblingsAndSelf(source, predicate) Selects the siblings of each node in the iterable, including the node itself. This equivalent to the ../* selector in XPath. Hierarchy Declaration export declare function siblingsAndSelf<TNode, U extends TNode>(source: HierarchyIterable<TNode>, predicate: (element: TNode) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode U Parameters source HierarchyIterable <TNode> predicate (element: TNode) => element is U Returns HierarchyIterable <TNode, U> siblingsAndSelf(source, predicate) Declaration export declare function siblingsAndSelf<TNode>(source: HierarchyIterable<TNode>, predicate?: (element: TNode) => boolean): HierarchyIterable<TNode>; Type Parameters TNode Parameters source HierarchyIterable <TNode> predicate (element: TNode) => boolean Returns HierarchyIterable <TNode> single(source, predicate) Gets the only element, or returns undefined <!-- --> . Declaration export declare function single<T, U extends T>(source: Iterable<T>, predicate: (element: T) => element is U): U | undefined; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns U | undefined single(source, predicate) Gets the only element, or returns undefined <!-- --> . Declaration export declare function single<T>(source: Iterable<T>, predicate?: (element: T) => boolean): T | undefined; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns T | undefined some(source, predicate) Computes a scalar value indicating whether source contains any elements, optionally filtering the elements using the supplied callback. Declaration export declare function some<T>(source: Iterable<T>, predicate?: (element: T) => boolean): boolean; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns boolean span(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that match the supplied predicate, and whose second element is an Iterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second Iterable is lazily evaluated. Declaration export declare function span<TNode, T extends TNode, U extends T>(source: HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => element is U): [HierarchyIterable<TNode, U>, HierarchyIterable<TNode, T>]; Type Parameters TNode T U Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T, offset: number) => element is U The predicate used to match elements. Scalar Returns [ HierarchyIterable <TNode, U>, HierarchyIterable <TNode, T>] span(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that match the supplied predicate, and whose second element is an Iterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second Iterable is lazily evaluated. Declaration export declare function span<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate: (element: T, offset: number) => boolean): [HierarchyIterable<TNode, T>, HierarchyIterable<TNode, T>]; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T, offset: number) => boolean The predicate used to match elements. Scalar Returns [ HierarchyIterable <TNode, T>, HierarchyIterable <TNode, T>] span(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that match the supplied predicate, and whose second element is an Iterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second Iterable is lazily evaluated. Declaration export declare function span<T, U extends T>(source: Iterable<T>, predicate: (element: T, offset: number) => element is U): [Iterable<U>, Iterable<T>]; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T, offset: number) => element is U The predicate used to match elements. Scalar Returns [ Iterable <U>, Iterable <T>] span(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that match the supplied predicate, and whose second element is an Iterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second Iterable is lazily evaluated. Declaration export declare function span<T>(source: Iterable<T>, predicate: (element: T, offset: number) => boolean): [Iterable<T>, Iterable<T>]; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T, offset: number) => boolean The predicate used to match elements. Scalar Returns [ Iterable <T>, Iterable <T>] spanMap(source, keySelector, keyEqualer) Creates a subquery whose elements are the contiguous ranges of elements that share the same key. Declaration export declare function spanMap<TNode, T extends TNode, K>(source: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Iterable<HierarchyGrouping<K, TNode, T>>; Type Parameters TNode T K Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler used to compare key equality. Grouping Returns Iterable < HierarchyGrouping <K, TNode, T>> spanMap(source, keySelector, elementSelector, spanSelector, keyEqualer) Creates a subquery whose elements are the contiguous ranges of elements that share the same key. Declaration export declare function spanMap<TNode, T extends TNode, K, R>(source: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, elementSelector: undefined, spanSelector: (key: K, elements: HierarchyIterable<TNode, T>) => R, keyEqualer?: Equaler<K>): Iterable<R>; Type Parameters TNode T K R Parameters source HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector undefined A callback used to select a value for an element. spanSelector (key: K, elements: HierarchyIterable <TNode, T>) => R A callback used to select a result from a contiguous range. keyEqualer Equaler <K> An Equaler used to compare key equality. Grouping Returns Iterable <R> spanMap(source, keySelector, keyEqualer) Creates a subquery whose elements are the contiguous ranges of elements that share the same key. Declaration export declare function spanMap<T, K>(source: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Iterable<Grouping<K, T>>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler used to compare key equality. Grouping Returns Iterable < Grouping <K, T>> spanMap(source, keySelector, elementSelector, keyEqualer) Creates a subquery whose values are computed from each element of the contiguous ranges of elements that share the same key. Declaration export declare function spanMap<T, K, V>(source: Iterable<T>, keySelector: (element: T) => K, elementSelector: (element: T) => V, keyEqualer?: Equaler<K>): Iterable<Grouping<K, V>>; Type Parameters T K V Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => V A callback used to select a value for an element. keyEqualer Equaler <K> An Equaler used to compare key equality. Grouping Returns Iterable < Grouping <K, V>> spanMap(source, keySelector, elementSelector, spanSelector, keyEqualer) Creates a subquery whose values are computed from the contiguous ranges of elements that share the same key. Declaration export declare function spanMap<T, K, V, R>(source: Iterable<T>, keySelector: (element: T) => K, elementSelector: (element: T) => V, spanSelector: (key: K, elements: Iterable<V>) => R, keyEqualer?: Equaler<K>): Iterable<R>; Type Parameters T K V R Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => V A callback used to select a value for an element. spanSelector (key: K, elements: Iterable <V>) => R A callback used to select a result from a contiguous range. keyEqualer Equaler <K> An Equaler used to compare key equality. Grouping Returns Iterable <R> spanUntil(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that do not match the supplied predicate, and whose second element is an Iterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second Iterable is lazily evaluated. Declaration export declare function spanUntil<T>(source: HierarchyIterable<T>, predicate: (element: T, offset: number) => boolean): [HierarchyIterable<T>, HierarchyIterable<T>]; Type Parameters T Parameters source HierarchyIterable <T> An Iterable object. predicate (element: T, offset: number) => boolean The predicate used to match elements. Scalar Returns [ HierarchyIterable <T>, HierarchyIterable <T>] spanUntil(source, predicate) Creates a tuple whose first element is an Iterable containing the first span of elements that do not match the supplied predicate, and whose second element is an Iterable containing the remaining elements. The first Iterable is eagerly evaluated, while the second Iterable is lazily evaluated. Declaration export declare function spanUntil<T>(source: Iterable<T>, predicate: (element: T, offset: number) => boolean): [Iterable<T>, Iterable<T>]; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T, offset: number) => boolean The predicate used to match elements. Scalar Returns [ Iterable <T>, Iterable <T>] startsWith(left, right, equaler) Computes a scalar value indicating whether the elements of this Query start with the same sequence of elements in another Iterable. Declaration export declare function startsWith<T>(left: Iterable<T>, right: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Type Parameters T Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns boolean startsWith(left, right, equaler) Computes a scalar value indicating whether the elements of this Query start with the same sequence of elements in another Iterable. Declaration export declare function startsWith<T, U>(left: Iterable<T>, right: Iterable<U>, equaler: (left: T, right: U) => boolean): boolean; Type Parameters T U Parameters left Iterable <T> An Iterable object. right Iterable <U> An Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns boolean sum(source) Computes the sum for a series of numbers. Declaration export declare function sum(source: Iterable<number>): number; Parameters source Iterable <number> An Iterable object. Scalar Returns number sum(source, elementSelector) Computes the sum for a series of numbers. Declaration export declare function sum<T>(source: Iterable<T>, elementSelector: (element: T) => number): number; Type Parameters T Parameters source Iterable <T> An Iterable object. elementSelector (element: T) => number A callback used to convert a value in source to a number. Scalar Returns number symmetricDifference(left, right, equaler) Creates a subquery for the symmetric difference between two Iterable objects. The result is an Iterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifference<TNode, T extends TNode>(left: HierarchyIterable<TNode, T>, right: Iterable<T>, equaler?: Equaler<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left HierarchyIterable <TNode, T> An Iterable object. right Iterable <T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns HierarchyIterable <TNode, T> symmetricDifference(left, right, equaler) Creates a subquery for the symmetric difference between two Iterable objects. The result is an Iterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifference<TNode, T extends TNode>(left: Iterable<T>, right: HierarchyIterable<TNode, T>, equaler?: Equaler<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left Iterable <T> An Iterable object. right HierarchyIterable <TNode, T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns HierarchyIterable <TNode, T> symmetricDifference(left, right, equaler) Creates a subquery for the symmetric difference between two Iterable objects. The result is an Iterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifference<T>(left: Iterable<T>, right: Iterable<T>, equaler?: Equaler<T>): Iterable<T>; Type Parameters T Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns Iterable <T> symmetricDifferenceBy(left, right, keySelector, keyEqualer) Creates a subquery for the symmetric difference between two Iterable objects, where set identity is determined by the selected key. The result is an Iterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceBy<TNode, T extends TNode, K>(left: HierarchyIterable<TNode, T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left HierarchyIterable <TNode, T> An Iterable object. right Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns HierarchyIterable <TNode, T> symmetricDifferenceBy(left, right, keySelector, keyEqualer) Creates a subquery for the symmetric difference between two Iterable objects, where set identity is determined by the selected key. The result is an Iterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceBy<TNode, T extends TNode, K>(left: Iterable<T>, right: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left Iterable <T> An Iterable object. right HierarchyIterable <TNode, T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns HierarchyIterable <TNode, T> symmetricDifferenceBy(left, right, keySelector, keyEqualer) Creates a subquery for the symmetric difference between two Iterable objects, where set identity is determined by the selected key. The result is an Iterable containings the elements that exist in only left or right, but not in both. Declaration export declare function symmetricDifferenceBy<T, K>(left: Iterable<T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Iterable<T>; Type Parameters T K Parameters left Iterable <T> An Iterable object. right Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable <T> take(source, count) Creates a subquery containing the first elements up to the supplied count. Declaration export declare function take<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, count: number): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. count number The number of elements to take. Subquery Returns HierarchyIterable <TNode, T> take(source, count) Creates a subquery containing the first elements up to the supplied count. Declaration export declare function take<T>(source: Iterable<T>, count: number): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. count number The number of elements to take. Subquery Returns Iterable <T> takeRight(source, count) Creates a subquery containing the last elements up to the supplied count. Declaration export declare function takeRight<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, count: number): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. count number The number of elements to take. Subquery Returns HierarchyIterable <TNode, T> takeRight(source, count) Creates a subquery containing the last elements up to the supplied count. Declaration export declare function takeRight<T>(source: Iterable<T>, count: number): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. count number The number of elements to take. Subquery Returns Iterable <T> takeUntil(source, predicate) Creates a subquery containing the first elements that do not match the supplied predicate. Declaration export declare function takeUntil<TNode, T extends TNode, U extends T>(source: HierarchyIterable<TNode, T>, predicate: (element: T) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T) => element is U A callback used to match each element. Subquery Returns HierarchyIterable <TNode, U> takeUntil(source, predicate) Creates a subquery containing the first elements that do not match the supplied predicate. Declaration export declare function takeUntil<T, U extends T>(source: Iterable<T>, predicate: (element: T) => element is U): Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T) => element is U A callback used to match each element. Subquery Returns Iterable <U> takeUntil(source, predicate) Creates a subquery containing the first elements that do not match the supplied predicate. Declaration export declare function takeUntil<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate: (element: T) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Subquery Returns HierarchyIterable <TNode, T> takeUntil(source, predicate) Creates a subquery containing the first elements that do not match the supplied predicate. Declaration export declare function takeUntil<T>(source: Iterable<T>, predicate: (element: T) => boolean): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Subquery Returns Iterable <T> takeWhile(source, predicate) Creates a subquery containing the first elements that match the supplied predicate. Declaration export declare function takeWhile<TNode, T extends TNode, U extends T>(source: HierarchyIterable<TNode, T>, predicate: (element: T) => element is U): HierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T) => element is U A callback used to match each element. Subquery Returns HierarchyIterable <TNode, U> takeWhile(source, predicate) Creates a subquery containing the first elements that match the supplied predicate. Declaration export declare function takeWhile<T, U extends T>(source: Iterable<T>, predicate: (element: T) => element is U): Iterable<U>; Type Parameters T U Parameters source Iterable <T> An Iterable object. predicate (element: T) => element is U A callback used to match each element. Subquery Returns Iterable <U> takeWhile(source, predicate) Creates a subquery containing the first elements that match the supplied predicate. Declaration export declare function takeWhile<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate: (element: T) => boolean): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Subquery Returns HierarchyIterable <TNode, T> takeWhile(source, predicate) Creates a subquery containing the first elements that match the supplied predicate. Declaration export declare function takeWhile<T>(source: Iterable<T>, predicate: (element: T) => boolean): Iterable<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. predicate (element: T) => boolean A callback used to match each element. Subquery Returns Iterable <T> tap(source, callback) Lazily invokes a callback as each element of the iterable is iterated. Declaration export declare function tap<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, callback: (element: T, offset: number) => void): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> A Iterable object. callback (element: T, offset: number) => void The callback to invoke. Subquery Returns HierarchyIterable <TNode, T> tap(source, callback) Lazily invokes a callback as each element of the iterable is iterated. Declaration export declare function tap<T>(source: Iterable<T>, callback: (element: T, offset: number) => void): Iterable<T>; Type Parameters T Parameters source Iterable <T> A Iterable object. callback (element: T, offset: number) => void The callback to invoke. Subquery Returns Iterable <T> thenBy(source, keySelector, keyComparer) Creates a subsequent OrderedIterable whose elements are also sorted in ascending order by the provided key. Declaration export declare function thenBy<TNode, T extends TNode, K>(source: OrderedHierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): OrderedHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source OrderedHierarchyIterable <TNode, T> An OrderedIterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedHierarchyIterable <TNode, T> thenBy(source, keySelector, keyComparer) Creates a subsequent OrderedIterable whose elements are also sorted in ascending order by the provided key. Declaration export declare function thenBy<T, K>(source: OrderedIterable<T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): OrderedIterable<T>; Type Parameters T K Parameters source OrderedIterable <T> An OrderedIterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedIterable <T> thenByDescending(source, keySelector, keyComparer) Creates a subsequent OrderedIterable whose elements are also sorted in descending order by the provided key. Declaration export declare function thenByDescending<TNode, T extends TNode, K>(source: OrderedHierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): OrderedHierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters source OrderedHierarchyIterable <TNode, T> An OrderedIterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedHierarchyIterable <TNode, T> thenByDescending(source, keySelector, keyComparer) Creates a subsequent OrderedIterable whose elements are also sorted in descending order by the provided key. Declaration export declare function thenByDescending<T, K>(source: OrderedIterable<T>, keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): OrderedIterable<T>; Type Parameters T K Parameters source OrderedIterable <T> An OrderedIterable object. keySelector (element: T) => K A callback used to select the key for an element. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedIterable <T> toArray(source) Creates an Array for the elements of the Iterable <!-- --> . Declaration export declare function toArray<T>(source: Iterable<T>): T[]; Type Parameters T Parameters source Iterable <T> An Iterable object. Scalar Returns T[] toArray(source, elementSelector) Creates an Array for the elements of the Iterable <!-- --> . Declaration export declare function toArray<T, V>(source: Iterable<T>, elementSelector: (element: T) => V): V[]; Type Parameters T V Parameters source Iterable <T> An Iterable object. elementSelector (element: T) => V A callback that selects a value for each element. Scalar Returns V[] toHashMap(source, keySelector, keyEqualer) Creates a HashMap for the elements of the Query. Declaration export declare function toHashMap<T, K>(source: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HashMap<K, T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select a key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns HashMap <K, T> toHashMap(source, keySelector, elementSelector, keyEqualer) Creates a Map for the elements of the Query. Declaration export declare function toHashMap<T, K, V>(source: Iterable<T>, keySelector: (element: T) => K, elementSelector: (element: T) => V, keyEqualer?: Equaler<K>): HashMap<K, V>; Type Parameters T K V Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns HashMap <K, V> toHashSet(source, equaler) Creates a HashSet for the elements of the Iterable. Declaration export declare function toHashSet<T>(source: Iterable<T>, equaler?: Equaler<T>): HashSet<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Scalar Returns HashSet <T> toHashSet(source, elementSelector, equaler) Creates a Set for the elements of the Iterable. Declaration export declare function toHashSet<T, V>(source: Iterable<T>, elementSelector: (element: T) => V, equaler?: Equaler<V>): HashSet<V>; Type Parameters T V Parameters source Iterable <T> An Iterable object. elementSelector (element: T) => V A callback that selects a value for each element. equaler Equaler <V> An Equaler object used to compare equality. Scalar Returns HashSet <V> toHierarchy(iterable, provider) Creates a HierarchyIterable using the provided HierarchyProvider <!-- --> . Declaration export declare function toHierarchy<TNode, T extends TNode = TNode>(iterable: OrderedIterable<T>, provider: HierarchyProvider<TNode>): OrderedHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters iterable OrderedIterable <T> provider HierarchyProvider <TNode> Returns OrderedHierarchyIterable <TNode, T> toHierarchy(iterable, provider) Declaration export declare function toHierarchy<TNode, T extends TNode = TNode>(iterable: Iterable<T>, provider: HierarchyProvider<TNode>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters iterable Iterable <T> provider HierarchyProvider <TNode> Returns HierarchyIterable <TNode, T> toLookup(source, keySelector, keyEqualer) Creates a Lookup for the elements of the Query. Declaration export declare function toLookup<T, K>(source: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Lookup<K, T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select a key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Lookup <K, T> toLookup(source, keySelector, elementSelector, keyEqualer) Creates a Lookup for the elements of the Query. Declaration export declare function toLookup<T, K, V>(source: Iterable<T>, keySelector: (element: T) => K, elementSelector: (element: T) => V, keyEqualer?: Equaler<K>): Lookup<K, V>; Type Parameters T K V Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Lookup <K, V> toMap(source, keySelector) Creates a Map for the elements of the Query. Declaration export declare function toMap<T, K>(source: Iterable<T>, keySelector: (element: T) => K): Map<K, T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Map <K, T> toMap(source, keySelector, elementSelector) Creates a Map for the elements of the Query. Declaration export declare function toMap<T, K, V>(source: Iterable<T>, keySelector: (element: T) => K, elementSelector: (element: T) => V): Map<K, V>; Type Parameters T K V Parameters source Iterable <T> An Iterable object. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. Scalar Returns Map <K, V> toObject(source, prototype, keySelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration export declare function toObject<T, TProto extends object, K extends PropertyKey>(source: Iterable<T>, prototype: TProto, keySelector: (element: T) => K): TProto & Record<K, T>; Type Parameters T TProto K Parameters source Iterable <T> An Iterable object. prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns TProto & Record <K, T> toObject(source, prototype, keySelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration export declare function toObject<T, TProto extends object>(source: Iterable<T>, prototype: TProto, keySelector: (element: T) => PropertyKey): TProto & Record<PropertyKey, T>; Type Parameters T TProto Parameters source Iterable <T> An Iterable object. prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. Scalar Returns TProto & Record < PropertyKey , T> toObject(source, prototype, keySelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration export declare function toObject<T, K extends PropertyKey>(source: Iterable<T>, prototype: object | null | undefined, keySelector: (element: T) => K): Record<K, T>; Type Parameters T K Parameters source Iterable <T> An Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Record <K, T> toObject(source, prototype, keySelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration export declare function toObject<T>(source: Iterable<T>, prototype: object | null | undefined, keySelector: (element: T) => PropertyKey): Record<PropertyKey, T>; Type Parameters T Parameters source Iterable <T> An Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. Scalar Returns Record < PropertyKey , T> toObject(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObject<T, TProto extends object, K extends PropertyKey, V>(source: Iterable<T>, prototype: TProto, keySelector: (element: T) => K, elementSelector: (element: T) => V, descriptorSelector?: (key: K, value: V) => TypedPropertyDescriptor<V>): TProto & Record<K, V>; Type Parameters T TProto K V Parameters source Iterable <T> An Iterable object. prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: K, value: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns TProto & Record <K, V> toObject(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObject<T, TProto extends object, V>(source: Iterable<T>, prototype: TProto, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => V, descriptorSelector?: (key: PropertyKey, value: V) => TypedPropertyDescriptor<V>): TProto & Record<PropertyKey, V>; Type Parameters T TProto V Parameters source Iterable <T> An Iterable object. prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , value: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns TProto & Record < PropertyKey , V> toObject(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObject<T, K extends PropertyKey, V>(source: Iterable<T>, prototype: object | null | undefined, keySelector: (element: T) => K, elementSelector: (element: T) => V, descriptorSelector?: (key: K, value: V) => TypedPropertyDescriptor<V>): Record<K, V>; Type Parameters T K V Parameters source Iterable <T> An Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: K, value: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Record <K, V> toObject(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObject<T, V>(source: Iterable<T>, prototype: object | null | undefined, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => V, descriptorSelector?: (key: PropertyKey, value: V) => TypedPropertyDescriptor<V>): Record<PropertyKey, V>; Type Parameters T V Parameters source Iterable <T> An Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , value: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Record < PropertyKey , V> toObject(source, prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements of source <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = toObject(`\"`, 1], [\"y\", 2]], undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = toObject(`\"`, 1], [\"y\", 2]], baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = toObject(`\"`, 1], [\"y\", 2]], null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration export declare function toObject<T, V>(source: Iterable<T>, prototype: object | null | undefined, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => V, descriptorSelector?: (key: PropertyKey, value: V) => PropertyDescriptor): object; Type Parameters T V Parameters source Iterable <T> An Iterable object. prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , value: V) => PropertyDescriptor A callback that defines the PropertyDescriptor for each property. Scalar Returns object topMost(source, predicate, equaler) Filters a HierarchyIterable to the top-most elements. Elements that are a descendant of any other element in the iterable are removed. Declaration export declare function topMost<TNode, T extends TNode, U extends T>(source: HierarchyIterable<TNode, T>, predicate: (value: T) => value is U, equaler?: Equaler<TNode>): HierarchyIterable<TNode, U>; Type Parameters TNode T U Parameters source HierarchyIterable <TNode, T> A HierarchyIterable object. predicate (value: T) => value is U An optional callback used to filter the results. equaler Equaler <TNode> An optional Equaler used to compare equality between nodes. Hierarchy Returns HierarchyIterable <TNode, U> topMost(source, predicate, equaler) Creates a HierarchyIterable for the top-most elements. Elements that are a descendant of any other element are removed. Declaration export declare function topMost<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>, predicate?: (value: T) => boolean, equaler?: Equaler<TNode>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> A HierarchyIterable object. predicate (value: T) => boolean An optional callback used to filter the results. equaler Equaler <TNode> An optional Equaler used to compare equality between nodes. Hierarchy Returns HierarchyIterable <TNode, T> toSet(source) Creates a Set for the elements of the Iterable. Declaration export declare function toSet<T>(source: Iterable<T>): Set<T>; Type Parameters T Parameters source Iterable <T> An Iterable object. Scalar Returns Set <T> toSet(source, elementSelector) Creates a Set for the elements of the Iterable. Declaration export declare function toSet<T, V>(source: Iterable<T>, elementSelector: (element: T) => V): Set<V>; Type Parameters T V Parameters source Iterable <T> An Iterable object. elementSelector (element: T) => V A callback that selects a value for each element. Scalar Returns Set <V> union(left, right, equaler) Creates a subquery for the set union of two Iterable objects. Declaration export declare function union<TNode, T extends TNode>(left: HierarchyIterable<TNode, T>, right: Iterable<T>, equaler?: Equaler<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left HierarchyIterable <TNode, T> A Iterable value. right Iterable <T> A Iterable value. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns HierarchyIterable <TNode, T> union(left, right, equaler) Creates a subquery for the set union of two Iterable objects. Declaration export declare function union<TNode, T extends TNode>(left: Iterable<T>, right: HierarchyIterable<TNode, T>, equaler?: Equaler<T>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters left Iterable <T> A Iterable value. right HierarchyIterable <TNode, T> A Iterable value. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns HierarchyIterable <TNode, T> union(left, right, equaler) Creates a subquery for the set union of two Iterable objects. Declaration export declare function union<T>(left: Iterable<T>, right: Iterable<T>, equaler?: Equaler<T>): Iterable<T>; Type Parameters T Parameters left Iterable <T> A Iterable value. right Iterable <T> A Iterable value. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns Iterable <T> unionBy(left, right, keySelector, keyEqualer) Creates a subquery for the set union of two Iterable objects, where set identity is determined by the selected key. Declaration export declare function unionBy<TNode, T extends TNode, K>(left: HierarchyIterable<TNode, T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left HierarchyIterable <TNode, T> A Iterable value. right Iterable <T> A Iterable value. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns HierarchyIterable <TNode, T> unionBy(left, right, keySelector, keyEqualer) Creates a subquery for the set union of two Iterable objects, where set identity is determined by the selected key. Declaration export declare function unionBy<TNode, T extends TNode, K>(left: Iterable<T>, right: HierarchyIterable<TNode, T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HierarchyIterable<TNode, T>; Type Parameters TNode T K Parameters left Iterable <T> A Iterable value. right HierarchyIterable <TNode, T> A Iterable value. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns HierarchyIterable <TNode, T> unionBy(left, right, keySelector, keyEqualer) Creates a subquery for the set union of two Iterable objects, where set identity is determined by the selected key. Declaration export declare function unionBy<T, K>(left: Iterable<T>, right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Iterable<T>; Type Parameters T K Parameters left Iterable <T> A Iterable value. right Iterable <T> A Iterable value. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Iterable <T> unzip(source) Unzips a sequence of tuples into a tuple of sequences. Declaration export declare function unzip<T extends readonly any[] | []>(source: Iterable<T>): { [I in keyof T]: T[I][]; }; Type Parameters T Parameters source Iterable <T> A Iterable Scalar Returns { [I in keyof T]: T[I][]; } unzip(source, partSelector) Unzips a sequence of tuples into a tuple of sequences. Declaration export declare function unzip<T, U extends readonly any[] | []>(source: Iterable<T>, partSelector: (value: T) => U): { [I in keyof U]: U[I][]; }; Type Parameters T U Parameters source Iterable <T> A Iterable partSelector (value: T) => U A callback that converts a result into a tuple. Scalar Returns { [I in keyof U]: U[I][]; } zip(left, right) Creates a subquery that combines two Iterable objects by combining elements in tuples. Declaration export declare function zip<T, U>(left: Iterable<T>, right: Iterable<U>): Iterable<[T, U]>; Type Parameters T U Parameters left Iterable <T> A Iterable <!-- --> . right Iterable <U> A Iterable <!-- --> . Join Returns Iterable <[T, U]> zip(left, right, selector) Creates a subquery that combines two Iterable objects by combining elements using the supplied callback. Declaration export declare function zip<T, U, R>(left: Iterable<T>, right: Iterable<U>, selector: (left: T, right: U) => R): Iterable<R>; Type Parameters T U R Parameters left Iterable <T> A Iterable <!-- --> . right Iterable <U> A Iterable <!-- --> . selector (left: T, right: U) => R A callback used to combine two elements. Join Returns Iterable <R>"
  },
  "api/iter-fn/consumeoptions.html": {
    "href": "api/iter-fn/consumeoptions.html",
    "title": "ConsumeOptions Interface | @esfx API Reference",
    "keywords": "ConsumeOptions Interface Package : @esfx/iter-fn Declaration export interface ConsumeOptions Properties cacheElements Indicates whether iterated elements should be cached for subsequent iterations. Declaration cacheElements?: boolean; Property Value boolean leaveOpen Indicates whether to leave the iterator open when the iterable returns. Declaration leaveOpen?: boolean; Property Value boolean"
  },
  "api/iter-grouping.html": {
    "href": "api/iter-grouping.html",
    "title": "@esfx/iter-grouping Package | @esfx API Reference",
    "keywords": "@esfx/iter-grouping Package An API for describing grouped iterables. Installation npm i @esfx/iter-grouping Usage TypeScript JavaScript (CommonJS) import { groupBy } from \"@esfx/iter-fn\"; import { Grouping } from \"@esfx/iter-grouping\"; const people = [{ familyName: \"Smith\", givenName: \"Alice\" }, { familyName: \"Smith\", givenName: \"Bob\" }]; for (const group of groupBy(people, person => person.familyName)) { group.key; // \"Smith\" group.values; // Iterable of \"Alice\", \"Bob\" group instanceof Grouping; // true } const { groupBy } = require(\"@esfx/iter-fn\"); const { Grouping } = require(\"@esfx/iter-grouping\"); const people = [{ familyName: \"Smith\", givenName: \"Alice\" }, { familyName: \"Smith\", givenName: \"Bob\" }]; for (const group of groupBy(people, person => person.familyName)) { group.key; // \"Smith\" group.values; // Iterable of \"Alice\", \"Bob\" group instanceof Grouping; // true } Classes Grouping Represents a group of values associated with the same key. HierarchyGrouping"
  },
  "api/iter-grouping/grouping.html": {
    "href": "api/iter-grouping/grouping.html",
    "title": "Grouping Class | @esfx API Reference",
    "keywords": "Grouping Class Package : @esfx/iter-grouping Represents a group of values associated with the same key. Declaration export declare class Grouping<K, V> implements Iterable<V> Constructors constructor(key, values) Constructs a new instance of the Grouping class Declaration constructor(key: K, values: Iterable<V>); Parameters key K values Iterable <V> Properties key The key associated with this group. Declaration readonly key: K; Property Value K values The values in the group. Declaration readonly values: Iterable<V>; Property Value Iterable <V> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): Iterator<V, any, undefined>; Returns Iterator <V, any, undefined> from(key, values, provider) Declaration static from<K, VNode, V extends VNode>(key: K, values: Iterable<V>, provider: HierarchyProvider<VNode>): HierarchyGrouping<K, VNode, V>; Type Parameters K VNode V Parameters key K values Iterable <V> provider HierarchyProvider <VNode> Returns HierarchyGrouping <K, VNode, V> from(key, values) Declaration static from<K, VNode, V extends VNode>(key: K, values: HierarchyIterable<VNode, V>): HierarchyGrouping<K, VNode, V>; Type Parameters K VNode V Parameters key K values HierarchyIterable <VNode, V> Returns HierarchyGrouping <K, VNode, V> from(key, values) Declaration static from<K, V>(key: K, values: Iterable<V>): Grouping<K, V>; Type Parameters K V Parameters key K values Iterable <V> Returns Grouping <K, V>"
  },
  "api/iter-grouping/hierarchygrouping.html": {
    "href": "api/iter-grouping/hierarchygrouping.html",
    "title": "HierarchyGrouping Class | @esfx API Reference",
    "keywords": "HierarchyGrouping Class Package : @esfx/iter-grouping Declaration export declare class HierarchyGrouping<K, VNode, V extends VNode> extends Grouping<K, V> implements HierarchyIterable<VNode, V> Inheritance Grouping <K, V> HierarchyGrouping Inherited Members [Symbol.iterator]() constructor(key, values) from(key, values, provider) from(key, values) from(key, values) key values Constructors constructor(key, values, provider) Constructs a new instance of the HierarchyGrouping class Declaration constructor(key: K, values: Iterable<V>, provider: HierarchyProvider<VNode>); Parameters key K values Iterable <V> provider HierarchyProvider <VNode> constructor(key, values) Constructs a new instance of the HierarchyGrouping class Declaration constructor(key: K, values: HierarchyIterable<VNode, V>); Parameters key K values HierarchyIterable <VNode, V> Properties values Declaration readonly values: HierarchyIterable<VNode, V>; Property Value HierarchyIterable <VNode, V> Methods [Hierarchical.hierarchy]() Declaration [Hierarchical.hierarchy](): HierarchyProvider<VNode>; Returns HierarchyProvider <VNode>"
  },
  "api/iter-hierarchy.html": {
    "href": "api/iter-hierarchy.html",
    "title": "@esfx/iter-hierarchy Package | @esfx API Reference",
    "keywords": "@esfx/iter-hierarchy Package A Symbol-based API for defining an Iterable with an inherent hierarchy. Installation npm i @esfx/iter-hierarchy Usage TypeScript JavaScript (CommonJS) import { HierarchyIterable, Hierarchical, HierarchyProvider } from \"@esfx/iter-hierarchy\"; interface Node { parent?: Node; children?: Node[]; // ... } const hierarchyProvider: HierarchyProvider<Node> = { parent(node: Node) { return node.parent; }, children(node: Node) { return node.children; }, }; class MyHierarchyIterable implements HierarchyIterable<Node> { #nodes: Iterable<Node>; constructor(nodes: Iterable<Node>) { this.#nodes = nodes; } [Symbol.iterator]() { return this.#nodes[Symbol.iterator](); } [Hierarchical.hierarchy]() { return hierarchyProvider; } } const { Hierarchical } = require(\"@esfx/iter-hierarchy\"); const hierarchyProvider = { parent(node) { return node.parent; }, children(node) { return node.children; }, }; class MyHierarchyIterable { #nodes; constructor(nodes) { this.#nodes = nodes; } [Symbol.iterator]() { return this.#nodes[Symbol.iterator](); } [Hierarchical.hierarchy]() { return hierarchyProvider; } } Interfaces Hierarchical<TNode> Describes an object that has a navigable hierarchy. HierarchyIterable<TNode, T> Represents an Iterable with a navigable hierarchy. HierarchyProvider<TNode> Describes an object that defines the relationships between parents and children of an element. OrderedHierarchyIterable<TNode, T> Represents an Iterable with a navigable hierarchy that is inherently ordered. Namespaces Axis Axis traversal helpers. Hierarchical HierarchyIterable HierarchyProvider OrderedHierarchyIterable"
  },
  "api/iter-hierarchy/axis.html": {
    "href": "api/iter-hierarchy/axis.html",
    "title": "Axis Namespace | @esfx API Reference",
    "keywords": "Axis Namespace Package : @esfx/iter-hierarchy Axis traversal helpers. Functions ancestors(provider, element) Declaration function ancestors<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> ancestorsAndSelf(provider, element) Declaration function ancestorsAndSelf<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> children(provider, element) Declaration function children<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> descendants(provider, element) Declaration function descendants<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, undefined>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, undefined> descendantsAndSelf(provider, element) Declaration function descendantsAndSelf<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, undefined>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, undefined> firstChild(provider, element) Declaration function firstChild<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> following(provider, element) Declaration function following<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, undefined>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, undefined> followingSiblings(provider, element) Declaration function followingSiblings<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> lastChild(provider, element) Declaration function lastChild<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> nthChild(provider, element, offset) Declaration function nthChild<T>(provider: HierarchyProvider<T>, element: T, offset: number | Index): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T offset number | Index Returns Generator <T, void, unknown> parents(provider, element) Declaration function parents<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> preceding(provider, element) Declaration function preceding<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, undefined>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, undefined> precedingSiblings(provider, element) Declaration function precedingSiblings<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> root(provider, element) Declaration function root<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> self(provider, element) Declaration function self<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> siblings(provider, element) Declaration function siblings<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown> siblingsAndSelf(provider, element) Declaration function siblingsAndSelf<T>(provider: HierarchyProvider<T>, element: T): Generator<T, void, unknown>; Type Parameters T Parameters provider HierarchyProvider <T> element T Returns Generator <T, void, unknown>"
  },
  "api/iter-hierarchy/hierarchical-interface.html": {
    "href": "api/iter-hierarchy/hierarchical-interface.html",
    "title": "Hierarchical<TNode> Interface | @esfx API Reference",
    "keywords": "Hierarchical<TNode> Interface Package : @esfx/iter-hierarchy Describes an object that has a navigable hierarchy. Declaration export interface Hierarchical<TNode> Methods [Hierarchical.hierarchy]() Gets an object that provides hierarchical relationships. Declaration [Hierarchical.hierarchy](): HierarchyProvider<TNode>; Returns HierarchyProvider <TNode>"
  },
  "api/iter-hierarchy/hierarchical-namespace.html": {
    "href": "api/iter-hierarchy/hierarchical-namespace.html",
    "title": "Hierarchical Namespace | @esfx API Reference",
    "keywords": "Hierarchical Namespace Package : @esfx/iter-hierarchy Functions hasInstance(x) Declaration function hasInstance(x: unknown): x is Hierarchical<unknown>; Parameters x unknown Returns x is Hierarchical <unknown> Variables hierarchy Declaration hierarchy: unique symbol"
  },
  "api/iter-hierarchy/hierarchyiterable-interface.html": {
    "href": "api/iter-hierarchy/hierarchyiterable-interface.html",
    "title": "HierarchyIterable<TNode, T> Interface | @esfx API Reference",
    "keywords": "HierarchyIterable<TNode, T> Interface Package : @esfx/iter-hierarchy Represents an Iterable with a navigable hierarchy. Declaration export interface HierarchyIterable<TNode, T extends TNode = TNode> extends Iterable<T>, Hierarchical<TNode> Inheritance Iterable <T> Hierarchical <TNode> HierarchyIterable<TNode, T> Inherited Members [Hierarchical.hierarchy]()"
  },
  "api/iter-hierarchy/hierarchyiterable-namespace.html": {
    "href": "api/iter-hierarchy/hierarchyiterable-namespace.html",
    "title": "HierarchyIterable Namespace | @esfx API Reference",
    "keywords": "HierarchyIterable Namespace Package : @esfx/iter-hierarchy Functions create(iterable, provider) Creates a HierarchyIterable using the provided HierarchyProvider <!-- --> . Declaration function create<TNode, T extends TNode = TNode>(iterable: OrderedIterable<T>, provider: HierarchyProvider<TNode>): OrderedHierarchyIterable<TNode, T>; Type Parameters TNode T Parameters iterable OrderedIterable <T> An Iterable object. provider HierarchyProvider <TNode> A HierarchyProvider <!-- --> . Hierarchy Returns OrderedHierarchyIterable <TNode, T> create(iterable, provider) Declaration function create<TNode, T extends TNode = TNode>(iterable: Iterable<T>, provider: HierarchyProvider<TNode>): HierarchyIterable<TNode, T>; Type Parameters TNode T Parameters iterable Iterable <T> provider HierarchyProvider <TNode> Returns HierarchyIterable <TNode, T> hasInstance(x) Declaration function hasInstance(x: unknown): x is HierarchyIterable<unknown>; Parameters x unknown Returns x is HierarchyIterable <unknown>"
  },
  "api/iter-hierarchy/hierarchyprovider-interface.html": {
    "href": "api/iter-hierarchy/hierarchyprovider-interface.html",
    "title": "HierarchyProvider<TNode> Interface | @esfx API Reference",
    "keywords": "HierarchyProvider<TNode> Interface Package : @esfx/iter-hierarchy Describes an object that defines the relationships between parents and children of an element. Declaration export interface HierarchyProvider<TNode> Methods children(element) Gets the children elements for the supplied element. Declaration children(element: TNode): Iterable<TNode> | undefined; Parameters element TNode Returns Iterable <TNode> | undefined firstChild(element) (Optional) Gets the first child of an element. NOTE: A HierarchyProvider should implement this to improve the performance of the following query operator on hierarchies. Declaration firstChild?(element: TNode): TNode | undefined; Parameters element TNode Returns TNode | undefined lastChild(element) (Optional) Gets the last child of an element. NOTE: A HierarchyProvider should implement this to improve the performance of the preceding query operator on hierarchies. Declaration lastChild?(element: TNode): TNode | undefined; Parameters element TNode Returns TNode | undefined nextSibling(element) (Optional) Gets the next sibling of an element. NOTE: A HierarchyProvider should implement this to improve the performance of the following and followingSiblings query operators on hierarchies. Declaration nextSibling?(element: TNode): TNode; Parameters element TNode Returns TNode owns(element) (Optional) Indicates whether the supplied element is contained within a hierarchy. Declaration owns?(element: TNode): boolean; Parameters element TNode Returns boolean parent(element) Gets the parent element for the supplied element. Declaration parent(element: TNode): TNode | undefined; Parameters element TNode Returns TNode | undefined previousSibling(element) (Optional) Gets the previous sibling of an element. NOTE: A HierarchyProvider should implement this to improve the performance of the preceding and precedingSiblings query operators on hierarchies. Declaration previousSibling?(element: TNode): TNode; Parameters element TNode Returns TNode provider(element) (Optional) If this provider is composed from multiple providers, finds the underlying provider for an element. Declaration provider?(element: TNode): HierarchyProvider<TNode> | undefined; Parameters element TNode Returns HierarchyProvider <TNode> | undefined providers() (Optional) If this provider is composed from multiple providers, returns an iterable of each underlying provider. Declaration providers?(): IterableIterator<HierarchyProvider<TNode>>; Returns IterableIterator < HierarchyProvider <TNode>> root(element) (Optional) Gets the root node for an element. NOTE: A HierarchyProvider should implement this to improve the performance of the root query operator on hierarchies. Declaration root?(element: TNode): TNode; Parameters element TNode Returns TNode"
  },
  "api/iter-hierarchy/hierarchyprovider-namespace.html": {
    "href": "api/iter-hierarchy/hierarchyprovider-namespace.html",
    "title": "HierarchyProvider Namespace | @esfx API Reference",
    "keywords": "HierarchyProvider Namespace Package : @esfx/iter-hierarchy Functions combine(left, right) Combines two hierarchy providers. Declaration function combine<T>(left: HierarchyProvider<T> | undefined, right: HierarchyProvider<T> | undefined): HierarchyProvider<T> | undefined; Type Parameters T Parameters left HierarchyProvider <T> | undefined right HierarchyProvider <T> | undefined Returns HierarchyProvider <T> | undefined combine(left, right) Combines two hierarchy providers. Declaration function combine<T>(left: HierarchyProvider<T> | null | undefined, right: HierarchyProvider<T> | null | undefined): HierarchyProvider<T> | null | undefined; Type Parameters T Parameters left HierarchyProvider <T> | null | undefined right HierarchyProvider <T> | null | undefined Returns HierarchyProvider <T> | null | undefined hasInstance(value) Declaration function hasInstance(value: unknown): value is HierarchyProvider<unknown>; Parameters value unknown Returns value is HierarchyProvider <unknown>"
  },
  "api/iter-hierarchy/orderedhierarchyiterable-interface.html": {
    "href": "api/iter-hierarchy/orderedhierarchyiterable-interface.html",
    "title": "OrderedHierarchyIterable<TNode, T> Interface | @esfx API Reference",
    "keywords": "OrderedHierarchyIterable<TNode, T> Interface Package : @esfx/iter-hierarchy Represents an Iterable with a navigable hierarchy that is inherently ordered. Declaration export interface OrderedHierarchyIterable<TNode, T extends TNode = TNode> extends OrderedIterable<T>, HierarchyIterable<TNode, T> Inheritance OrderedIterable <T> HierarchyIterable <TNode, T> OrderedHierarchyIterable<TNode, T> Inherited Members [OrderedIterable.thenBy](keySelector, comparer, descending) Methods [OrderedIterable.thenBy](keySelector, comparer, descending) Creates a subsequent OrderedHierarchyIterable whose elements are also ordered by the provided key. Declaration [OrderedIterable.thenBy]<K>(keySelector: (element: T) => K, comparer: Comparison<K> | Comparer<K>, descending: boolean): OrderedHierarchyIterable<TNode, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> A callback used to compare two keys. descending boolean A value indicating whether to sort in descending ( true <!-- --> ) or ascending ( false <!-- --> ) order. Returns OrderedHierarchyIterable <TNode, T>"
  },
  "api/iter-hierarchy/orderedhierarchyiterable-namespace.html": {
    "href": "api/iter-hierarchy/orderedhierarchyiterable-namespace.html",
    "title": "OrderedHierarchyIterable Namespace | @esfx API Reference",
    "keywords": "OrderedHierarchyIterable Namespace Package : @esfx/iter-hierarchy Functions hasInstance(value) Declaration function hasInstance(value: unknown): value is OrderedHierarchyIterable<unknown>; Parameters value unknown Returns value is OrderedHierarchyIterable <unknown>"
  },
  "api/iter-lookup.html": {
    "href": "api/iter-lookup.html",
    "title": "@esfx/iter-lookup Package | @esfx API Reference",
    "keywords": "@esfx/iter-lookup Package A collection class used to map and look up iterables related to a key. Installation npm i @esfx/iter-lookup Usage TBD Classes Lookup"
  },
  "api/iter-lookup/lookup.html": {
    "href": "api/iter-lookup/lookup.html",
    "title": "Lookup Class | @esfx API Reference",
    "keywords": "Lookup Class Package : @esfx/iter-lookup Declaration export declare class Lookup<K, V> implements Iterable<Grouping<K, V>> Constructors constructor(entries, keyEqualer) Creates a new Lookup for the provided groups. Declaration constructor(entries: Iterable<[K, Iterable<V>]>, keyEqualer?: Equaler<K>); Parameters entries Iterable <[K, Iterable <V>]> A map containing the unique groups of values. keyEqualer Equaler <K> Properties size Gets the number of unique keys. Declaration get size(): number; Property Value number Methods [Symbol.iterator]() Declaration [Symbol.iterator](): Iterator<Grouping<K, V>, any, undefined>; Returns Iterator < Grouping <K, V>, any, undefined> applyResultSelector(selector) Creates a Query that maps each group in the Lookup. Declaration applyResultSelector<R>(selector: (key: K, elements: Iterable<V>) => R): Iterable<R>; Type Parameters R Parameters selector (key: K, elements: Iterable <V>) => R A callback used to select results for each group. Returns Iterable <R> get(key) Gets the group for the provided key. Declaration get(key: K): Iterable<V>; Parameters key K A key. Returns Iterable <V> has(key) Declaration has(key: K): boolean; Parameters key K A key. Gets a value indicating whether any group has the provided key. Returns boolean"
  },
  "api/iter-ordered.html": {
    "href": "api/iter-ordered.html",
    "title": "@esfx/iter-ordered Package | @esfx API Reference",
    "keywords": "@esfx/iter-ordered Package A Symbol-based API for defining an Iterable with an inherent order. Installation npm i @esfx/iter-ordered Usage TypeScript JavaScript (CommonJS) import { OrderedIterable } from \"@esfx/iter-ordered\"; import { Comparer, Comparison } from \"@esfx/equatable\"; interface Book { title: string; isbn: string; // ... } class BooksOrderedIterable implements OrderedIterable<Book> { private _books: Iterable<Book>; private _orderBy: readonly { keySelector: (element: Book) => unknown, keyComparer: Comparer<unknown>, descending: boolean }[]; private constructor(books: Iterable<Book>, orderBy: readonly { keySelector: (element: Book) => unknown, keyComparer: Comparer<unknown>, descending: boolean }[]) { this._books = books; this._orderBy = orderBy; } static orderBy<K>(books: Iterable<Book>, keySelector: (element: Book) => K, keyComparer: Comparison<K> | Comparer<K>, descending: boolean): OrderedIterable<Book> { if (typeof keyComparer === \"function\") keyComparer = Comparer.create(keyComparer); return new BooksOrderedIterable(books, [{ keySelector, keyComparer, descending }]); } [OrderedIterable.thenBy]<K>(keySelector: (element: Book) => K, keyComparer: Comparison<K> | Comparer<K>, descending: boolean): OrderedIterable<Book> { if (typeof keyComparer === \"function\") keyComparer = Comparer.create(keyComparer); return new BooksOrderedIterable(this._books, [...this._orderBy, { keySelector, keyComparer, descending }]); } * [Symbol.iterator]() { const books = [...this._books]; books.sort((a, b) => { for (const { keySelector, keyComparer, descending } of this._orderBy) { const aKey = keySelector(a); const bKey = keySelector(b); const result = descending ? keyComparer.compare(bKey, aKey) : keyComparer.compare(aKey, bKey); if (result !== 0) return result; } return 0; }); yield * books.values(); } } const { OrderedIterable } = require(\"@esfx/iter-ordered\"); const { Comparer } = require(\"@esfx/equatable\"); class BooksOrderedIterable { #books; #orderBy; constructor(books, orderBy) { this.#books = books; this.#orderBy = orderBy; } static orderBy(books, keySelector, keyComparer, descending) { if (typeof keyComparer === \"function\") keyComparer = Comparer.create(keyComparer); return new BooksOrderedIterable(books, [{ keySelector, keyComparer, descending }]); } [OrderedIterable.thenBy](keySelector, keyComparer, descending) { if (typeof keyComparer === \"function\") keyComparer = Comparer.create(keyComparer); return new BooksOrderedIterable(this.#books, [...this.#orderBy, { keySelector, keyComparer, descending }]); } * [Symbol.iterator]() { const books = [...this.#books]; books.sort((a, b) => { for (const { keySelector, keyComparer, descending } of this.#orderBy) { const aKey = keySelector(a); const bKey = keySelector(b); const result = descending ? keyComparer.compare(bKey, aKey) : keyComparer.compare(aKey, bKey); if (result !== 0) return result; } return 0; }); yield * books.values(); } } Interfaces OrderedIterable<T> Represents an Iterable that is inherently ordered. Namespaces OrderedIterable"
  },
  "api/iter-ordered/orderediterable-interface.html": {
    "href": "api/iter-ordered/orderediterable-interface.html",
    "title": "OrderedIterable<T> Interface | @esfx API Reference",
    "keywords": "OrderedIterable<T> Interface Package : @esfx/iter-ordered Represents an Iterable that is inherently ordered. Declaration export interface OrderedIterable<T> extends Iterable<T> Inheritance Iterable <T> OrderedIterable<T> Methods [OrderedIterable.thenBy](keySelector, comparer, descending) Creates a subsequent OrderedIterable whose elements are also ordered by the provided key. Declaration [OrderedIterable.thenBy]<K>(keySelector: (element: T) => K, comparer: Comparison<K> | Comparer<K>, descending: boolean): OrderedIterable<T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> A callback used to compare two keys. descending boolean A value indicating whether to sort in descending ( true <!-- --> ) or ascending ( false <!-- --> ) order. Returns OrderedIterable <T>"
  },
  "api/iter-ordered/orderediterable-namespace.html": {
    "href": "api/iter-ordered/orderediterable-namespace.html",
    "title": "OrderedIterable Namespace | @esfx API Reference",
    "keywords": "OrderedIterable Namespace Package : @esfx/iter-ordered Functions hasInstance(x) Declaration function hasInstance(x: unknown): x is OrderedIterable<unknown>; Parameters x unknown Returns x is OrderedIterable <unknown> Variables thenBy Declaration thenBy: unique symbol"
  },
  "api/iter-page.html": {
    "href": "api/iter-page.html",
    "title": "@esfx/iter-page Package | @esfx API Reference",
    "keywords": "@esfx/iter-page Package A Symbol-based API for defining a paged Iterable . Installation npm i @esfx/iter-page Usage TBD Classes HierarchyPage Page"
  },
  "api/iter-page/hierarchypage.html": {
    "href": "api/iter-page/hierarchypage.html",
    "title": "HierarchyPage Class | @esfx API Reference",
    "keywords": "HierarchyPage Class Package : @esfx/iter-page Declaration export declare class HierarchyPage<TNode, T extends TNode> extends Page<T> implements HierarchyIterable<TNode, T> Inheritance Page <T> HierarchyPage Inherited Members [Symbol.iterator]() constructor(page, offset, values) from(page, offset, values, provider) from(page, offset, values) from(page, offset, values) offset page values Constructors constructor(page, offset, values, provider) Constructs a new instance of the HierarchyPage class Declaration constructor(page: number, offset: number, values: Iterable<T>, provider: HierarchyProvider<TNode>); Parameters page number offset number values Iterable <T> provider HierarchyProvider <TNode> constructor(page, offset, values) Constructs a new instance of the HierarchyPage class Declaration constructor(page: number, offset: number, values: HierarchyIterable<TNode, T>); Parameters page number offset number values HierarchyIterable <TNode, T> Properties values Declaration readonly values: HierarchyIterable<TNode, T>; Property Value HierarchyIterable <TNode, T> Methods [Hierarchical.hierarchy]() Declaration [Hierarchical.hierarchy](): HierarchyProvider<TNode>; Returns HierarchyProvider <TNode>"
  },
  "api/iter-page/page.html": {
    "href": "api/iter-page/page.html",
    "title": "Page Class | @esfx API Reference",
    "keywords": "Page Class Package : @esfx/iter-page Declaration export declare class Page<T> implements Iterable<T> Constructors constructor(page, offset, values) Constructs a new instance of the Page class Declaration constructor(page: number, offset: number, values: Iterable<T>); Parameters page number offset number values Iterable <T> Properties offset The element offset from the start of the source iterable. Declaration readonly offset: number; Property Value number page The page offset from the start of the source iterable. Declaration readonly page: number; Property Value number values The values associated with this page. Declaration readonly values: Iterable<T>; Property Value Iterable <T> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): Iterator<T, any, undefined>; Returns Iterator <T, any, undefined> from(page, offset, values, provider) Declaration static from<TNode, T extends TNode>(page: number, offset: number, values: Iterable<T>, provider: HierarchyProvider<TNode>): HierarchyPage<TNode, T>; Type Parameters TNode T Parameters page number offset number values Iterable <T> provider HierarchyProvider <TNode> Returns HierarchyPage <TNode, T> from(page, offset, values) Declaration static from<TNode, T extends TNode>(page: number, offset: number, values: HierarchyIterable<TNode, T>): HierarchyPage<TNode, T>; Type Parameters TNode T Parameters page number offset number values HierarchyIterable <TNode, T> Returns HierarchyPage <TNode, T> from(page, offset, values) Declaration static from<T>(page: number, offset: number, values: Iterable<T>): Page<T>; Type Parameters T Parameters page number offset number values Iterable <T> Returns Page <T>"
  },
  "api/iter-query.html": {
    "href": "api/iter-query.html",
    "title": "@esfx/iter-query Package | @esfx API Reference",
    "keywords": "@esfx/iter-query Package An iteration and query API for ECMAScript iterables. Installation npm i @esfx/iter-query Usage TypeScript JavaScript (CommonJS) import { Query } from \"@esfx/iter-query\"; let q = Query .from(books) .filter(book => book.author === \"Alice\") .groupBy(book => book.releaseYear); const { Query } = require(\"@esfx/iter-query\"); let q = Query .from(books) .filter(book => book.author === \"Alice\") .groupBy(book => book.releaseYear); Classes HierarchyQuery Represents a sequence of hierarchically organized values. OrderedHierarchyQuery Represents an ordered sequence of hierarchically organized values. OrderedQuery Represents an ordered sequence of elements. Query A Query represents a series of operations that act upon an Iterable or ArrayLike. Evaluation of these operations is deferred until the either a scalar value is requested from the Query or the Query is iterated. Functions from(source) Creates a Query from a Iterable source. Declaration export declare function from<TNode, T extends TNode>(source: OrderedHierarchyIterable<TNode, T>): OrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source OrderedHierarchyIterable <TNode, T> Returns OrderedHierarchyQuery <TNode, T> from(source) Declaration export declare function from<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>): HierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> Returns HierarchyQuery <TNode, T> from(source, provider) Declaration export declare function from<TNode, T extends TNode>(source: OrderedIterable<T>, provider: HierarchyProvider<TNode>): OrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source OrderedIterable <T> provider HierarchyProvider <TNode> Returns OrderedHierarchyQuery <TNode, T> from(source, provider) Declaration export declare function from<TNode, T extends TNode>(source: Iterable<T>, provider: HierarchyProvider<TNode>): HierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source Iterable <T> provider HierarchyProvider <TNode> Returns HierarchyQuery <TNode, T> from(source) Declaration export declare function from<T>(source: OrderedIterable<T>): OrderedQuery<T>; Type Parameters T Parameters source OrderedIterable <T> Returns OrderedQuery <T> from(source) Declaration export declare function from<T extends readonly unknown[] | []>(source: Iterable<T>): Query<T>; Type Parameters T Parameters source Iterable <T> Returns Query <T> from(source) Declaration export declare function from<T>(source: Iterable<T>): Query<T>; Type Parameters T Parameters source Iterable <T> Returns Query <T> Type Aliases GroupedQueryFlow Declaration export declare type GroupedQueryFlow<S, K, T> = S extends Hierarchical<infer TNode> ? Query<HierarchyGrouping<K, TNode, TNode & T>> : Query<Grouping<K, T>>; Type Parameters S K T HierarchyQueryFlow Declaration export declare type HierarchyQueryFlow<S, TNode extends (T extends TNode ? unknown : never), T> = S extends OrderedIterable<any> ? OrderedHierarchyQuery<TNode, TNode & T> : HierarchyQuery<TNode, TNode & T>; Type Parameters S TNode T MergeQueryFlow Declaration export declare type MergeQueryFlow<L, R, T> = L extends Hierarchical<infer LTNode> ? R extends Hierarchical<infer RTNode> ? HierarchyQuery<LTNode | RTNode, LTNode & T | RTNode & T> : HierarchyQuery<LTNode, LTNode & T> : R extends Hierarchical<infer RTNode> ? HierarchyQuery<RTNode, RTNode & T> : Query<T>; Type Parameters L R T OrderedQueryFlow Declaration export declare type OrderedQueryFlow<S, T> = S extends Hierarchical<infer TNode> ? OrderedHierarchyQuery<TNode, TNode & T> : OrderedQuery<T>; Type Parameters S T PagedQueryFlow Declaration export declare type PagedQueryFlow<S, T> = S extends Hierarchical<infer TNode> ? Query<HierarchyPage<TNode, TNode & T>> : Query<Page<T>>; Type Parameters S T QueryFlow Declaration export declare type QueryFlow<S, T> = S extends OrderedIterable<any> ? OrderedQueryFlow<S, T> : UnorderedQueryFlow<S, T>; Type Parameters S T UnorderedQueryFlow Declaration export declare type UnorderedQueryFlow<S, T> = S extends Hierarchical<infer TNode> ? HierarchyQuery<TNode, TNode & T> : Query<T>; Type Parameters S T"
  },
  "api/iter-query/hierarchyquery.html": {
    "href": "api/iter-query/hierarchyquery.html",
    "title": "HierarchyQuery Class | @esfx API Reference",
    "keywords": "HierarchyQuery Class Package : @esfx/iter-query Represents a sequence of hierarchically organized values. Declaration export declare class HierarchyQuery<TNode, T extends TNode = TNode> extends Query<T> implements HierarchyIterable<TNode, T> Inheritance Query <T> HierarchyQuery Inherited Members _from(source) _from(source) _from(source, provider) _from(source, provider) _from(source) _from(source) _from(source) [Symbol.iterator]() constructor(source) append(value) average() average(elementSelector) break(predicate) concat(right) concat(right) consume(iterator, options) continuous(value) copyTo(dest, start, count) copyTo(dest, start, count) corresponds(right, equaler) corresponds(right, equaler) correspondsBy(right, keySelector, keyEqualer) correspondsBy(right, leftKeySelector, rightKeySelector, keyEqualer) count(predicate) defaultIfEmpty(defaultValue) distinct(equaler) distinctBy(keySelector, keyEqualer) drop(count) dropRight(count) dropUntil(predicate) dropWhile(predicate) elementAt(offset) empty() endsWith(right, equaler) endsWith(right, equaler) every(predicate) every(predicate) except(right, equaler) exceptBy(right, keySelector, keyEqualer) exclude(values) filter(predicate) filter(predicate) filterBy(keySelector, predicate) filterDefined() filterDefinedBy(keySelector) filterNot(predicate) filterNot(predicate) filterNotBy(keySelector, predicate) filterNotDefinedBy(keySelector) first(predicate) first(predicate) flatMap(projection) flatMap(projection, resultSelector) forEach(callback) from(source) from(source) from(source, provider) from(source, provider) from(source) from(source) from(source) fullJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) generate(count, generator) groupBy(keySelector, keyEqualer) groupBy(keySelector, elementSelector, keyEqualer) groupBy(keySelector, elementSelector, resultSelector, keyEqualer) groupBy(keySelector, elementSelector, resultSelector, keyEqualer) groupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) includes(value, equaler) includes(value, equaler) includesSequence(right, equaler) includesSequence(right, equaler) intersect(right, equaler) intersect(right, equaler) intersectBy(right, keySelector, keyEqualer) intersectBy(right, keySelector, keyEqualer) into(callback) join(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) last(predicate) last(predicate) map(selector) materialize() max(comparer) maxBy(keySelector, keyComparer) min(comparer) minBy(keySelector, keyComparer) nth(offset) of(elements) once(value) orderBy(keySelector, comparer) orderByDescending(keySelector, comparer) pageBy(pageSize) pageBy(pageSize, pageSelector) patch(start, skipCount, range) prepend(value) range(start, end, increment) reduce(accumulator) reduce(accumulator, seed, resultSelector) reduce(accumulator, seed, resultSelector) reduceRight(accumulator) reduceRight(accumulator, seed, resultSelector) reduceRight(accumulator, seed, resultSelector) relativeComplement(right, equaler) relativeComplementBy(right, keySelector, keyEqualer) repeat(value, count) reverse() scan(accumulator) scan(accumulator, seed) scanRight(accumulator) scanRight(accumulator, seed) select(selector) selectMany(projection) selectMany(projection, resultSelector) single(predicate) single(predicate) skip(count) skipRight(count) skipUntil(predicate) skipWhile(predicate) some(predicate) span(predicate) span(predicate) spanMap(keySelector, keyEqualer) spanMap(keySelector, elementSelector, keyEqualer) spanMap(keySelector, elementSelector, spanSelector, keyEqualer) spanMap(keySelector, elementSelector, spanSelector, keyEqualer) spanUntil(predicate) startsWith(right, equaler) startsWith(right, equaler) sum() sum(elementSelector) symmetricDifference(right, equaler) symmetricDifference(right, equaler) symmetricDifferenceBy(right, keySelector, keyEqualer) symmetricDifferenceBy(right, keySelector, keyEqualer) take(count) takeRight(count) takeUntil(predicate) takeWhile(predicate) takeWhile(predicate) tap(callback) through(callback) toArray() toArray(elementSelector) toHashMap(keySelector, keyEqualer) toHashMap(keySelector, elementSelector, keyEqualer) toHashSet(equaler) toHashSet(elementSelector, equaler) toHierarchy(provider) toJSON() toLookup(keySelector, keyEqualer) toLookup(keySelector, elementSelector, keyEqualer) toMap(keySelector) toMap(keySelector, elementSelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toSet() toSet(elementSelector) union(right, equaler) union(right, equaler) unionBy(right, keySelector, keyEqualer) unionBy(right, keySelector, keyEqualer) unzip() unzip(partSelector) where(predicate) where(predicate) whereBy(keySelector, predicate) whereDefined() whereDefinedBy(keySelector) whereNot(predicate) whereNot(predicate) whereNotBy(keySelector, predicate) whereNotDefinedBy(keySelector) zip(right) zip(right, selector) Constructors constructor(source) Constructs a new instance of the HierarchyQuery class Declaration constructor(source: HierarchyIterable<TNode, T>); Parameters source HierarchyIterable <TNode, T> constructor(source, provider) Constructs a new instance of the HierarchyQuery class Declaration constructor(source: Iterable<T>, provider: HierarchyProvider<TNode>); Parameters source Iterable <T> provider HierarchyProvider <TNode> Methods [Hierarchical.hierarchy]() Declaration [Hierarchical.hierarchy](): HierarchyProvider<TNode>; Returns HierarchyProvider <TNode> ancestors(predicate) Creates a subquery for the ancestors of each element in the hierarchy. Declaration ancestors<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> ancestors(predicate) Creates a subquery for the ancestors of each element in the hierarchy. Declaration ancestors(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> ancestorsAndSelf(predicate) Creates a subquery for the ancestors of each element as well as each element in the hierarchy. Declaration ancestorsAndSelf<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> ancestorsAndSelf(predicate) Creates a subquery for the ancestors of each element as well as each element in the hierarchy. Declaration ancestorsAndSelf(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> bottomMost(predicate) Creates a subquery for the bottom-most elements. Elements that are an ancestor of any other element are removed. Hierarchy Declaration bottomMost<U extends T>(predicate: (element: T) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: T) => element is U Returns HierarchyQuery <TNode, U> bottomMost(predicate) Creates a subquery for the bottom-most elements. Elements that are an ancestor of any other element are removed. Hierarchy Declaration bottomMost(predicate?: (element: T) => boolean): HierarchyQuery<TNode, T>; Parameters predicate (element: T) => boolean Returns HierarchyQuery <TNode, T> children(predicate) Creates a subquery for the children of each element in the hierarchy. Declaration children<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> children(predicate) Creates a subquery for the children of each element in the hierarchy. Declaration children(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> descendants(predicate) Creates a subquery for the descendants of each element in the hierarchy. Declaration descendants<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> descendants(predicate) Creates a subquery for the descendants of each element in the hierarchy. Declaration descendants(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> descendantsAndSelf(predicate) Creates a subquery for the descendants of each element as well as each element in the hierarchy. Declaration descendantsAndSelf<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> descendantsAndSelf(predicate) Creates a subquery for the descendants of each element as well as each element in the hierarchy. Declaration descendantsAndSelf(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> firstChild(predicate) Creates a subquery for the first child of each element in the hierarchy. Declaration firstChild<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> firstChild(predicate) Creates a subquery for the first child of each element in the hierarchy. Declaration firstChild(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> following(predicate) Creates a subquery for the nodes following each element in the hierarchy. Declaration following<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> following(predicate) Creates a subquery for the nodes following each element in the hierarchy. Declaration following(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> followingSiblings(predicate) Creates a subquery for the siblings after each element in the hierarchy. Declaration followingSiblings<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> followingSiblings(predicate) Creates a subquery for the siblings after each element in the hierarchy. Declaration followingSiblings(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> lastChild(predicate) Creates a subquery for the last child of each element in the hierarchy. Declaration lastChild<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> lastChild(predicate) Creates a subquery for the last child of each element in the hierarchy. Declaration lastChild(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> nthChild(offset, predicate) Creates a subquery for the child of each element at the specified offset. A negative offset starts from the last child. Declaration nthChild<U extends TNode>(offset: number, predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters offset number The offset for the child. Hierarchy predicate (element: TNode) => element is U Returns HierarchyQuery <TNode, U> nthChild(offset, predicate) Creates a subquery for the child of each element at the specified offset. A negative offset starts from the last child. Declaration nthChild(offset: number, predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters offset number The offset for the child. Hierarchy predicate (element: TNode) => boolean Returns HierarchyQuery <TNode> parents(predicate) Creates a subquery for the parents of each element in the hierarchy. Declaration parents<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> parents(predicate) Creates a subquery for the parents of each element in the hierarchy. Declaration parents(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> preceding(predicate) Creates a subquery for the nodes preceding each element in the hierarchy. Declaration preceding<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> preceding(predicate) Creates a subquery for the nodes preceding each element in the hierarchy. Declaration preceding(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> precedingSiblings(predicate) Creates a subquery for the siblings before each element in the hierarchy. Declaration precedingSiblings<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> precedingSiblings(predicate) Creates a subquery for the siblings before each element in the hierarchy. Declaration precedingSiblings(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> root(predicate) Creates a subquery for the roots of each element in the hierarchy. Declaration root<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> root(predicate) Creates a subquery for the roots of each element in the hierarchy. Declaration root(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> self(predicate) Creates a subquery for this query <!-- --> . Declaration self<U extends T>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> self(predicate) Creates a subquery for this query <!-- --> . Declaration self<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> self(predicate) Creates a subquery for this query <!-- --> . Declaration self(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> siblings(predicate) Creates a subquery for the siblings of each element in the hierarchy. Declaration siblings<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> siblings(predicate) Creates a subquery for the siblings of each element in the hierarchy. Declaration siblings(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> siblingsAfterSelf(predicate) Creates a subquery for the siblings after each element in the hierarchy. NOTE: This is an alias for followingSiblings <!-- --> . Declaration siblingsAfterSelf<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> siblingsAfterSelf(predicate) Creates a subquery for the siblings after each element in the hierarchy. NOTE: This is an alias for followingSiblings <!-- --> . Declaration siblingsAfterSelf(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> siblingsAndSelf(predicate) Creates a subquery for the siblings of each element as well as each element in the hierarchy. Declaration siblingsAndSelf<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> siblingsAndSelf(predicate) Creates a subquery for the siblings of each element as well as each element in the hierarchy. Declaration siblingsAndSelf(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> siblingsBeforeSelf(predicate) Creates a subquery for the siblings before each element in the hierarchy. NOTE: This is an alias for precedingSiblings <!-- --> . Declaration siblingsBeforeSelf<U extends TNode>(predicate: (element: TNode) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: TNode) => element is U A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode, U> siblingsBeforeSelf(predicate) Creates a subquery for the siblings before each element in the hierarchy. NOTE: This is an alias for precedingSiblings <!-- --> . Declaration siblingsBeforeSelf(predicate?: (element: TNode) => boolean): HierarchyQuery<TNode>; Parameters predicate (element: TNode) => boolean A callback used to filter the results. Hierarchy Returns HierarchyQuery <TNode> topMost(predicate) Creates a subquery for the top-most elements. Elements that are a descendant of any other element are removed. Hierarchy Declaration topMost<U extends T>(predicate: (element: T) => element is U): HierarchyQuery<TNode, U>; Type Parameters U Parameters predicate (element: T) => element is U Returns HierarchyQuery <TNode, U> topMost(predicate) Creates a subquery for the top-most elements. Elements that are a descendant of any other element are removed. Hierarchy Declaration topMost(predicate?: (element: T) => boolean): HierarchyQuery<TNode, T>; Parameters predicate (element: T) => boolean Returns HierarchyQuery <TNode, T>"
  },
  "api/iter-query/orderedhierarchyquery.html": {
    "href": "api/iter-query/orderedhierarchyquery.html",
    "title": "OrderedHierarchyQuery Class | @esfx API Reference",
    "keywords": "OrderedHierarchyQuery Class Package : @esfx/iter-query Represents an ordered sequence of hierarchically organized values. Declaration export declare class OrderedHierarchyQuery<TNode, T extends TNode = TNode> extends HierarchyQuery<TNode, T> implements OrderedHierarchyIterable<TNode, T> Inheritance HierarchyQuery <TNode, T> OrderedHierarchyQuery Inherited Members [Hierarchical.hierarchy]() constructor(source) constructor(source, provider) ancestors(predicate) ancestors(predicate) ancestorsAndSelf(predicate) ancestorsAndSelf(predicate) bottomMost(predicate) bottomMost(predicate) children(predicate) children(predicate) descendants(predicate) descendants(predicate) descendantsAndSelf(predicate) descendantsAndSelf(predicate) firstChild(predicate) firstChild(predicate) following(predicate) following(predicate) followingSiblings(predicate) followingSiblings(predicate) lastChild(predicate) lastChild(predicate) nthChild(offset, predicate) nthChild(offset, predicate) parents(predicate) parents(predicate) preceding(predicate) preceding(predicate) precedingSiblings(predicate) precedingSiblings(predicate) root(predicate) root(predicate) self(predicate) self(predicate) self(predicate) siblings(predicate) siblings(predicate) siblingsAfterSelf(predicate) siblingsAfterSelf(predicate) siblingsAndSelf(predicate) siblingsAndSelf(predicate) siblingsBeforeSelf(predicate) siblingsBeforeSelf(predicate) topMost(predicate) topMost(predicate) Constructors constructor(source) Constructs a new instance of the OrderedHierarchyQuery class Declaration constructor(source: OrderedHierarchyIterable<TNode, T>); Parameters source OrderedHierarchyIterable <TNode, T> constructor(source, provider) Constructs a new instance of the OrderedHierarchyQuery class Declaration constructor(source: OrderedIterable<T>, provider: HierarchyProvider<TNode>); Parameters source OrderedIterable <T> provider HierarchyProvider <TNode> Methods [OrderedIterable.thenBy](keySelector, comparison, descending) Declaration [OrderedIterable.thenBy]<K>(keySelector: (element: T) => K, comparison: Comparison<K> | Comparer<K>, descending: boolean): OrderedHierarchyIterable<TNode, T>; Type Parameters K Parameters keySelector (element: T) => K comparison Comparison <K> | Comparer <K> descending boolean Returns OrderedHierarchyIterable <TNode, T> thenBy(keySelector, comparison) Creates a subsequent ordered subquery whose elements are sorted in ascending order by the provided key. Declaration thenBy<K>(keySelector: (element: T) => K, comparison?: Comparison<K> | Comparer<K>): OrderedHierarchyQuery<TNode, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparison Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedHierarchyQuery <TNode, T> thenByDescending(keySelector, comparison) Creates a subsequent ordered subquery whose elements are sorted in descending order by the provided key. Declaration thenByDescending<K>(keySelector: (element: T) => K, comparison?: Comparison<K> | Comparer<K>): OrderedHierarchyQuery<TNode, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparison Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedHierarchyQuery <TNode, T>"
  },
  "api/iter-query/orderedquery.html": {
    "href": "api/iter-query/orderedquery.html",
    "title": "OrderedQuery Class | @esfx API Reference",
    "keywords": "OrderedQuery Class Package : @esfx/iter-query Represents an ordered sequence of elements. Declaration export declare class OrderedQuery<T> extends Query<T> implements OrderedIterable<T> Inheritance Query <T> OrderedQuery Inherited Members _from(source) _from(source) _from(source, provider) _from(source, provider) _from(source) _from(source) _from(source) [Symbol.iterator]() constructor(source) append(value) average() average(elementSelector) break(predicate) concat(right) concat(right) consume(iterator, options) continuous(value) copyTo(dest, start, count) copyTo(dest, start, count) corresponds(right, equaler) corresponds(right, equaler) correspondsBy(right, keySelector, keyEqualer) correspondsBy(right, leftKeySelector, rightKeySelector, keyEqualer) count(predicate) defaultIfEmpty(defaultValue) distinct(equaler) distinctBy(keySelector, keyEqualer) drop(count) dropRight(count) dropUntil(predicate) dropWhile(predicate) elementAt(offset) empty() endsWith(right, equaler) endsWith(right, equaler) every(predicate) every(predicate) except(right, equaler) exceptBy(right, keySelector, keyEqualer) exclude(values) filter(predicate) filter(predicate) filterBy(keySelector, predicate) filterDefined() filterDefinedBy(keySelector) filterNot(predicate) filterNot(predicate) filterNotBy(keySelector, predicate) filterNotDefinedBy(keySelector) first(predicate) first(predicate) flatMap(projection) flatMap(projection, resultSelector) forEach(callback) from(source) from(source) from(source, provider) from(source, provider) from(source) from(source) from(source) fullJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) generate(count, generator) groupBy(keySelector, keyEqualer) groupBy(keySelector, elementSelector, keyEqualer) groupBy(keySelector, elementSelector, resultSelector, keyEqualer) groupBy(keySelector, elementSelector, resultSelector, keyEqualer) groupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) includes(value, equaler) includes(value, equaler) includesSequence(right, equaler) includesSequence(right, equaler) intersect(right, equaler) intersect(right, equaler) intersectBy(right, keySelector, keyEqualer) intersectBy(right, keySelector, keyEqualer) into(callback) join(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) last(predicate) last(predicate) map(selector) materialize() max(comparer) maxBy(keySelector, keyComparer) min(comparer) minBy(keySelector, keyComparer) nth(offset) of(elements) once(value) orderBy(keySelector, comparer) orderByDescending(keySelector, comparer) pageBy(pageSize) pageBy(pageSize, pageSelector) patch(start, skipCount, range) prepend(value) range(start, end, increment) reduce(accumulator) reduce(accumulator, seed, resultSelector) reduce(accumulator, seed, resultSelector) reduceRight(accumulator) reduceRight(accumulator, seed, resultSelector) reduceRight(accumulator, seed, resultSelector) relativeComplement(right, equaler) relativeComplementBy(right, keySelector, keyEqualer) repeat(value, count) reverse() scan(accumulator) scan(accumulator, seed) scanRight(accumulator) scanRight(accumulator, seed) select(selector) selectMany(projection) selectMany(projection, resultSelector) single(predicate) single(predicate) skip(count) skipRight(count) skipUntil(predicate) skipWhile(predicate) some(predicate) span(predicate) span(predicate) spanMap(keySelector, keyEqualer) spanMap(keySelector, elementSelector, keyEqualer) spanMap(keySelector, elementSelector, spanSelector, keyEqualer) spanMap(keySelector, elementSelector, spanSelector, keyEqualer) spanUntil(predicate) startsWith(right, equaler) startsWith(right, equaler) sum() sum(elementSelector) symmetricDifference(right, equaler) symmetricDifference(right, equaler) symmetricDifferenceBy(right, keySelector, keyEqualer) symmetricDifferenceBy(right, keySelector, keyEqualer) take(count) takeRight(count) takeUntil(predicate) takeWhile(predicate) takeWhile(predicate) tap(callback) through(callback) toArray() toArray(elementSelector) toHashMap(keySelector, keyEqualer) toHashMap(keySelector, elementSelector, keyEqualer) toHashSet(equaler) toHashSet(elementSelector, equaler) toHierarchy(provider) toJSON() toLookup(keySelector, keyEqualer) toLookup(keySelector, elementSelector, keyEqualer) toMap(keySelector) toMap(keySelector, elementSelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toObject(prototype, keySelector, elementSelector, descriptorSelector) toSet() toSet(elementSelector) union(right, equaler) union(right, equaler) unionBy(right, keySelector, keyEqualer) unionBy(right, keySelector, keyEqualer) unzip() unzip(partSelector) where(predicate) where(predicate) whereBy(keySelector, predicate) whereDefined() whereDefinedBy(keySelector) whereNot(predicate) whereNot(predicate) whereNotBy(keySelector, predicate) whereNotDefinedBy(keySelector) zip(right) zip(right, selector) Constructors constructor(source) Constructs a new instance of the OrderedQuery class Declaration constructor(source: OrderedIterable<T>); Parameters source OrderedIterable <T> Methods [OrderedIterable.thenBy](keySelector, comparer, descending) Declaration [OrderedIterable.thenBy]<K>(keySelector: (element: T) => K, comparer: Comparison<K> | Comparer<K>, descending: boolean): OrderedIterable<T>; Type Parameters K Parameters keySelector (element: T) => K comparer Comparison <K> | Comparer <K> descending boolean Returns OrderedIterable <T> thenBy(keySelector, comparer) Creates a subsequent ordered subquery whose elements are sorted in ascending order by the provided key. Declaration thenBy<K>(keySelector: (element: T) => K, comparer?: Comparison<K> | Comparer<K>): OrderedQuery<T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedQuery <T> thenByDescending(keySelector, comparer) Creates a subsequent ordered subquery whose elements are sorted in descending order by the provided key. Declaration thenByDescending<K>(keySelector: (element: T) => K, comparer?: Comparison<K> | Comparer<K>): OrderedQuery<T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedQuery <T>"
  },
  "api/iter-query/query.html": {
    "href": "api/iter-query/query.html",
    "title": "Query Class | @esfx API Reference",
    "keywords": "Query Class Package : @esfx/iter-query A Query represents a series of operations that act upon an Iterable or ArrayLike. Evaluation of these operations is deferred until the either a scalar value is requested from the Query or the Query is iterated. Declaration export declare class Query<T> implements Iterable<T> Constructors constructor(source) Creates a Query from a Iterable source. Declaration constructor(source: Iterable<T>); Parameters source Iterable <T> A Iterable object. Methods _from(source) Declaration protected _from<TNode, T extends TNode>(source: OrderedHierarchyIterable<TNode, T>): OrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source OrderedHierarchyIterable <TNode, T> Returns OrderedHierarchyQuery <TNode, T> _from(source) Declaration protected _from<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>): HierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> Returns HierarchyQuery <TNode, T> _from(source, provider) Declaration protected _from<TNode, T extends TNode>(source: OrderedIterable<T>, provider: HierarchyProvider<TNode>): OrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source OrderedIterable <T> provider HierarchyProvider <TNode> Returns OrderedHierarchyQuery <TNode, T> _from(source, provider) Declaration protected _from<TNode, T extends TNode>(source: Iterable<T>, provider: HierarchyProvider<TNode>): HierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source Iterable <T> provider HierarchyProvider <TNode> Returns HierarchyQuery <TNode, T> _from(source) Declaration protected _from<T>(source: OrderedIterable<T>): OrderedQuery<T>; Type Parameters T Parameters source OrderedIterable <T> Returns OrderedQuery <T> _from(source) Declaration protected _from<T extends readonly unknown[] | []>(source: Iterable<T>): Query<T>; Type Parameters T Parameters source Iterable <T> Returns Query <T> _from(source) Declaration protected _from<T>(source: Iterable<T>): Query<T>; Type Parameters T Parameters source Iterable <T> Returns Query <T> [Symbol.iterator]() Declaration [Symbol.iterator](): Iterator<T>; Returns Iterator <T> append(value) Creates a subquery for the elements of this Query with the provided value appended to the end. Declaration append(value: T): UnorderedQueryFlow<this, T>; Parameters value T The value to append. Subquery Returns UnorderedQueryFlow <this, T> average() Computes the average for a series of numbers. Scalar Declaration average(): T extends number ? number : never; Returns T extends number ? number : never average(elementSelector) Computes the average for a series of numbers. Scalar Declaration average(elementSelector: (element: T) => number): number; Parameters elementSelector (element: T) => number Returns number break(predicate) Creates a tuple whose first element is a subquery containing the first span of elements that do not match the supplied predicate, and whose second element is a subquery containing the remaining elements. The first subquery is eagerly evaluated, while the second subquery is lazily evaluated. NOTE: This is an alias for spanUntil <!-- --> . Declaration break(predicate: (element: T, offset: number) => boolean): [UnorderedQueryFlow<this, T>, UnorderedQueryFlow<this, T>]; Parameters predicate (element: T, offset: number) => boolean The predicate used to match elements. Scalar Returns [ UnorderedQueryFlow <this, T>, UnorderedQueryFlow <this, T>] concat(right) Creates a subquery that concatenates this Query with another Iterable <!-- --> . Declaration concat<R extends Iterable<T>>(right: R): MergeQueryFlow<this, R, T>; Type Parameters R Parameters right R A Iterable object. Subquery Returns MergeQueryFlow <this, R, T> concat(right) Creates a subquery that concatenates this Query with another Iterable <!-- --> . Declaration concat(right: Iterable<T>): Query<T>; Parameters right Iterable <T> A Iterable object. Subquery Returns Query <T> consume(iterator, options) Creates a Query that, when iterated, consumes the provided Iterator <!-- --> . Declaration static consume<T>(iterator: Iterator<T>, options?: ConsumeOptions): Query<T>; Type Parameters T Parameters iterator Iterator <T> An Iterator object. Query options ConsumeOptions Returns Query <T> continuous(value) Creates a Query that repeats the provided value forever. Declaration static continuous<T>(value: T): Query<T>; Type Parameters T Parameters value T The value for each element of the Query <!-- --> . Query Returns Query <T> copyTo(dest, start, count) Writes each element to a destination. The destination must already have enough space to write the requested number of elements (i.e. arrays are *not* resized). Declaration copyTo(dest: T[], start?: number, count?: number): T[]; Parameters dest T[] The destination array. start number The offset into the array at which to start writing. count number The number of elements to write to the array. Scalar Returns T[] copyTo(dest, start, count) Writes each element to a destination. The destination must already have enough space to write the requested number of elements (i.e. arrays are *not* resized). Declaration copyTo<U extends IndexedCollection<T>>(dest: U, start?: number, count?: number): U; Type Parameters U Parameters dest U The destination array. start number The offset into the array at which to start writing. count number The number of elements to write to the array. Scalar Returns U corresponds(right, equaler) Computes a scalar value indicating whether every element in this Query corresponds to a matching element in another Iterable at the same position. Declaration corresponds(right: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Parameters right Iterable <T> A Iterable object. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns boolean corresponds(right, equaler) Computes a scalar value indicating whether every element in this Query corresponds to a matching element in another Iterable at the same position. Declaration corresponds<U>(right: Iterable<U>, equaler: (left: T, right: U) => boolean): boolean; Type Parameters U Parameters right Iterable <U> A Iterable object. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns boolean correspondsBy(right, keySelector, keyEqualer) Computes a scalar value indicating whether every element in this Query corresponds to a matching element in another Iterable at the same position. Declaration correspondsBy<K>(right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): boolean; Type Parameters K Parameters right Iterable <T> A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler used to compare the equality of two keys. Scalar Returns boolean correspondsBy(right, leftKeySelector, rightKeySelector, keyEqualer) Computes a scalar value indicating whether the key for every element in this Query corresponds to a matching key in right at the same position. Declaration correspondsBy<U, K>(right: Iterable<U>, leftKeySelector: (element: T) => K, rightKeySelector: (element: U) => K, keyEqualer?: EqualityComparison<K> | Equaler<K>): boolean; Type Parameters U K Parameters right Iterable <U> A Iterable object. leftKeySelector (element: T) => K A callback used to select the key for each element in this Query <!-- --> . rightKeySelector (element: U) => K A callback used to select the key for each element in right <!-- --> . keyEqualer EqualityComparison <K> | Equaler <K> An optional callback used to compare the equality of two keys. Scalar Returns boolean count(predicate) Counts the number of elements in the Query <!-- --> , optionally filtering elements using the supplied callback. Declaration count(predicate?: (element: T) => boolean): number; Parameters predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns number defaultIfEmpty(defaultValue) Creates a subquery that contains the provided default value if this Query contains no elements. Declaration defaultIfEmpty(defaultValue: T): UnorderedQueryFlow<this, T>; Parameters defaultValue T The default value. Subquery Returns UnorderedQueryFlow <this, T> distinct(equaler) Creates a subquery for the distinct elements of this Query <!-- --> . Declaration distinct(equaler?: Equaler<T>): UnorderedQueryFlow<this, T>; Parameters equaler Equaler <T> An Equaler object used to compare key equality. Subquery Returns UnorderedQueryFlow <this, T> distinctBy(keySelector, keyEqualer) Creates a subquery for the distinct elements of this Query <!-- --> . Declaration distinctBy<K>(keySelector: (value: T) => K, keyEqualer?: Equaler<K>): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (value: T) => K A callback used to select the key to determine uniqueness. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns UnorderedQueryFlow <this, T> drop(count) Creates a subquery containing all elements except the first elements up to the supplied count. Declaration drop(count: number): UnorderedQueryFlow<this, T>; Parameters count number The number of elements to drop. Subquery Returns UnorderedQueryFlow <this, T> dropRight(count) Creates a subquery containing all elements except the last elements up to the supplied count. Declaration dropRight(count: number): UnorderedQueryFlow<this, T>; Parameters count number The number of elements to drop. Subquery Returns UnorderedQueryFlow <this, T> dropUntil(predicate) Creates a subquery containing all elements except the first elements that don't match the supplied predicate. Declaration dropUntil(predicate: (element: T) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> dropWhile(predicate) Creates a subquery containing all elements except the first elements that match the supplied predicate. Declaration dropWhile(predicate: (element: T) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> elementAt(offset) Finds the value in the Query at the provided offset. A negative offset starts from the last element. Declaration elementAt(offset: number | Index): T | undefined; Parameters offset number | Index An offset. Scalar Returns T | undefined empty() Creates a Query with no elements. Query Declaration static empty<T>(): Query<T>; Type Parameters T Returns Query <T> endsWith(right, equaler) Computes a scalar value indicating whether the elements of this Query end with the same sequence of elements in another Iterable <!-- --> . Declaration endsWith(right: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Parameters right Iterable <T> A Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns boolean endsWith(right, equaler) Computes a scalar value indicating whether the elements of this Query end with the same sequence of elements in another Iterable <!-- --> . Declaration endsWith<U>(right: Iterable<U>, equaler: (left: T, right: U) => boolean): boolean; Type Parameters U Parameters right Iterable <U> A Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns boolean every(predicate) Computes a scalar value indicating whether all elements of the Query match the supplied callback. Declaration every<U extends T>(predicate: (element: T) => element is U): this is Query<U>; Type Parameters U Parameters predicate (element: T) => element is U A callback used to match each element. Scalar Returns this is Query <U> every(predicate) Computes a scalar value indicating whether all elements of the Query match the supplied callback. Declaration every(predicate: (element: T) => boolean): boolean; Parameters predicate (element: T) => boolean A callback used to match each element. Scalar Returns boolean except(right, equaler) Creates a subquery for the set difference between this and another Iterable <!-- --> . Declaration except(right: Iterable<T>, equaler?: Equaler<T>): UnorderedQueryFlow<this, T>; Parameters right Iterable <T> A Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns UnorderedQueryFlow <this, T> exceptBy(right, keySelector, keyEqualer) Creates a subquery for the set difference between this and another Iterable <!-- --> , where set identity is determined by the selected key. Declaration exceptBy<K>(right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): UnorderedQueryFlow<this, T>; Type Parameters K Parameters right Iterable <T> A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns UnorderedQueryFlow <this, T> exclude(values) Creates a subquery with every instance of the specified value removed. Declaration exclude(...values: [T, ...T[]]): UnorderedQueryFlow<this, T>; Parameters values [T, ...T[]] The values to exclude. Subquery Returns UnorderedQueryFlow <this, T> filter(predicate) Creates a subquery whose elements match the supplied predicate. Declaration filter<U extends T>(predicate: (element: T, offset: number) => element is U): UnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U A callback used to match each element. Returns UnorderedQueryFlow <this, U> filter(predicate) Creates a subquery whose elements match the supplied predicate. Declaration filter(predicate: (element: T, offset: number) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T, offset: number) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> filterBy(keySelector, predicate) Creates a subquery where the selected key for each element matches the supplied predicate. Declaration filterBy<K>(keySelector: (element: T) => K, predicate: (key: K, offset: number) => boolean): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => boolean A callback used to match each key. Returns UnorderedQueryFlow <this, T> filterDefined() Creates a subquery whose elements are neither null nor undefined <!-- --> . Subquery Declaration filterDefined(): UnorderedQueryFlow<this, NonNullable<T>>; Returns UnorderedQueryFlow <this, NonNullable <T>> filterDefinedBy(keySelector) Creates a subquery where the selected key for each element is neither null nor undefined <!-- --> . Declaration filterDefinedBy<K>(keySelector: (element: T) => K): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. Returns UnorderedQueryFlow <this, T> filterNot(predicate) Creates a subquery whose elements do not match the supplied predicate. Declaration filterNot<U extends T>(predicate: (element: T, offset: number) => element is U): UnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U A callback used to match each element. Returns UnorderedQueryFlow <this, U> filterNot(predicate) Creates a subquery whose elements do not match the supplied predicate. Declaration filterNot(predicate: (element: T, offset: number) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T, offset: number) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> filterNotBy(keySelector, predicate) Creates a subquery where the selected key for each element does not match the supplied predicate. Declaration filterNotBy<K>(keySelector: (element: T) => K, predicate: (key: K, offset: number) => boolean): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => boolean A callback used to match each key. Returns UnorderedQueryFlow <this, T> filterNotDefinedBy(keySelector) Creates a subquery where the selected key for each element is either null or undefined <!-- --> . Declaration filterNotDefinedBy<K>(keySelector: (element: T) => K): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. Returns UnorderedQueryFlow <this, T> first(predicate) Gets the first element in the Query <!-- --> , optionally filtering elements using the supplied callback. Declaration first<U extends T>(predicate: (element: T) => element is U): U | undefined; Type Parameters U Parameters predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns U | undefined first(predicate) Gets the first element in the Query <!-- --> , optionally filtering elements using the supplied callback. Declaration first(predicate?: (element: T) => boolean): T | undefined; Parameters predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns T | undefined flatMap(projection) Creates a subquery that iterates the results of applying a callback to each element. Declaration flatMap<U>(projection: (element: T) => Iterable<U>): Query<U>; Type Parameters U Parameters projection (element: T) => Iterable <U> A callback used to map each element into a Iterable <!-- --> . Returns Query <U> flatMap(projection, resultSelector) Creates a subquery that iterates the results of applying a callback to each element. Declaration flatMap<U, R>(projection: (element: T) => Iterable<U>, resultSelector: (element: T, innerElement: U) => R): Query<R>; Type Parameters U R Parameters projection (element: T) => Iterable <U> A callback used to map each element into a Iterable <!-- --> . resultSelector (element: T, innerElement: U) => R An optional callback used to map the outer and projected inner elements. Returns Query <R> forEach(callback) Invokes a callback for each element of the Query <!-- --> . Declaration forEach(callback: (element: T, offset: number) => void): void; Parameters callback (element: T, offset: number) => void The callback to invoke. Scalar Returns void from(source) Creates a Query from a Iterable source. Query Declaration static from<TNode, T extends TNode>(source: OrderedHierarchyIterable<TNode, T>): OrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source OrderedHierarchyIterable <TNode, T> Returns OrderedHierarchyQuery <TNode, T> from(source) Declaration static from<TNode, T extends TNode>(source: HierarchyIterable<TNode, T>): HierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source HierarchyIterable <TNode, T> Returns HierarchyQuery <TNode, T> from(source, provider) Declaration static from<TNode, T extends TNode>(source: OrderedIterable<T>, provider: HierarchyProvider<TNode>): OrderedHierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source OrderedIterable <T> provider HierarchyProvider <TNode> Returns OrderedHierarchyQuery <TNode, T> from(source, provider) Declaration static from<TNode, T extends TNode>(source: Iterable<T>, provider: HierarchyProvider<TNode>): HierarchyQuery<TNode, T>; Type Parameters TNode T Parameters source Iterable <T> provider HierarchyProvider <TNode> Returns HierarchyQuery <TNode, T> from(source) Declaration static from<T>(source: OrderedIterable<T>): OrderedQuery<T>; Type Parameters T Parameters source OrderedIterable <T> Returns OrderedQuery <T> from(source) Declaration static from<T extends readonly unknown[] | []>(source: Iterable<T>): Query<T>; Type Parameters T Parameters source Iterable <T> Returns Query <T> from(source) Declaration static from<T>(source: Iterable<T>): Query<T>; Type Parameters T Parameters source Iterable <T> Returns Query <T> fullJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates a subquery for the correlated elements of this Query and another Iterable <!-- --> . Declaration fullJoin<I, K, R>(inner: Iterable<I>, outerKeySelector: (element: T) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: T | undefined, inner: I | undefined) => R, keyEqualer?: Equaler<K>): Query<R>; Type Parameters I K R Parameters inner Iterable <I> A Iterable object. outerKeySelector (element: T) => K A callback used to select the key for an element in this Query <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in the other Iterable. resultSelector (outer: T | undefined, inner: I | undefined) => R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns Query <R> generate(count, generator) Creates a Query whose values are provided by a callback executed a provided number of times. Declaration static generate<T>(count: number, generator: (offset: number) => T): Query<T>; Type Parameters T Parameters count number The number of times to execute the callback. generator (offset: number) => T The callback to execute. Query Returns Query <T> groupBy(keySelector, keyEqualer) Groups each element of this Query by its key. Declaration groupBy<K>(keySelector: (element: T) => K, keyEqualer?: Equaler<K>): GroupedQueryFlow<this, K, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns GroupedQueryFlow <this, K, T> groupBy(keySelector, elementSelector, keyEqualer) Groups each element by its key. Declaration groupBy<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => V, keyEqualer?: Equaler<K>): GroupedQueryFlow<this, K, V>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => V A callback used to select a value for an element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns GroupedQueryFlow <this, K, V> groupBy(keySelector, elementSelector, resultSelector, keyEqualer) Groups each element by its key. Declaration groupBy<K, V, R>(keySelector: (element: T) => K, elementSelector: (element: T) => V, resultSelector: (key: K, elements: Query<V>) => R, keyEqualer?: Equaler<K>): Query<R>; Type Parameters K V R Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => V A callback used to select a value for an element. resultSelector (key: K, elements: Query <V>) => R A callback used to select a result from a group. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Query <R> groupBy(keySelector, elementSelector, resultSelector, keyEqualer) Groups each element by its key. Declaration groupBy<K, R>(keySelector: (element: T) => K, elementSelector: undefined, resultSelector: (key: K, elements: Query<T>) => R, keyEqualer?: Equaler<K>): Query<R>; Type Parameters K R Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector undefined A callback used to select a value for an element. resultSelector (key: K, elements: Query <T>) => R A callback used to select a result from a group. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Query <R> groupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates a grouped subquery for the correlated elements of this Query and another Iterable object. Declaration groupJoin<I, K, R>(inner: Iterable<I>, outerKeySelector: (element: T) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: T, inner: Query<I>) => R, keyEqualer?: Equaler<K>): Query<R>; Type Parameters I K R Parameters inner Iterable <I> A Iterable object. outerKeySelector (element: T) => K A callback used to select the key for an element in this Query <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in the other Iterable object. resultSelector (outer: T, inner: Query <I>) => R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns Query <R> includes(value, equaler) Computes a scalar value indicating whether the provided value is included in the Query <!-- --> . Declaration includes(value: T, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Parameters value T A value. equaler EqualityComparison <T> | Equaler <T> An optional callback used to compare the equality of two elements. Scalar Returns boolean includes(value, equaler) Computes a scalar value indicating whether the provided value is included in the Query <!-- --> . Declaration includes<U>(value: U, equaler: (left: T, right: U) => boolean): boolean; Type Parameters U Parameters value U A value. equaler (left: T, right: U) => boolean An optional callback used to compare the equality of two elements. Scalar Returns boolean includesSequence(right, equaler) Computes a scalar value indicating whether the elements of this Query include an exact sequence of elements from another Iterable <!-- --> . Declaration includesSequence(right: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Parameters right Iterable <T> A Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns boolean includesSequence(right, equaler) Computes a scalar value indicating whether the elements of this Query include an exact sequence of elements from another Iterable <!-- --> . Declaration includesSequence<U>(right: Iterable<U>, equaler: (left: T, right: U) => boolean): boolean; Type Parameters U Parameters right Iterable <U> A Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns boolean intersect(right, equaler) Creates a subquery for the set intersection of this Query and another Iterable <!-- --> . Declaration intersect<R extends Iterable<T>>(right: R, equaler?: Equaler<T>): MergeQueryFlow<this, R, T>; Type Parameters R Parameters right R A Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns MergeQueryFlow <this, R, T> intersect(right, equaler) Declaration intersect(right: Iterable<T>, equaler?: Equaler<T>): Query<T>; Parameters right Iterable <T> equaler Equaler <T> Returns Query <T> intersectBy(right, keySelector, keyEqualer) Creates a subquery for the set intersection of this Query and another Iterable <!-- --> , where set identity is determined by the selected key. Declaration intersectBy<K, R extends Iterable<T>>(right: R, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): MergeQueryFlow<this, R, T>; Type Parameters K R Parameters right R A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns MergeQueryFlow <this, R, T> intersectBy(right, keySelector, keyEqualer) Creates a subquery for the set intersection of this Query and another Iterable <!-- --> , where set identity is determined by the selected key. Declaration intersectBy<K>(right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Query<T>; Type Parameters K Parameters right Iterable <T> A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Query <T> into(callback) Pass the entire Query to the provided callback, returning the result. Declaration into<R>(callback: (source: this) => R): R; Type Parameters R Parameters callback (source: this) => R A callback function. Returns R join(inner, outerKeySelector, innerKeySelector, resultSelector, keyEqualer) Creates a subquery for the correlated elements of this Query and another Iterable <!-- --> . Declaration join<I, K, R>(inner: Iterable<I>, outerKeySelector: (element: T) => K, innerKeySelector: (element: I) => K, resultSelector: (outer: T, inner: I) => R, keyEqualer?: Equaler<K>): Query<R>; Type Parameters I K R Parameters inner Iterable <I> A Iterable object. outerKeySelector (element: T) => K A callback used to select the key for an element in this Query <!-- --> . innerKeySelector (element: I) => K A callback used to select the key for an element in the other Iterable. resultSelector (outer: T, inner: I) => R A callback used to select the result for the correlated elements. keyEqualer Equaler <K> An Equaler object used to compare key equality. Join Returns Query <R> last(predicate) Gets the last element in the Query <!-- --> , optionally filtering elements using the supplied callback. Declaration last<U extends T>(predicate: (element: T) => element is U): U | undefined; Type Parameters U Parameters predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns U | undefined last(predicate) Gets the last element in the Query <!-- --> , optionally filtering elements using the supplied callback. Declaration last(predicate?: (element: T) => boolean): T | undefined; Parameters predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns T | undefined map(selector) Creates a subquery by applying a callback to each element. Declaration map<U>(selector: (element: T, offset: number) => U): Query<U>; Type Parameters U Parameters selector (element: T, offset: number) => U A callback used to map each element. Returns Query <U> materialize() Eagerly evaluate the Query <!-- --> , returning a new Query <!-- --> . Subquery Declaration materialize(): UnorderedQueryFlow<this, T>; Returns UnorderedQueryFlow <this, T> max(comparer) Gets the maximum element in the Query <!-- --> , optionally comparing elements using the supplied callback. Declaration max(comparer?: Comparison<T> | Comparer<T>): T | undefined; Parameters comparer Comparison <T> | Comparer <T> An optional callback used to compare two elements. Scalar Returns T | undefined maxBy(keySelector, keyComparer) Gets the maximum element by its key in the Query <!-- --> , optionally comparing the keys of each element using the supplied callback. Declaration maxBy<K>(keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): T | undefined; Type Parameters K Parameters keySelector (element: T) => K A callback used to choose the key to compare. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare the keys. Scalar Returns T | undefined min(comparer) Gets the minimum element in the Query <!-- --> , optionally comparing elements using the supplied callback. Declaration min(comparer?: Comparison<T> | Comparer<T>): T | undefined; Parameters comparer Comparison <T> | Comparer <T> An optional callback used to compare two elements. Scalar Returns T | undefined minBy(keySelector, keyComparer) Gets the minimum element by its key in the Query <!-- --> , optionally comparing the keys of each element using the supplied callback. Declaration minBy<K>(keySelector: (element: T) => K, keyComparer?: Comparison<K> | Comparer<K>): T | undefined; Type Parameters K Parameters keySelector (element: T) => K A callback used to choose the key to compare. keyComparer Comparison <K> | Comparer <K> An optional callback used to compare the keys. Scalar Returns T | undefined nth(offset) Finds the value in the Query at the provided offset. A negative offset starts from the last element. NOTE: This is an alias for elementAt <!-- --> . Declaration nth(offset: number | Index): T | undefined; Parameters offset number | Index An offset. Scalar Returns T | undefined of(elements) Creates a Query for the provided elements. Declaration static of<T>(...elements: T[]): Query<T>; Type Parameters T Parameters elements T[] The elements of the Query <!-- --> . Query Returns Query <T> once(value) Creates a Query over a single element. Declaration static once<T>(value: T): Query<T>; Type Parameters T Parameters value T The only element for the Query <!-- --> . Query Returns Query <T> orderBy(keySelector, comparer) Creates an ordered subquery whose elements are sorted in ascending order by the provided key. Declaration orderBy<K>(keySelector: (element: T) => K, comparer?: Comparison<K> | Comparer<K>): OrderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedQueryFlow <this, T> orderByDescending(keySelector, comparer) Creates an ordered subquery whose elements are sorted in descending order by the provided key. Declaration orderByDescending<K>(keySelector: (element: T) => K, comparer?: Comparison<K> | Comparer<K>): OrderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. comparer Comparison <K> | Comparer <K> An optional callback used to compare two keys. Order Returns OrderedQueryFlow <this, T> pageBy(pageSize) Creates a subquery that splits this Query into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration pageBy(pageSize: number): PagedQueryFlow<this, T>; Parameters pageSize number The number of elements per page. Subquery Returns PagedQueryFlow <this, T> pageBy(pageSize, pageSelector) Creates a subquery that splits this Query into one or more pages. While advancing from page to page is evaluated lazily, the elements of the page are evaluated eagerly. Declaration pageBy<R>(pageSize: number, pageSelector: (page: number, offset: number, values: UnorderedQueryFlow<this, T>) => R): Query<R>; Type Parameters R Parameters pageSize number The number of elements per page. Subquery pageSelector (page: number, offset: number, values: UnorderedQueryFlow <this, T>) => R Returns Query <R> patch(start, skipCount, range) Creates a subquery for the elements of this Query with the provided range patched into the results. Declaration patch(start: number, skipCount?: number, range?: Iterable<T>): UnorderedQueryFlow<this, T>; Parameters start number The offset at which to patch the range. skipCount number The number of elements to skip from start. range Iterable <T> The range to patch into the result. Subquery Returns UnorderedQueryFlow <this, T> prepend(value) Creates a subquery for the elements of this Query with the provided value prepended to the beginning. Declaration prepend(value: T): UnorderedQueryFlow<this, T>; Parameters value T The value to prepend. Subquery Returns UnorderedQueryFlow <this, T> range(start, end, increment) Creates a Query over a range of numbers. Declaration static range(start: number, end: number, increment?: number): Query<number>; Parameters start number The starting number of the range. end number The ending number of the range. increment number The amount by which to change between each itereated value. Query Returns Query <number> reduce(accumulator) Computes a scalar value by applying an accumulator callback over each element. Declaration reduce(accumulator: (current: T, element: T, offset: number) => T): T; Parameters accumulator (current: T, element: T, offset: number) => T the callback used to compute the result. Returns T reduce(accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element. Declaration reduce<U>(accumulator: (current: U, element: T, offset: number) => U, seed: U, resultSelector?: (result: U, count: number) => U): U; Type Parameters U Parameters accumulator (current: U, element: T, offset: number) => U the callback used to compute the result. seed U An optional seed value. Scalar resultSelector (result: U, count: number) => U Returns U reduce(accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element. Declaration reduce<U, R>(accumulator: (current: U, element: T, offset: number) => U, seed: U, resultSelector: (result: U, count: number) => R): R; Type Parameters U R Parameters accumulator (current: U, element: T, offset: number) => U the callback used to compute the result. seed U An optional seed value. resultSelector (result: U, count: number) => R An optional callback used to compute the final result. Scalar Returns R reduceRight(accumulator) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration reduceRight(accumulator: (current: T, element: T, offset: number) => T): T; Parameters accumulator (current: T, element: T, offset: number) => T the callback used to compute the result. Scalar Returns T reduceRight(accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration reduceRight<U>(accumulator: (current: U, element: T, offset: number) => U, seed: U, resultSelector?: (result: U, count: number) => U): U; Type Parameters U Parameters accumulator (current: U, element: T, offset: number) => U the callback used to compute the result. seed U An optional seed value. Scalar resultSelector (result: U, count: number) => U Returns U reduceRight(accumulator, seed, resultSelector) Computes a scalar value by applying an accumulator callback over each element in reverse. Declaration reduceRight<U, R>(accumulator: (current: U, element: T, offset: number) => U, seed: U, resultSelector: (result: U, count: number) => R): R; Type Parameters U R Parameters accumulator (current: U, element: T, offset: number) => U the callback used to compute the result. seed U An optional seed value. resultSelector (result: U, count: number) => R An optional callback used to compute the final result. Scalar Returns R relativeComplement(right, equaler) Creates a subquery for the set difference between this and another Iterable <!-- --> . NOTE: This is an alias for except <!-- --> . Declaration relativeComplement(right: Iterable<T>, equaler?: Equaler<T>): UnorderedQueryFlow<this, T>; Parameters right Iterable <T> A Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns UnorderedQueryFlow <this, T> relativeComplementBy(right, keySelector, keyEqualer) Creates a subquery for the set difference between this and another Iterable <!-- --> , where set identity is determined by the selected key. NOTE: This is an alias for exceptBy <!-- --> . Declaration relativeComplementBy<K>(right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): UnorderedQueryFlow<this, T>; Type Parameters K Parameters right Iterable <T> A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns UnorderedQueryFlow <this, T> repeat(value, count) Creates a Query for a value repeated a provided number of times. Declaration static repeat<T>(value: T, count: number): Query<T>; Type Parameters T Parameters value T The value for each element of the Query <!-- --> . count number The number of times to repeat the value. Query Returns Query <T> reverse() Creates a subquery whose elements are in the reverse order. Subquery Declaration reverse(): UnorderedQueryFlow<this, T>; Returns UnorderedQueryFlow <this, T> scan(accumulator) Creates a subquery containing the cumulative results of applying the provided callback to each element. Declaration scan(accumulator: (current: T, element: T, offset: number) => T): Query<T>; Parameters accumulator (current: T, element: T, offset: number) => T The callback used to compute each result. Returns Query <T> scan(accumulator, seed) Creates a subquery containing the cumulative results of applying the provided callback to each element. Declaration scan<U>(accumulator: (current: U, element: T, offset: number) => U, seed: U): Query<U>; Type Parameters U Parameters accumulator (current: U, element: T, offset: number) => U The callback used to compute each result. seed U An optional seed value. Subquery Returns Query <U> scanRight(accumulator) Creates a subquery containing the cumulative results of applying the provided callback to each element in reverse. Declaration scanRight(accumulator: (current: T, element: T, offset: number) => T): Query<T>; Parameters accumulator (current: T, element: T, offset: number) => T The callback used to compute each result. Returns Query <T> scanRight(accumulator, seed) Creates a subquery containing the cumulative results of applying the provided callback to each element in reverse. Declaration scanRight<U>(accumulator: (current: U, element: T, offset: number) => U, seed?: U): Query<U>; Type Parameters U Parameters accumulator (current: U, element: T, offset: number) => U The callback used to compute each result. seed U An optional seed value. Subquery Returns Query <U> select(selector) Creates a subquery by applying a callback to each element. NOTE: This is an alias for map <!-- --> . Declaration select<U>(selector: (element: T, offset: number) => U): Query<U>; Type Parameters U Parameters selector (element: T, offset: number) => U A callback used to map each element. Returns Query <U> selectMany(projection) Creates a subquery that iterates the results of applying a callback to each element. NOTE: This is an alias for flatMap <!-- --> . Declaration selectMany<U>(projection: (element: T) => Iterable<U>): Query<U>; Type Parameters U Parameters projection (element: T) => Iterable <U> A callback used to map each element into an iterable. Returns Query <U> selectMany(projection, resultSelector) Creates a subquery that iterates the results of applying a callback to each element. NOTE: This is an alias for flatMap <!-- --> . Declaration selectMany<U, R>(projection: (element: T) => Iterable<U>, resultSelector: (element: T, innerElement: U) => R): Query<R>; Type Parameters U R Parameters projection (element: T) => Iterable <U> A callback used to map each element into an iterable. resultSelector (element: T, innerElement: U) => R An optional callback used to map the outer and projected inner elements. Returns Query <R> single(predicate) Gets the only element in the Query <!-- --> , or returns undefined <!-- --> . Declaration single<U extends T>(predicate: (element: T) => element is U): U | undefined; Type Parameters U Parameters predicate (element: T) => element is U An optional callback used to match each element. Scalar Returns U | undefined single(predicate) Gets the only element in the Query <!-- --> , or returns undefined. Declaration single(predicate?: (element: T) => boolean): T | undefined; Parameters predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns T | undefined skip(count) Creates a subquery containing all elements except the first elements up to the supplied count. NOTE: This is an alias for drop <!-- --> . Declaration skip(count: number): UnorderedQueryFlow<this, T>; Parameters count number The number of elements to skip. Subquery Returns UnorderedQueryFlow <this, T> skipRight(count) Creates a subquery containing all elements except the last elements up to the supplied count. NOTE: This is an alias for dropRight <!-- --> . Declaration skipRight(count: number): UnorderedQueryFlow<this, T>; Parameters count number The number of elements to skip. Subquery Returns UnorderedQueryFlow <this, T> skipUntil(predicate) Creates a subquery containing all elements except the first elements that don't match the supplied predicate. NOTE: This is an alias for dropUntil <!-- --> . Declaration skipUntil(predicate: (element: T) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> skipWhile(predicate) Creates a subquery containing all elements except the first elements that match the supplied predicate. NOTE: This is an alias for dropWhile <!-- --> . Declaration skipWhile(predicate: (element: T) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> some(predicate) Computes a scalar value indicating whether the Query contains any elements, optionally filtering the elements using the supplied callback. Declaration some(predicate?: (element: T) => boolean): boolean; Parameters predicate (element: T) => boolean An optional callback used to match each element. Scalar Returns boolean span(predicate) Creates a tuple whose first element is a subquery containing the first span of elements that match the supplied predicate, and whose second element is a subquery containing the remaining elements. The first subquery is eagerly evaluated, while the second subquery is lazily evaluated. Declaration span<U extends T>(predicate: (element: T, offset: number) => element is U): [UnorderedQueryFlow<this, U>, UnorderedQueryFlow<this, T>]; Type Parameters U Parameters predicate (element: T, offset: number) => element is U The predicate used to match elements. Scalar Returns [ UnorderedQueryFlow <this, U>, UnorderedQueryFlow <this, T>] span(predicate) Creates a tuple whose first element is a subquery containing the first span of elements that match the supplied predicate, and whose second element is a subquery containing the remaining elements. The first subquery is eagerly evaluated, while the second subquery is lazily evaluated. Declaration span(predicate: (element: T, offset: number) => boolean): [UnorderedQueryFlow<this, T>, UnorderedQueryFlow<this, T>]; Parameters predicate (element: T, offset: number) => boolean The predicate used to match elements. Scalar Returns [ UnorderedQueryFlow <this, T>, UnorderedQueryFlow <this, T>] spanMap(keySelector, keyEqualer) Creates a subquery whose elements are the contiguous ranges of elements that share the same key. Declaration spanMap<K>(keySelector: (element: T) => K, keyEqualer?: Equaler<K>): GroupedQueryFlow<this, K, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for an element. keyEqualer Equaler <K> Returns GroupedQueryFlow <this, K, T> spanMap(keySelector, elementSelector, keyEqualer) Creates a subquery whose values are computed from each element of the contiguous ranges of elements that share the same key. Declaration spanMap<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => V, keyEqualer?: Equaler<K>): GroupedQueryFlow<this, K, V>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => V A callback used to select a value for an element. keyEqualer Equaler <K> Returns GroupedQueryFlow <this, K, V> spanMap(keySelector, elementSelector, spanSelector, keyEqualer) Creates a subquery whose values are computed from the contiguous ranges of elements that share the same key. Declaration spanMap<K, V, R>(keySelector: (element: T) => K, elementSelector: (element: T) => V, spanSelector: (key: K, elements: Query<V>) => R, keyEqualer?: Equaler<K>): Query<R>; Type Parameters K V R Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector (element: T) => V A callback used to select a value for an element. spanSelector (key: K, elements: Query <V>) => R A callback used to select a result from a contiguous range. keyEqualer Equaler <K> Returns Query <R> spanMap(keySelector, elementSelector, spanSelector, keyEqualer) Creates a subquery whose values are computed from the contiguous ranges of elements that share the same key. Declaration spanMap<K, R>(keySelector: (element: T) => K, elementSelector: undefined, spanSelector: (key: K, elements: Query<T>) => R, keyEqualer?: Equaler<K>): Query<R>; Type Parameters K R Parameters keySelector (element: T) => K A callback used to select the key for an element. elementSelector undefined A callback used to select a value for an element. spanSelector (key: K, elements: Query <T>) => R A callback used to select a result from a contiguous range. keyEqualer Equaler <K> Returns Query <R> spanUntil(predicate) Creates a tuple whose first element is a subquery containing the first span of elements that do not match the supplied predicate, and whose second element is a subquery containing the remaining elements. The first subquery is eagerly evaluated, while the second subquery is lazily evaluated. Declaration spanUntil(predicate: (element: T, offset: number) => boolean): [UnorderedQueryFlow<this, T>, UnorderedQueryFlow<this, T>]; Parameters predicate (element: T, offset: number) => boolean The predicate used to match elements. Scalar Returns [ UnorderedQueryFlow <this, T>, UnorderedQueryFlow <this, T>] startsWith(right, equaler) Computes a scalar value indicating whether the elements of this Query start with the same sequence of elements in another Iterable <!-- --> . Declaration startsWith(right: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>): boolean; Parameters right Iterable <T> A Iterable object. equaler EqualityComparison <T> | Equaler <T> A callback used to compare the equality of two elements. Scalar Returns boolean startsWith(right, equaler) Computes a scalar value indicating whether the elements of this Query start with the same sequence of elements in another Iterable <!-- --> . Declaration startsWith<U>(right: Iterable<U>, equaler: (left: T, right: U) => boolean): boolean; Type Parameters U Parameters right Iterable <U> A Iterable object. equaler (left: T, right: U) => boolean A callback used to compare the equality of two elements. Scalar Returns boolean sum() Computes the sum for a series of numbers. Scalar Declaration sum(): T extends number ? number : never; Returns T extends number ? number : never sum(elementSelector) Computes the sum for a series of numbers. Scalar Declaration sum(elementSelector: (element: T) => number): number; Parameters elementSelector (element: T) => number Returns number symmetricDifference(right, equaler) Creates a subquery for the symmetric difference between this and another Iterable <!-- --> . Declaration symmetricDifference<R extends Iterable<T>>(right: R, equaler?: Equaler<T>): MergeQueryFlow<this, R, T>; Type Parameters R Parameters right R A Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns MergeQueryFlow <this, R, T> symmetricDifference(right, equaler) Creates a subquery for the symmetric difference between this and another Iterable <!-- --> . Declaration symmetricDifference(right: Iterable<T>, equaler?: Equaler<T>): Query<T>; Parameters right Iterable <T> A Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns Query <T> symmetricDifferenceBy(right, keySelector, keyEqualer) Creates a subquery for the symmetric difference between this and another Iterable <!-- --> , where set identity is determined by the selected key. Declaration symmetricDifferenceBy<K, R extends Iterable<T>>(right: R, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): MergeQueryFlow<this, R, T>; Type Parameters K R Parameters right R A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns MergeQueryFlow <this, R, T> symmetricDifferenceBy(right, keySelector, keyEqualer) Creates a subquery for the symmetric difference between this and another Iterable <!-- --> , where set identity is determined by the selected key. Declaration symmetricDifferenceBy<K>(right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Query<T>; Type Parameters K Parameters right Iterable <T> A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Query <T> take(count) Creates a subquery containing the first elements up to the supplied count. Declaration take(count: number): UnorderedQueryFlow<this, T>; Parameters count number The number of elements to take. Subquery Returns UnorderedQueryFlow <this, T> takeRight(count) Creates a subquery containing the last elements up to the supplied count. Declaration takeRight(count: number): UnorderedQueryFlow<this, T>; Parameters count number The number of elements to take. Subquery Returns UnorderedQueryFlow <this, T> takeUntil(predicate) Creates a subquery containing the first elements that do not match the supplied predicate. Declaration takeUntil(predicate: (element: T) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> takeWhile(predicate) Creates a subquery containing the first elements that match the supplied predicate. Declaration takeWhile<U extends T>(predicate: (element: T) => element is U): UnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T) => element is U A callback used to match each element. Returns UnorderedQueryFlow <this, U> takeWhile(predicate) Creates a subquery containing the first elements that match the supplied predicate. Declaration takeWhile(predicate: (element: T) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> tap(callback) Lazily invokes a callback as each element of the Query is iterated. Declaration tap(callback: (element: T, offset: number) => void): UnorderedQueryFlow<this, T>; Parameters callback (element: T, offset: number) => void The callback to invoke. Returns UnorderedQueryFlow <this, T> through(callback) Pass the entire Query to the provided callback, creating a new Query from the result. Declaration through<R extends Iterable<any>>(callback: (source: this) => R): QueryFlow<R, R extends Iterable<infer U> ? U : unknown>; Type Parameters R Parameters callback (source: this) => R A callback function. Returns QueryFlow <R, R extends Iterable <infer U> ? U : unknown> toArray() Creates an Array for the elements of the Query <!-- --> . Scalar Declaration toArray(): T[]; Returns T[] toArray(elementSelector) Creates an Array for the elements of the Query <!-- --> . Declaration toArray<V>(elementSelector: (element: T) => V): V[]; Type Parameters V Parameters elementSelector (element: T) => V A callback that selects a value for each element. Scalar Returns V[] toHashMap(keySelector, keyEqualer) Creates a Map for the elements of the Query <!-- --> . Declaration toHashMap<K>(keySelector: (element: T) => K, keyEqualer?: Equaler<K>): HashMap<K, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select a key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns HashMap <K, T> toHashMap(keySelector, elementSelector, keyEqualer) Creates a Map for the elements of the Query <!-- --> . Declaration toHashMap<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => V, keyEqualer?: Equaler<K>): HashMap<K, V>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns HashMap <K, V> toHashSet(equaler) Creates a HashSet for the elements of the Query <!-- --> . Declaration toHashSet(equaler?: Equaler<T>): HashSet<T>; Parameters equaler Equaler <T> An Equaler object used to compare equality. Scalar Returns HashSet <T> toHashSet(elementSelector, equaler) Creates a HashSet for the elements of the Query <!-- --> . Declaration toHashSet<V>(elementSelector: (element: T) => V, equaler?: Equaler<V>): HashSet<V>; Type Parameters V Parameters elementSelector (element: T) => V A callback that selects a value for each element. equaler Equaler <V> An Equaler object used to compare equality. Scalar Returns HashSet <V> toHierarchy(provider) Creates a HierarchyQuery using the provided HierarchyProvider <!-- --> . Declaration toHierarchy<TNode extends (T extends TNode ? unknown : never)>(provider: HierarchyProvider<TNode>): HierarchyQueryFlow<this, TNode, T>; Type Parameters TNode Parameters provider HierarchyProvider <TNode> A HierarchyProvider <!-- --> . Hierarchy Returns HierarchyQueryFlow <this, TNode, T> toJSON() Declaration toJSON(): T[]; Returns T[] toLookup(keySelector, keyEqualer) Creates a Lookup for the elements of the Query <!-- --> . Declaration toLookup<K>(keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Lookup<K, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select a key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Lookup <K, T> toLookup(keySelector, elementSelector, keyEqualer) Creates a Lookup for the elements of the Query <!-- --> . Declaration toLookup<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => V, keyEqualer?: Equaler<K>): Lookup<K, V>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Scalar Returns Lookup <K, V> toMap(keySelector) Creates a Map for the elements of the Query <!-- --> . Declaration toMap<K>(keySelector: (element: T) => K): Map<K, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Map <K, T> toMap(keySelector, elementSelector) Creates a Map for the elements of the Query <!-- --> . Declaration toMap<K, V>(keySelector: (element: T) => K, elementSelector: (element: T) => V): Map<K, V>; Type Parameters K V Parameters keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. Scalar Returns Map <K, V> toObject(prototype, keySelector) Creates an Object for the elements of the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration toObject<TProto extends object, K extends PropertyKey>(prototype: TProto, keySelector: (element: T) => K): TProto & Record<K, T>; Type Parameters TProto K Parameters prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns TProto & Record <K, T> toObject(prototype, keySelector) Creates an Object for the elements of the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration toObject<TProto extends object>(prototype: TProto, keySelector: (element: T) => PropertyKey): TProto & Record<PropertyKey, T>; Type Parameters TProto Parameters prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. Scalar Returns TProto & Record < PropertyKey , T> toObject(prototype, keySelector) Creates an Object for the elements of the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration toObject<K extends PropertyKey>(prototype: object | null | undefined, keySelector: (element: T) => K): Record<K, T>; Type Parameters K Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. Scalar Returns Record <K, T> toObject(prototype, keySelector) Creates an Object for the elements of the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // function obj.toString(); // \"x\",1:\"y\",2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0]); obj.x; // [\"x\", 1] obj.y; // [\"y\", 2] typeof obj.toString; // undefined Declaration toObject(prototype: object | null | undefined, keySelector: (element: T) => PropertyKey): Record<PropertyKey, T>; Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. Scalar Returns Record < PropertyKey , T> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<TProto extends object, K extends PropertyKey, V>(prototype: TProto, keySelector: (element: T) => K, elementSelector: (element: T) => V, descriptorSelector?: (key: K, element: V) => TypedPropertyDescriptor<V>): TProto & Record<K, V>; Type Parameters TProto K V Parameters prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: K, element: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns TProto & Record <K, V> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<TProto extends object, V>(prototype: TProto, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => V, descriptorSelector?: (key: PropertyKey, element: V) => TypedPropertyDescriptor<V>): TProto & Record<PropertyKey, V>; Type Parameters TProto V Parameters prototype TProto The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , element: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns TProto & Record < PropertyKey , V> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<K extends PropertyKey, V>(prototype: object | null | undefined, keySelector: (element: T) => K, elementSelector: (element: T) => V, descriptorSelector?: (key: K, element: V) => TypedPropertyDescriptor<V>): Record<K, V>; Type Parameters K V Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => K A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: K, element: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Record <K, V> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<V>(prototype: object | null | undefined, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => V, descriptorSelector?: (key: PropertyKey, element: V) => TypedPropertyDescriptor<V>): Record<PropertyKey, V>; Type Parameters V Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , element: V) => TypedPropertyDescriptor <V> A callback that defines the PropertyDescriptor for each property. Scalar Returns Record < PropertyKey , V> toObject(prototype, keySelector, elementSelector, descriptorSelector) Creates an Object for the elements the Query <!-- --> . Properties are added via Object.defineProperty <!-- --> . // As a regular object const obj = from(`\"`, 1], [\"y\", 2]]).toObject(undefined, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function // with a custom prototype const baseObject = { toString() { return `${this.x}:${this.y}` } }; const obj = from(`\"`, 1], [\"y\", 2]]).toObject(baseObject, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // function obj.toString(); // 1:2 // with a null prototype const obj = from(`\"`, 1], [\"y\", 2]]).toObject(null, a => a[0], a => a[1]); obj.x; // 1 obj.y; // 2 typeof obj.toString; // undefined Declaration toObject<V>(prototype: object | null | undefined, keySelector: (element: T) => PropertyKey, elementSelector: (element: T) => V, descriptorSelector?: (key: PropertyKey, element: V) => PropertyDescriptor): object; Type Parameters V Parameters prototype object | null | undefined The prototype for the object. If prototype is null <!-- --> , an object with a null prototype is created. If prototype is undefined <!-- --> , the default Object.prototype is used. keySelector (element: T) => PropertyKey A callback used to select a key for each element. elementSelector (element: T) => V A callback that selects a value for each element. descriptorSelector (key: PropertyKey , element: V) => PropertyDescriptor A callback that defines the PropertyDescriptor for each property. Scalar Returns object toSet() Creates a Set for the elements of the Query <!-- --> . Scalar Declaration toSet(): Set<T>; Returns Set <T> toSet(elementSelector) Creates a Set for the elements of the Query <!-- --> . Declaration toSet<V>(elementSelector: (element: T) => V): Set<V>; Type Parameters V Parameters elementSelector (element: T) => V A callback that selects a value for each element. Scalar Returns Set <V> union(right, equaler) Creates a subquery for the set union of this Query and another Iterable <!-- --> . Declaration union<R extends Iterable<T>>(right: R, equaler?: Equaler<T>): MergeQueryFlow<this, R, T>; Type Parameters R Parameters right R A Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns MergeQueryFlow <this, R, T> union(right, equaler) Creates a subquery for the set union of this Query and another Iterable <!-- --> . Declaration union(right: Iterable<T>, equaler?: Equaler<T>): Query<T>; Parameters right Iterable <T> A Iterable object. equaler Equaler <T> An Equaler object used to compare equality. Subquery Returns Query <T> unionBy(right, keySelector, keyEqualer) Creates a subquery for the set union of this Query and another Iterable <!-- --> , where set identity is determined by the selected key. Declaration unionBy<K, R extends Iterable<T>>(right: R, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): MergeQueryFlow<this, R, T>; Type Parameters K R Parameters right R A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns MergeQueryFlow <this, R, T> unionBy(right, keySelector, keyEqualer) Creates a subquery for the set union of this Query and another Iterable <!-- --> , where set identity is determined by the selected key. Declaration unionBy<K>(right: Iterable<T>, keySelector: (element: T) => K, keyEqualer?: Equaler<K>): Query<T>; Type Parameters K Parameters right Iterable <T> A Iterable object. keySelector (element: T) => K A callback used to select the key for each element. keyEqualer Equaler <K> An Equaler object used to compare key equality. Subquery Returns Query <T> unzip() Unzips a sequence of tuples into a tuple of sequences. Declaration unzip(): T extends [any, ...any[]] ? { [I in keyof T]: T[I][]; } : unknown[]; Returns T extends [any, ...any[]] ? { [I in keyof T]: T[I][]; } : unknown[] unzip(partSelector) Unzips a sequence of tuples into a tuple of sequences. Declaration unzip<U extends [any, ...any[]]>(partSelector: (value: T) => U): { [I in keyof U]: U[I][]; }; Type Parameters U Parameters partSelector (value: T) => U A callback that converts a result into a tuple. Scalar Returns { [I in keyof U]: U[I][]; } where(predicate) Creates a subquery whose elements match the supplied predicate. NOTE: This is an alias for filter <!-- --> . Declaration where<U extends T>(predicate: (element: T, offset: number) => element is U): UnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U A callback used to match each element. Returns UnorderedQueryFlow <this, U> where(predicate) Creates a subquery whose elements match the supplied predicate. NOTE: This is an alias for filter <!-- --> . Declaration where(predicate: (element: T, offset: number) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T, offset: number) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> whereBy(keySelector, predicate) Creates a subquery where the selected key for each element matches the supplied predicate. NOTE: This is an alias for filterBy <!-- --> . Declaration whereBy<K>(keySelector: (element: T) => K, predicate: (key: K, offset: number) => boolean): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => boolean A callback used to match each key. Returns UnorderedQueryFlow <this, T> whereDefined() Creates a subquery whose elements are neither null nor undefined <!-- --> . NOTE: This is an alias for filterDefined <!-- --> . Subquery Declaration whereDefined(): UnorderedQueryFlow<this, NonNullable<T>>; Returns UnorderedQueryFlow <this, NonNullable <T>> whereDefinedBy(keySelector) Creates a subquery where the selected key for each element is neither null nor undefined <!-- --> . NOTE: This is an alias for filterDefinedBy <!-- --> . Declaration whereDefinedBy<K>(keySelector: (element: T) => K): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. Returns UnorderedQueryFlow <this, T> whereNot(predicate) Creates a subquery whose elements do not match the supplied predicate. NOTE: This is an alias for filterNot <!-- --> . Declaration whereNot<U extends T>(predicate: (element: T, offset: number) => element is U): UnorderedQueryFlow<this, U>; Type Parameters U Parameters predicate (element: T, offset: number) => element is U A callback used to match each element. Returns UnorderedQueryFlow <this, U> whereNot(predicate) Creates a subquery whose elements do not match the supplied predicate. NOTE: This is an alias for filterNot <!-- --> . Declaration whereNot(predicate: (element: T, offset: number) => boolean): UnorderedQueryFlow<this, T>; Parameters predicate (element: T, offset: number) => boolean A callback used to match each element. Returns UnorderedQueryFlow <this, T> whereNotBy(keySelector, predicate) Creates a subquery where the selected key for each element does not match the supplied predicate. NOTE: This is an alias for filterNotBy <!-- --> . Declaration whereNotBy<K>(keySelector: (element: T) => K, predicate: (key: K, offset: number) => boolean): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. predicate (key: K, offset: number) => boolean A callback used to match each key. Returns UnorderedQueryFlow <this, T> whereNotDefinedBy(keySelector) Creates a subquery where the selected key for each element is either null or undefined <!-- --> . NOTE: This is an alias for filterNotDefinedBy <!-- --> . Declaration whereNotDefinedBy<K>(keySelector: (element: T) => K): UnorderedQueryFlow<this, T>; Type Parameters K Parameters keySelector (element: T) => K A callback used to select the key for each element. Returns UnorderedQueryFlow <this, T> zip(right) Creates a subquery that combines this Query with another Iterable by combining elements in tuples. Declaration zip<U>(right: Iterable<U>): Query<[T, U]>; Type Parameters U Parameters right Iterable <U> A Iterable object. Join Returns Query <[T, U]> zip(right, selector) Creates a subquery that combines this Query with another Iterable by combining elements using the supplied callback. Declaration zip<U, R>(right: Iterable<U>, selector: (left: T, right: U) => R): Query<R>; Type Parameters U R Parameters right Iterable <U> A Iterable object. selector (left: T, right: U) => R A callback used to combine two elements. Join Returns Query <R>"
  },
  "api/lazy.html": {
    "href": "api/lazy.html",
    "title": "@esfx/lazy Package | @esfx API Reference",
    "keywords": "@esfx/lazy Package Provides a class to simplify lazy-initialization logic. Installation npm i @esfx/lazy Usage TypeScript JavaScript (CommonJS) import { Lazy } from \"@esfx/lazy\"; // lazy initialize an object const lazy1 = new Lazy(() => new SomeObject()); lazy1.hasValue; // false lazy1.value; // SomeObject {} lazy1.hasValue; // true // lazy initialize with arguments const lazy2 = Lazy.from((a, b) => a + b, 1, 2); lazy2.hasValue; // false lazy2.value; // 3 lazy2.hasValue; // true // initialized \"lazy\" const lazy3 = Lazy.for(\"test\"); lazy3.hasValue; // true lazy3.value; // \"test\" const { Lazy } = require(\"@esfx/lazy\"); // lazy initialize an object const lazy1 = new Lazy(() => new SomeObject()); lazy1.hasValue; // false lazy1.value; // SomeObject {} lazy1.hasValue; // true // lazy initialize with arguments const lazy2 = Lazy.from((a, b) => a + b, 1, 2); lazy2.hasValue; // false lazy2.value; // 3 lazy2.hasValue; // true // initialized \"lazy\" const lazy3 = Lazy.for(\"test\"); lazy3.hasValue; // true lazy3.value; // \"test\" Classes Lazy"
  },
  "api/lazy/lazy.html": {
    "href": "api/lazy/lazy.html",
    "title": "Lazy Class | @esfx API Reference",
    "keywords": "Lazy Class Package : @esfx/lazy Declaration export declare class Lazy<T> Constructors constructor(factory) Constructs a new instance of the Lazy class Declaration constructor(factory: () => T); Parameters factory () => T Properties hasValue Declaration get hasValue(): boolean; Property Value boolean value Declaration get value(): T; Property Value T Methods for(value) Declaration static for<T>(value: T): Lazy<T>; Type Parameters T Parameters value T Returns Lazy <T> from(factory, args) Declaration static from<T, A extends any[]>(factory: (...args: A) => T, ...args: A): Lazy<T>; Type Parameters T A Parameters factory (...args: A) => T args A Returns Lazy <T>"
  },
  "api/metadata.html": {
    "href": "api/metadata.html",
    "title": "@esfx/metadata Package | @esfx API Reference",
    "keywords": "@esfx/metadata Package Provides an API for defining metadata about an object. Installation npm i @esfx/metadata Usage TypeScript JavaScript (CommonJS) import { Metadata, getObjectMetadata, getPropertyMetadata, getParameterMetadata } from \"@esfx/metadata\"; const Service = name => Metadata(\"Service\", name); const ReturnType = type => Metadata(\"ReturnType\", type); const Type = type => Metadata(\"Type\", type); @Service(\"MyService\") class MyClass { @ReturnType(\"string\") method(@Type(\"number\") x: number) { return \"hi\"; } } const c = new MyClass(); getObjectMetadata(MyClass, \"Service\"); // \"MyService\" getPropertyMetadata(c, \"method\", \"ReturnType\"); // \"string\" getParameterMetadata(c, \"method\", 0, \"Type\"); // \"number\" const { defineClassMetadata, defineMemberMetadata, defineParameterMetadata, getObjectMetadata, getPropertyMetadata, getParameterMetadata } = require(\"@esfx/metadata\"); class MyClass { method(x) { return \"hi\"; } } defineClassMetadata(MyClass, \"Service\", \"MyService\"); defineMemberMetadata(MyClass.prototype, \"method\", \"ReturnType\", \"string\"); defineParameterMetadata(MyClass.prototype, \"method\", 0, \"Type\", \"number\"); const c = new MyClass(); getObjectMetadata(MyClass, \"Service\"); // \"MyService\" getPropertyMetadata(c, \"method\", \"ReturnType\"); // \"string\" getParameterMetadata(c, \"method\", 0, \"Type\"); // \"number\" Functions defineObjectMetadata(target, metadataKey, metadataValue) Define metadata on an object. Declaration export declare function defineObjectMetadata(target: object, metadataKey: MetadataKey, metadataValue: unknown): void; Parameters target object The object. metadataKey MetadataKey The metadata key. metadataValue unknown The metadata value. Returns void defineParameterMetadata(target, propertyKey, parameterIndex, metadataKey, metadataValue) Define metadata on a parameter of a method of an object. Declaration export declare function defineParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey, metadataValue: unknown): void; Parameters target object The target object. propertyKey PropertyKey The name of the method. parameterIndex number The ordinal index of the parameter. metadataKey MetadataKey The metadata key. metadataValue unknown The metadata value. Returns void definePropertyMetadata(target, propertyKey, metadataKey, metadataValue) Define metadata for a property of an object. The property does not have to exist. Declaration export declare function definePropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey, metadataValue: unknown): void; Parameters target object The target object. propertyKey PropertyKey The name of the property. metadataKey MetadataKey The metadata key. metadataValue unknown The metadata value. Returns void deleteObjectMetadata(target, metadataKey) Deletes an own metadata key from an object. Declaration export declare function deleteObjectMetadata(target: object, metadataKey: MetadataKey): boolean; Parameters target object The object. metadataKey MetadataKey The metadata key. Returns boolean deleteParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Deletes an own metadata key from a parameter of a method of an object. Declaration export declare function deleteParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): boolean; Parameters target object The target object. propertyKey PropertyKey The name of the method. parameterIndex number The ordinal index of the parameter. metadataKey MetadataKey The metadata key. Returns boolean deletePropertyMetadata(target, propertyKey, metadataKey) Deletes an own metadata key from a property of an object. Declaration export declare function deletePropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): boolean; Parameters target object The target object. propertyKey PropertyKey The name of the property. metadataKey MetadataKey The metadata key. Returns boolean getMetadataParameterLength(target, propertyKey) Gets the maximum known length of a method of an object or its prototypes from its parameters that have metadata metadata. Declaration export declare function getMetadataParameterLength(target: object, propertyKey: PropertyKey): number; Parameters target object The target object. propertyKey PropertyKey The name of the method. Returns number getMetadataProperties(target) Gets the property names for an object or its prototypes for which there is metadata defined. Declaration export declare function getMetadataProperties(target: object): (string | symbol)[]; Parameters target object An object. Returns (string | symbol)[] getObjectMetadata(target, metadataKey) Gets the metadata value for a metadata key on an object or its prototypes. Declaration export declare function getObjectMetadata(target: object, metadataKey: MetadataKey): unknown; Parameters target object The object. metadataKey MetadataKey The metadata key. Returns unknown getObjectMetadataKeys(target) Gets the metadata keys defined on an object or its prototypes. Declaration export declare function getObjectMetadataKeys(target: object): MetadataKey[]; Parameters target object The object. Returns MetadataKey [] getOwnMetadataParameterLength(target, propertyKey) Gets the maximum known length of a method of an object from its parameters that have metadata metadata. Declaration export declare function getOwnMetadataParameterLength(target: object, propertyKey: PropertyKey): number; Parameters target object The target object. propertyKey PropertyKey The name of the method. Returns number getOwnMetadataProperties(target) Gets the own property names for an object for which there is metadata defined. Declaration export declare function getOwnMetadataProperties(target: object): (string | symbol)[]; Parameters target object An object. Returns (string | symbol)[] getOwnObjectMetadata(target, metadataKey) Gets the metadata value for an own metadata key on an object. Declaration export declare function getOwnObjectMetadata(target: object, metadataKey: MetadataKey): unknown; Parameters target object The object. metadataKey MetadataKey The metadata key. Returns unknown getOwnObjectMetadataKeys(target) Gets the own metadata keys defined on an object. Declaration export declare function getOwnObjectMetadataKeys(target: object): MetadataKey[]; Parameters target object The object. Returns MetadataKey [] getOwnParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Gets the metadata value for an own metadata key on a parameter of a method of an object. Declaration export declare function getOwnParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): unknown; Parameters target object The target object. propertyKey PropertyKey The name of the method. parameterIndex number The ordinal index of the parameter. metadataKey MetadataKey The metadata key. Returns unknown getOwnParameterMetadataKeys(target, propertyKey, parameterIndex) Gets the own metadata keys defined on a parameter of a method of an object. Declaration export declare function getOwnParameterMetadataKeys(target: object, propertyKey: PropertyKey, parameterIndex: number): MetadataKey[]; Parameters target object The target object. propertyKey PropertyKey The name of the method. parameterIndex number The ordinal index of the parameter. Returns MetadataKey [] getOwnPropertyMetadata(target, propertyKey, metadataKey) Gets the metadata value for an own metadata key on a property of an object. Declaration export declare function getOwnPropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): unknown; Parameters target object The target object. propertyKey PropertyKey The name of the property. metadataKey MetadataKey The metadata key. Returns unknown getOwnPropertyMetadataKeys(target, propertyKey) Gets the own metadata keys defined on a property of an object. Declaration export declare function getOwnPropertyMetadataKeys(target: object, propertyKey: PropertyKey): MetadataKey[]; Parameters target object The target object. propertyKey PropertyKey The name of the property. Returns MetadataKey [] getParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Gets the metadata value for a metadata key on a parameter of a method of an object or its prototypes. Declaration export declare function getParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): unknown; Parameters target object The target object. propertyKey PropertyKey The name of the method. parameterIndex number The ordinal index of the parameter. metadataKey MetadataKey The metadata key. Returns unknown getParameterMetadataKeys(target, propertyKey, parameterIndex) Gets the metadata keys defined on a parameter of a method of an object or its prototypes. Declaration export declare function getParameterMetadataKeys(target: object, propertyKey: PropertyKey, parameterIndex: number): MetadataKey[]; Parameters target object The target object. propertyKey PropertyKey The name of the method. parameterIndex number The ordinal index of the parameter. Returns MetadataKey [] getPropertyMetadata(target, propertyKey, metadataKey) Gets the metadata value for a metadata key on a property of an object or its prototypes. Declaration export declare function getPropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): unknown; Parameters target object The target object. propertyKey PropertyKey The name of the property. metadataKey MetadataKey The metadata key. Returns unknown getPropertyMetadataKeys(target, propertyKey) Gets the metadata keys defined on a property of an object or its prototypes. Declaration export declare function getPropertyMetadataKeys(target: object, propertyKey: PropertyKey): MetadataKey[]; Parameters target object The target object. propertyKey PropertyKey The name of the property. Returns MetadataKey [] hasObjectMetadata(target, metadataKey) Tests whether an object or its prototypes have metadata for the provided key. Declaration export declare function hasObjectMetadata(target: object, metadataKey: MetadataKey): boolean; Parameters target object The object. metadataKey MetadataKey The metadata key. Returns boolean hasOwnObjectMetadata(target, metadataKey) Tests whether an object has own metadata for the provided key. Declaration export declare function hasOwnObjectMetadata(target: object, metadataKey: MetadataKey): boolean; Parameters target object The object. metadataKey MetadataKey The metadata key. Returns boolean hasOwnParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Tests whether a parameter of a method of an object has own metadata for the provided key. Declaration export declare function hasOwnParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): boolean; Parameters target object The target object. propertyKey PropertyKey The name of the method. parameterIndex number The ordinal index of the parameter. metadataKey MetadataKey The metadata key. Returns boolean hasOwnPropertyMetadata(target, propertyKey, metadataKey) Tests whether a property of an object has own metadata for the provided key. Declaration export declare function hasOwnPropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): boolean; Parameters target object The target object. propertyKey PropertyKey The name of the property. metadataKey MetadataKey The metadata key. Returns boolean hasParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Tests whether a parameter of a method of an object or its prototypes have metadata for the provided key. Declaration export declare function hasParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): boolean; Parameters target object The target object. propertyKey PropertyKey The name of the method. parameterIndex number The ordinal index of the parameter. metadataKey MetadataKey The metadata key. Returns boolean hasPropertyMetadata(target, propertyKey, metadataKey) Tests whether a property of an object or its prototypes have metadata for the provided key. Declaration export declare function hasPropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): boolean; Parameters target object The target object. propertyKey PropertyKey The name of the property. metadataKey MetadataKey The metadata key. Returns boolean Variables metadata Attaches metadata to a class, member, or parameter. Declaration metadata: ((metadataKey: MetadataKey, metadataValue?: unknown) => { (target: Function): void; (target: object, key: PropertyKey, descriptor?: PropertyDescriptor | undefined): void; (target: object, key: PropertyKey, parameterIndex: number): void; }) & { defineObjectMetadata: typeof defineObjectMetadata; deleteObjectMetadata: typeof deleteObjectMetadata; hasOwnObjectMetadata: typeof hasOwnObjectMetadata; hasObjectMetadata: typeof hasObjectMetadata; getOwnObjectMetadata: typeof getOwnObjectMetadata; getObjectMetadata: typeof getObjectMetadata; getOwnObjectMetadataKeys: typeof getOwnObjectMetadataKeys; getObjectMetadataKeys: typeof getObjectMetadataKeys; definePropertyMetadata: typeof definePropertyMetadata; deletePropertyMetadata: typeof deletePropertyMetadata; hasOwnPropertyMetadata: typeof hasOwnPropertyMetadata; hasPropertyMetadata: typeof hasPropertyMetadata; getOwnPropertyMetadata: typeof getOwnPropertyMetadata; getPropertyMetadata: typeof getPropertyMetadata; getOwnPropertyMetadataKeys: typeof getOwnPropertyMetadataKeys; getPropertyMetadataKeys: typeof getPropertyMetadataKeys; getOwnMetadataProperties: typeof getOwnMetadataProperties; getMetadataProperties: typeof getMetadataProperties; defineParameterMetadata: typeof defineParameterMetadata; deleteParameterMetadata: typeof deleteParameterMetadata; hasOwnParameterMetadata: typeof hasOwnParameterMetadata; hasParameterMetadata: typeof hasParameterMetadata; getOwnParameterMetadata: typeof getOwnParameterMetadata; getParameterMetadata: typeof getParameterMetadata; getOwnParameterMetadataKeys: typeof getOwnParameterMetadataKeys; getParameterMetadataKeys: typeof getParameterMetadataKeys; getOwnMetadataParameterLength: typeof getOwnMetadataParameterLength; getMetadataParameterLength: typeof getMetadataParameterLength; } Type Aliases MetadataKey Declaration export declare type MetadataKey = string | symbol | number | boolean | bigint | object;"
  },
  "api/metadata-shim.html": {
    "href": "api/metadata-shim.html",
    "title": "@esfx/metadata-shim Package | @esfx API Reference",
    "keywords": "@esfx/metadata-shim Package Provides a global shim that adds minimal @esfx/metadata functionality to the Reflect global object. This provides limited compatibility with TypeScript's --emitDecoratorMetadata flag. Installation npm i @esfx/metadata-shim Usage TypeScript import \"@esfx/metadata-shim\"; import { getPropertyMetadata } from \"@esfx/metadata\"; // TypeScript compiled with --emitDecoratorMetadata class MyClass { @someDecorator method(x: number): string { return \"\"; } } const c = new MyClass(); getPropertyMetadata(c, \"method\", \"design:returntype\"); // String getPropertyMetadata(c, \"method\", \"design:paramtypes\"); // [Number]"
  },
  "api/ref.html": {
    "href": "api/ref.html",
    "title": "@esfx/ref Package | @esfx API Reference",
    "keywords": "@esfx/ref Package Provides a low-level API for defining forward references. Note This implementation is an approximation of the Reference behavior from https://github.com/rbuckton/proposal-refs . Installation npm i @esfx/ref Usage Note Examples adapted from https://github.com/rbuckton/proposal-refs#examples where applicable. Take a reference to a variable TypeScript JavaScript (CommonJS) import { ref } from \"@esfx/ref\"; let x = 1; const r = ref(() => x, _ => x = _); print(r.value); // 1 r.value = 2; print(x); // 2 const { ref } = require(\"@esfx/ref\"); let x = 1; const r = ref(() => x, _ => x = _); print(r.value); // 1 r.value = 2; print(x); // 2 Take a reference to a property TypeScript JavaScript (CommonJS) import { ref } from \"@esfx/ref\"; let o = { x: 1 }; const r = ref.at(o, \"x\"); print(r.value); // 1 r.value = 2; print(o); // { x: 2 } const { ref } = require(\"@esfx/ref\"); let o = { x: 1 }; const r = ref.at(o, \"x\"); print(r.value); // 1 r.value = 2; print(o); // { x: 2 } Take a reference to an element TypeScript JavaScript (CommonJS) import { ref } from \"@esfx/ref\"; let ar = [1]; const r = ref.at(ar, 0); print(r.value); // 1 r.value = 2; print(ar); // [2] const { ref } = require(\"@esfx/ref\"); let ar = [1]; const r = ref.at(ar, 0); print(r.value); // 1 r.value = 2; print(ar); // [2] Reference passing TypeScript JavaScript (CommonJS) import { ref, Reference } from \"@esfx/ref\"; function update(ref_r: Reference<number>) { ref_r.value = 2; } let x = 1; update(ref(() => x, _ => x = _)); print(x); // 2 const { ref } = require(\"@esfx/ref\"); function update(ref_r) { ref_r.value = 2; } let x = 1; update(ref(() => x, _ => x = _)); print(x); // 2 Referencing a local declaration creates a closure TypeScript JavaScript (CommonJS) import { ref } from \"@esfx/ref\"; function f() { let x = 1; return [ref(() => x, _ => x = _), () => print(x)] as const; } const [r, p] = f(); p(); // 1 r.value = 2; p(); // 2 const { ref } = require(\"@esfx/ref\"); function f() { let x = 1; return [ref(() => x, _ => x = _), () => print(x)]; } const [r, p] = f(); p(); // 1 r.value = 2; p(); // 2 More complex reference passing TypeScript JavaScript (CommonJS) import { ref, Reference } from \"@esfx/ref\"; function max(ref_first: Reference<number>, ref_second: Reference<number>, ref_third: Reference<number>) { const ref_max = ref_first.value > ref_second.value ? ref_first : ref_second; return ref_max.value > ref_third.value ? ref_max : ref_third; } let x = 1, y = 2, z = 3; const ref_x = ref(() => x, _ => x = _); const ref_y = ref(() => y, _ => y = _); const ref_z = ref(() => z, _ => z = _); const ref_w = max(ref_x, ref_y, ref_z); ref_w.value = 4; print(x); // 1 print(y); // 2 print(z); // 4 const { ref } = require(\"@esfx/ref\"); function max(ref_first, ref_second, ref_third) { const ref_max = ref_first.value > ref_second.value ? ref_first : ref_second; return ref_max.value > ref_third.value ? ref_max : ref_third; } let x = 1, y = 2, z = 3; const ref_x = ref(() => x, _ => x = _); const ref_y = ref(() => y, _ => y = _); const ref_z = ref(() => z, _ => z = _); const ref_w = max(ref_x, ref_y, ref_z); ref_w.value = 4; print(x); // 1 print(y); // 2 print(z); // 4 Forward reference to a var TypeScript JavaScript (CommonJS) import { ref } from \"@esfx/ref\"; const ref_a = ref(() => a, _ => a = _); ref_a.value = 1; // ok, no error as `a` is a var. var a: number; const { ref } = require(\"@esfx/ref\"); const ref_a = ref(() => a, _ => a = _); ref_a.value = 1; // ok, no error as `a` is a var. var a; Forward reference to a block-scoped variable TypeScript JavaScript (CommonJS) import { ref } from \"@esfx/ref\"; let a: number; const ref_a = ref(() => a, _ => a = _); ref_a.value = 1; // ok, no error as `a` has been declared. const ref_b = ref(() => b, _ => b = _); ref_b.value = 1; // error as `b` has not yet been declared. let b: number; const { ref } = require(\"@esfx/ref\"); let a; const ref_a = ref(() => a, _ => a = _); ref_a.value = 1; // ok, no error as `a` has been declared. const ref_b = ref(() => b, _ => b = _); ref_b.value = 1; // error as `b` has not yet been declared. let b; Forward reference to a member of a block-scoped variable TypeScript JavaScript (CommonJS) import { ref } from \"@esfx/ref\"; const ref_x = ref.at(b, \"x\"); // error, `b` has not yet been declared let b = { x: 1 }; const { ref } = require(\"@esfx/ref\"); const ref_x = ref.at(b, \"x\"); // error, `b` has not yet been declared let b = { x: 1 }; Forward references for decorators TypeScript import { ref, Reference } from \"@esfx/ref\"; import { Metadata } from \"@esfx/metadata\"; const Type = (ref_type: Reference<Function>) => Metadata(\"design:type\", ref_type); class Node { @Type(ref(() => Container)) get parent() { /*...*/ } @Type(ref(() => Node)) get nextSibling() { /*...*/ } } class Container extends Node { @Type(ref(() => Node)) get firstChild() { /*...*/ } } Side effects TypeScript JavaScript (CommonJS) import { ref } from \"@esfx/ref\"; let count = 0; let e = [0, 1, 2]; const ref_e = ref.at(e, count++); // `count++` is evaluated when Reference is taken. print(ref_e.value); // 0 print(ref_e.value); // 0 print(count); // 1 const { ref } = require(\"@esfx/ref\"); let count = 0; let e = [0, 1, 2]; const ref_e = ref.at(e, count++); // `count++` is evaluated when Reference is taken. print(ref_e.value); // 0 print(ref_e.value); // 0 print(count); // 1 Interfaces Reference<T> A reference to a lexical value. Functions ref(get, set) Create a reference to a value in the current lexical scope. Declaration export declare function ref<T>(get: () => T, set?: (value: T) => void): Reference<T>; Type Parameters T Parameters get () => T Gets the value of the reference. set (value: T) => void Sets the value of the reference. Returns Reference <T> Namespaces ref"
  },
  "api/ref/reference.html": {
    "href": "api/ref/reference.html",
    "title": "Reference<T> Interface | @esfx API Reference",
    "keywords": "Reference<T> Interface Package : @esfx/ref A reference to a lexical value. Declaration export interface Reference<T> Properties [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string value Declaration value: T; Property Value T"
  },
  "api/ref/ref-namespace.html": {
    "href": "api/ref/ref-namespace.html",
    "title": "ref Namespace | @esfx API Reference",
    "keywords": "ref Namespace Package : @esfx/ref Functions _for(value) Creates a ref for an initial value. Declaration function _for<T>(value: T): Reference<T>; Type Parameters T Parameters value T Returns Reference <T> _is(value) Determines whether value is a [[ref]]. Declaration function _is(value: unknown): value is Reference<any>; Parameters value unknown Returns value is Reference <any> at(object, key, readonly) Creates a ref to a property of an object. Declaration function at<T, K extends keyof T>(object: T, key: K, readonly?: boolean): Reference<T[K]>; Type Parameters T K Parameters object T key K readonly boolean Returns Reference <T[K]> deref(value) Declaration function deref<T>(value: T | Reference<T>): T; Type Parameters T Parameters value T | Reference <T> Returns T out() Creates a ref that must be set before it can be read. Declaration function out<T>(): Reference<T>; Type Parameters T Returns Reference <T> out(get, set) Declaration function out<T>(get: () => T, set: (value: T) => void): Reference<T>; Type Parameters T Parameters get () => T set (value: T) => void Returns Reference <T> Variables prototype Declaration prototype: Reference<unknown>"
  },
  "api/reflect-metadata-compat.html": {
    "href": "api/reflect-metadata-compat.html",
    "title": "@esfx/reflect-metadata-compat Package | @esfx API Reference",
    "keywords": "@esfx/reflect-metadata-compat Package Provides a global shim that provides a drop-in replacement for reflect-metadata . Installation npm i @esfx/reflect-metadata-compat Usage TypeScript // <usage> import \"@esfx/reflect-metadata-compat\"; // TypeScript compiled with --emitDecoratorMetadata class MyClass { @someDecorator method(x: number): string { return \"\"; } } const c = new MyClass(); Reflect.getMetadata(\"design:returntype\", c, \"method\"); // String Reflect.getMetadata(\"design:paramtypes\", c, \"method\"); // [Number] // </usage> declare var someDecorator;"
  },
  "api/struct-type.html": {
    "href": "api/struct-type.html",
    "title": "@esfx/struct-type Package | @esfx API Reference",
    "keywords": "@esfx/struct-type Package Define structured types using @\"@esfx/ArrayBuffer!\" and @\"@esfx/SharedArrayBuffer!\". Installation npm i @esfx/struct-type Usage Basic Usage TypeScript JavaScript (CommonJS) import { StructType, int32 } from \"@esfx/struct-type\"; // simple types const Point = StructType([ { name: \"x\", type: int32 }, { name: \"y\", type: int32 }, ] as const); // complex types const Line = StructType([ { name: \"from\", type: Point }, { name: \"to\", type: Point }, ] as const); // inherited types const Point3D = StructType(Point, [ { name: \"z\", type: int32 } ] as const); // create instances const p1 = new Point({ x: 1, y: 2 }); // by field name const p2 = new Point([3, 4]); // by field ordinal // copy contents const buffer = new ArrayBuffer(16); const l1 = new Line([p1, p2]); l1.writeTo(buffer); // read from field names console.log(l1.from.x); // 1 console.log(l1.from.y); // 2 console.log(l1.to.x); // 3 console.log(l1.to.y); // 4 // read from field ordinals console.log(l1[0][0]); // 1 console.log(l1[0][1]); // 2 console.log(l1[1][0]); // 3 console.log(l1[1][1]); // 4 // create from a buffer const l2 = new Line(buffer); const { StructType, int32 } = require(\"@esfx/struct-type\"); // simple types const Point = StructType([ { name: \"x\", type: int32 }, { name: \"y\", type: int32 }, ]); // complex types const Line = StructType([ { name: \"from\", type: Point }, { name: \"to\", type: Point }, ]); // inherited types const Point3D = StructType(Point, [ { name: \"z\", type: int32 } ]); // create instances const p1 = new Point({ x: 1, y: 2 }); // by field name const p2 = new Point([3, 4]); // by field ordinal // copy contents const buffer = new ArrayBuffer(16); const l1 = new Line([p1, p2]); l1.writeTo(buffer); // read from field names console.log(l1.from.x); // 1 console.log(l1.from.y); // 2 console.log(l1.to.x); // 3 console.log(l1.to.y); // 4 // read from field ordinals console.log(l1[0][0]); // 1 console.log(l1[0][1]); // 2 console.log(l1[1][0]); // 3 console.log(l1[1][1]); // 4 // create from a buffer const l2 = new Line(buffer); Using with Workers TypeScript JavaScript (CommonJS) import { StructType, int32 } from \"@esfx/struct-type\"; import { Worker, isMainThread, parentPort, workerData } from \"worker_threads\"; const ThreadData = StructType([ { name: \"itemsRemaining\", type: int32 }, ] as const); function worker_thread() { // this is running in a background worker... const data = new ThreadData(workerData); // allocate struct using the SharedArrayBuffer while (data.itemsRemaining) { // do some work... data.itemsRemaining--; } parentPort.postMessage(\"done\"); } function main() { // this is running on the main thread... const data = new ThreadData(/*shared*/ true); // allocate struct using a SharedArrayBuffer data.itemsRemaining = 5; const worker = new Worker(__filename, { workerData: data.buffer }); worker.on(\"message\", message => { if (message === \"done\") { console.log(data.itemsRemaining); // 0 } }); } if (isMainThread) { main(); } else if (parentPort) { worker_thread(); } const { StructType, int32 } = require(\"@esfx/struct-type\"); const { Worker, isMainThread, parentPort, workerData } = require(\"worker_threads\"); const ThreadData = StructType([ { name: \"itemsRemaining\", type: int32 }, ]); function worker_thread() { // this is running in a background worker... const data = new ThreadData(workerData); // allocate struct using the SharedArrayBuffer while (data.itemsRemaining) { // do some work... data.itemsRemaining--; } parentPort.postMessage(\"done\"); } function main() { // this is running on the main thread... const data = new ThreadData(/*shared*/ true); // allocate struct using a SharedArrayBuffer data.itemsRemaining = 5; const worker = new Worker(__filename, { workerData: data.buffer }); worker.on(\"message\", message => { if (message === \"done\") { console.log(data.itemsRemaining); // 0 } }); } if (isMainThread) { main(); } else if (parentPort) { worker_thread(); } Interfaces ArrayType<TType> Represents the constructor for a TypedArray ArrayTypeConstructor FixedLengthArrayType<TType, TFixedLength> Represents the constructor for a fixed-length TypedArray PrimitiveType<K, T> Represents a primitive type. StructDefinition<TFields, TOrder> StructFieldDefinition StructType<TDef> Represents the constructor for a struct. StructTypeConstructor Represents the constructor for a struct type. TypedArray<TType, TFixedLength> Variables ArrayType Creates a new TypedArray type for a provided type. Declaration ArrayType: ArrayTypeConstructor bigint64 A primitive type representing an 8-byte signed integer. Aliases: i64 <!-- --> , long Declaration bigint64: PrimitiveType<\"bigint64\", bigint> biguint64 A primitive type representing an 8-byte unsigned integer. Aliases: u64 <!-- --> , ulong Declaration biguint64: PrimitiveType<\"biguint64\", bigint> bool32 A primitive type representing a 4-byte signed boolean value. Declaration bool32: PrimitiveType<\"bool32\", boolean> bool8 A primitive type representing a 1-byte unsigned boolean value. Declaration bool8: PrimitiveType<\"bool8\", boolean> float32 A primitive type representing a 4-byte floating point number. Aliases: f32 <!-- --> , float Declaration float32: PrimitiveType<\"float32\", number> float64 A primitive type representing an 8-byte floating point number. Aliases: f64 <!-- --> , double Declaration float64: PrimitiveType<\"float64\", number> int16 A primitive type representing a 2-byte signed integer. Aliases: i16 <!-- --> , short Declaration int16: PrimitiveType<\"int16\", number> int32 A primitive type representing a 4-byte signed integer. Aliases: i32 <!-- --> , int Declaration int32: PrimitiveType<\"int32\", number> int8 A primitive type representing a 1-byte signed integer. Aliases: i8 <!-- --> , sbyte Declaration int8: PrimitiveType<\"int8\", number> StructType Creates a new Struct type from a provided field definition. Declaration StructType: StructTypeConstructor uint16 A primitive type representing a 2-byte unsigned integer. Aliases: u16 <!-- --> , ushort Declaration uint16: PrimitiveType<\"uint16\", number> uint32 A primitive type representing a 4-byte unsigned integer. Aliases: u32 <!-- --> , uint Declaration uint32: PrimitiveType<\"uint32\", number> uint8 A primitive type representing a 1-byte unsigned integer. Aliases: u8 <!-- --> , byte Declaration uint8: PrimitiveType<\"uint8\", number> Type Aliases InitType Gets a runtime type from a type definition that can be used to initialize a value of that type. Declaration export declare type InitType<TType extends Type> = NonNullable<TType[typeof RelatedTypes]>[\"InitType\"]; Type Parameters TType PrimitiveTypes Declaration export declare type PrimitiveTypes = typeof bool8 | typeof bool32 | typeof int8 | typeof int16 | typeof int32 | typeof uint8 | typeof uint16 | typeof uint32 | typeof bigint64 | typeof biguint64 | typeof float32 | typeof float64; RuntimeType Gets the runtime type from a type definition. Declaration export declare type RuntimeType<TType extends Type> = NonNullable<TType[typeof RelatedTypes]>[\"RuntimeType\"]; Type Parameters TType Struct Represents an instance of a struct type. Declaration export declare type Struct<TDef extends StructDefinition = StructDefinition> = { readonly buffer: ArrayBufferLike; readonly byteOffset: number; readonly byteLength: number; get<K extends StructFieldLayoutKeys<TDef>>(key: K): StructFieldLayout<TDef>[K]; set<K extends StructFieldLayoutKeys<TDef>>(key: K, value: StructFieldLayout<TDef>[K]): void; getIndex<I extends StructElementLayoutIndices<TDef>>(index: I): StructElementLayout<TDef>[I]; setIndex<I extends StructElementLayoutIndices<TDef>>(index: I, value: StructElementLayout<TDef>[I]): boolean; writeTo(buffer: ArrayBufferLike, byteOffset?: number): void; } & StructFieldLayout<TDef> & StructElementLayout<TDef>; Type Parameters TDef StructArrayInit Describes the ordered elements that can be used to initialize a struct. Declaration export declare type StructArrayInit<TDef extends StructDefinition> = TDef[\"order\"] extends \"unspecified\" ? never : { [I in keyof TDef[\"order\"]]: InitType<TDef[\"fields\"][TDef[\"order\"][I]]>; }; Type Parameters TDef StructDefinitionOf Declaration export declare type StructDefinitionOf<TDef extends readonly StructFieldDefinition[]> = StructDefinition<{ [I in Extract<numstr<keyof TDef>, number> as TDef[I][\"name\"]]: TDef[I][\"type\"]; }, { [I in keyof TDef]: TDef[I] extends StructFieldDefinition ? TDef[I][\"name\"] : TDef[I]; }>; Type Parameters TDef StructElementLayout Declaration export declare type StructElementLayout<TDef extends StructDefinition> = { /** * Gets or sets a named field of the struct. */ -readonly [I in StructElementLayoutIndices<TDef>]: RuntimeType<TDef[\"fields\"][TDef[\"order\"][I]]>; }; Type Parameters TDef StructElementLayoutIndices Declaration export declare type StructElementLayoutIndices<TDef extends StructDefinition> = TDef[\"order\"] extends \"unspecified\" ? never : numstr<keyof TDef[\"order\"]>; Type Parameters TDef StructFieldLayout Declaration export declare type StructFieldLayout<TDef extends StructDefinition> = { /** * Gets or sets a named field of the struct. */ -readonly [K in StructFieldLayoutKeys<TDef>]: RuntimeType<TDef[\"fields\"][K]>; }; Type Parameters TDef StructFieldLayoutKeys Declaration export declare type StructFieldLayoutKeys<TDef extends StructDefinition> = keyof TDef[\"fields\"]; Type Parameters TDef StructInheritedDefinition Declaration export declare type StructInheritedDefinition<TBaseDef extends StructDefinition, TFields extends { [key: string | symbol]: Type; }, TOrder extends readonly (keyof TFields)[] | \"unspecified\"> = StructDefinition<TBaseDef[\"fields\"] & TFields, TBaseDef[\"order\"] extends \"unspecified\" ? TBaseDef[\"order\"] : TOrder extends \"unspecified\" ? TBaseDef[\"order\"] & \"unspecified\" : TOrder extends readonly (keyof TFields)[] ? [...TBaseDef[\"order\"], ...TOrder] : \"unspecified\">; Type Parameters TBaseDef TFields TOrder StructObjectInit Describes the properties that can be used to initialize a struct. Declaration export declare type StructObjectInit<TDef extends StructDefinition> = { [P in keyof TDef[\"fields\"]]: InitType<TDef[\"fields\"][P]>; }; Type Parameters TDef Type Declaration export declare type Type = PrimitiveTypes | StructType<any> | ArrayType<any> | FixedLengthArrayType<any>;"
  },
  "api/struct-type/arraytypeconstructor.html": {
    "href": "api/struct-type/arraytypeconstructor.html",
    "title": "ArrayTypeConstructor Interface | @esfx API Reference",
    "keywords": "ArrayTypeConstructor Interface Package : @esfx/struct-type Declaration export interface ArrayTypeConstructor Properties prototype Declaration prototype: Omit<ArrayType<any>, never>; Property Value Omit < ArrayType <any>, never>"
  },
  "api/struct-type/arraytype-interface.html": {
    "href": "api/struct-type/arraytype-interface.html",
    "title": "ArrayType<TType> Interface | @esfx API Reference",
    "keywords": "ArrayType<TType> Interface Package : @esfx/struct-type Represents the constructor for a TypedArray Declaration export interface ArrayType<TType extends Type> Properties [RelatedTypes] Declaration [RelatedTypes]?: { RuntimeType: TypedArray<TType, number>; InitType: TypedArray<TType, number> | ArrayLike<InitType<TType>>; }; Property Value { RuntimeType: TypedArray <TType, number>; InitType: TypedArray <TType, number> | ArrayLike < InitType <TType>>; } BYTES_PER_ELEMENT Declaration readonly BYTES_PER_ELEMENT: number; Property Value number fixedLength Declaration readonly fixedLength: number | undefined; Property Value number | undefined prototype Declaration prototype: TypedArray<TType>; Property Value TypedArray <TType> SIZE Declaration readonly SIZE: number | undefined; Property Value number | undefined Methods toFixed(fixedLength) Declaration toFixed<TFixedLength extends number>(fixedLength: TFixedLength): FixedLengthArrayType<TType, TFixedLength>; Type Parameters TFixedLength Parameters fixedLength TFixedLength Returns FixedLengthArrayType <TType, TFixedLength>"
  },
  "api/struct-type/fixedlengtharraytype.html": {
    "href": "api/struct-type/fixedlengtharraytype.html",
    "title": "FixedLengthArrayType<TType, TFixedLength> Interface | @esfx API Reference",
    "keywords": "FixedLengthArrayType<TType, TFixedLength> Interface Package : @esfx/struct-type Represents the constructor for a fixed-length TypedArray Declaration export interface FixedLengthArrayType<TType extends Type, TFixedLength extends number = number> Properties [RelatedTypes] Declaration [RelatedTypes]?: { RuntimeType: TypedArray<TType, TFixedLength>; InitType: TypedArray<TType, TFixedLength> | ArrayLike<InitType<TType>>; }; Property Value { RuntimeType: TypedArray <TType, TFixedLength>; InitType: TypedArray <TType, TFixedLength> | ArrayLike < InitType <TType>>; } BYTES_PER_ELEMENT Declaration readonly BYTES_PER_ELEMENT: number; Property Value number fixedLength Declaration readonly fixedLength: TFixedLength; Property Value TFixedLength prototype Declaration prototype: TypedArray<TType, TFixedLength>; Property Value TypedArray <TType, TFixedLength> SIZE Declaration readonly SIZE: number; Property Value number Methods toFixed(fixedLength) Declaration toFixed<TFixedLength extends number>(fixedLength: TFixedLength): FixedLengthArrayType<TType, TFixedLength>; Type Parameters TFixedLength Parameters fixedLength TFixedLength Returns FixedLengthArrayType <TType, TFixedLength>"
  },
  "api/struct-type/primitivetype.html": {
    "href": "api/struct-type/primitivetype.html",
    "title": "PrimitiveType<K, T> Interface | @esfx API Reference",
    "keywords": "PrimitiveType<K, T> Interface Package : @esfx/struct-type Represents a primitive type. Declaration export interface PrimitiveType<K extends string = string, T extends number | bigint | boolean = number | bigint | boolean> Properties [RelatedTypes] Declaration [RelatedTypes]?: { RuntimeType: T; InitType: number | bigint | boolean; }; Property Value { RuntimeType: T; InitType: number | bigint | boolean; } name The name of the primitive type. Declaration readonly name: K; Property Value K SIZE The size, in bytes, of the primitive type. Declaration readonly SIZE: number; Property Value number"
  },
  "api/struct-type/structdefinition.html": {
    "href": "api/struct-type/structdefinition.html",
    "title": "StructDefinition<TFields, TOrder> Interface | @esfx API Reference",
    "keywords": "StructDefinition<TFields, TOrder> Interface Package : @esfx/struct-type Declaration export interface StructDefinition<TFields extends { [key: string | symbol]: Type; } = any, TOrder extends readonly (keyof TFields)[] | \"unspecified\" = any> Properties fields Declaration fields: TFields; Property Value TFields order Declaration order: TOrder; Property Value TOrder"
  },
  "api/struct-type/structfielddefinition.html": {
    "href": "api/struct-type/structfielddefinition.html",
    "title": "StructFieldDefinition Interface | @esfx API Reference",
    "keywords": "StructFieldDefinition Interface Package : @esfx/struct-type Declaration export interface StructFieldDefinition Properties name Declaration readonly name: conststring | constsymbol; Property Value conststring | constsymbol type Declaration readonly type: Type; Property Value Type"
  },
  "api/struct-type/structtypeconstructor.html": {
    "href": "api/struct-type/structtypeconstructor.html",
    "title": "StructTypeConstructor Interface | @esfx API Reference",
    "keywords": "StructTypeConstructor Interface Package : @esfx/struct-type Represents the constructor for a struct type. Declaration export interface StructTypeConstructor Properties prototype Declaration prototype: StructType<StructDefinitionOf<[]>>; Property Value StructType < StructDefinitionOf <[]>>"
  },
  "api/struct-type/structtype-interface.html": {
    "href": "api/struct-type/structtype-interface.html",
    "title": "StructType<TDef> Interface | @esfx API Reference",
    "keywords": "StructType<TDef> Interface Package : @esfx/struct-type Represents the constructor for a struct. Declaration export interface StructType<TDef extends StructDefinition> Properties [RelatedTypes] Declaration [RelatedTypes]?: { RuntimeType: Struct<TDef>; InitType: Struct<TDef> | StructObjectInit<TDef> | StructArrayInit<TDef>; }; Property Value { RuntimeType: Struct <TDef>; InitType: Struct <TDef> | StructObjectInit <TDef> | StructArrayInit <TDef>; } prototype Declaration prototype: Struct<any>; Property Value Struct <any> SIZE Declaration readonly SIZE: number; Property Value number"
  },
  "api/struct-type/typedarray.html": {
    "href": "api/struct-type/typedarray.html",
    "title": "TypedArray<TType, TFixedLength> Interface | @esfx API Reference",
    "keywords": "TypedArray<TType, TFixedLength> Interface Package : @esfx/struct-type Declaration export interface TypedArray<TType extends Type, TFixedLength extends number = number> Properties buffer Declaration readonly buffer: ArrayBufferLike; Property Value ArrayBufferLike byteLength Declaration readonly byteLength: number; Property Value number byteOffset Declaration readonly byteOffset: number; Property Value number length Declaration readonly length: TFixedLength; Property Value TFixedLength Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<RuntimeType<TType>>; Returns IterableIterator < RuntimeType <TType>> at(index) Declaration at(index: number): RuntimeType<TType> | undefined; Parameters index number Returns RuntimeType <TType> | undefined copyWithin(target, start, end) Declaration copyWithin(target: number, start: number, end?: number): this; Parameters target number start number end number Returns this entries() Declaration entries(): IterableIterator<[number, RuntimeType<TType>]>; Returns IterableIterator <[number, RuntimeType <TType>]> every(predicate) Declaration every(predicate: (value: RuntimeType<TType>, index: number) => unknown): boolean; Parameters predicate (value: RuntimeType <TType>, index: number) => unknown Returns boolean fill(value, start, end) Declaration fill(value: RuntimeType<TType>, start?: number, end?: number): this; Parameters value RuntimeType <TType> start number end number Returns this filter(predicate) Declaration filter(predicate: (value: RuntimeType<TType>, index: number) => unknown): TypedArray<TType>; Parameters predicate (value: RuntimeType <TType>, index: number) => unknown Returns TypedArray <TType> find(predicate, fromIndex) Declaration find(predicate: (value: RuntimeType<TType>, index: number) => unknown, fromIndex?: number): RuntimeType<TType> | undefined; Parameters predicate (value: RuntimeType <TType>, index: number) => unknown fromIndex number Returns RuntimeType <TType> | undefined findIndex(predicate, fromIndex) Declaration findIndex(predicate: (value: RuntimeType<TType>, index: number) => unknown, fromIndex?: number): number; Parameters predicate (value: RuntimeType <TType>, index: number) => unknown fromIndex number Returns number findLast(predicate, fromIndex) Declaration findLast(predicate: (value: RuntimeType<TType>, index: number) => unknown, fromIndex?: number): RuntimeType<TType> | undefined; Parameters predicate (value: RuntimeType <TType>, index: number) => unknown fromIndex number Returns RuntimeType <TType> | undefined findLastIndex(predicate, fromIndex) Declaration findLastIndex(predicate: (value: RuntimeType<TType>, index: number) => unknown, fromIndex?: number): number; Parameters predicate (value: RuntimeType <TType>, index: number) => unknown fromIndex number Returns number forEach(callbackfn) Declaration forEach(callbackfn: (value: RuntimeType<TType>, index: number) => void): void; Parameters callbackfn (value: RuntimeType <TType>, index: number) => void Returns void keys() Declaration keys(): IterableIterator<number>; Returns IterableIterator <number> map(callbackfn) Declaration map(callbackfn: (value: RuntimeType<TType>, index: number) => RuntimeType<TType>): TypedArray<TType, TFixedLength>; Parameters callbackfn (value: RuntimeType <TType>, index: number) => RuntimeType <TType> Returns TypedArray <TType, TFixedLength> mapToArray(callbackfn) Declaration mapToArray<U>(callbackfn: (value: RuntimeType<TType>, index: number) => U): U[]; Type Parameters U Parameters callbackfn (value: RuntimeType <TType>, index: number) => U Returns U[] reduce(callbackfn) Declaration reduce(callbackfn: (previousValue: RuntimeType<TType>, value: RuntimeType<TType>, index: number) => RuntimeType<TType>): RuntimeType<TType>; Parameters callbackfn (previousValue: RuntimeType <TType>, value: RuntimeType <TType>, index: number) => RuntimeType <TType> Returns RuntimeType <TType> reduce(callbackfn, initialValue) Declaration reduce<U>(callbackfn: (previousValue: U, value: RuntimeType<TType>, index: number) => U, initialValue: U): U; Type Parameters U Parameters callbackfn (previousValue: U, value: RuntimeType <TType>, index: number) => U initialValue U Returns U reduceRight(callbackfn) Declaration reduceRight(callbackfn: (previousValue: RuntimeType<TType>, value: RuntimeType<TType>, index: number) => RuntimeType<TType>): RuntimeType<TType>; Parameters callbackfn (previousValue: RuntimeType <TType>, value: RuntimeType <TType>, index: number) => RuntimeType <TType> Returns RuntimeType <TType> reduceRight(callbackfn, initialValue) Declaration reduceRight<U>(callbackfn: (previousValue: U, value: RuntimeType<TType>, index: number) => U, initialValue: U): U; Type Parameters U Parameters callbackfn (previousValue: U, value: RuntimeType <TType>, index: number) => U initialValue U Returns U set(array, offset) Declaration set(array: ArrayLike<RuntimeType<TType>>, offset?: number): void; Parameters array ArrayLike < RuntimeType <TType>> offset number Returns void slice(start, end) Declaration slice(start?: number, end?: number): TypedArray<TType>; Parameters start number end number Returns TypedArray <TType> some(predicate) Declaration some(predicate: (value: RuntimeType<TType>, index: number) => unknown): boolean; Parameters predicate (value: RuntimeType <TType>, index: number) => unknown Returns boolean subarray(start, end) Declaration subarray(start?: number, end?: number): TypedArray<TType>; Parameters start number end number Returns TypedArray <TType> toArray() Declaration toArray(): RuntimeType<TType>[]; Returns RuntimeType <TType>[] values() Declaration values(): IterableIterator<RuntimeType<TType>>; Returns IterableIterator < RuntimeType <TType>> writeTo(buffer, byteOffset) Declaration writeTo(buffer: ArrayBufferLike, byteOffset?: number): void; Parameters buffer ArrayBufferLike byteOffset number Returns void"
  },
  "api/threading.html": {
    "href": "api/threading.html",
    "title": "@esfx/threading Package | @esfx API Reference",
    "keywords": "@esfx/threading Package Provides a number Thread synchronization primitives for use with Workers from the following packages: @esfx/threading-autoresetevent @esfx/threading-conditionvariable @esfx/threading-countdown @esfx/threading-lockable @esfx/threading-manualresetevent @esfx/threading-mutex @esfx/threading-semaphore @esfx/threading-sleep @esfx/threading-spinwait Installation npm i @esfx/threading"
  },
  "api/threading-autoresetevent.html": {
    "href": "api/threading-autoresetevent.html",
    "title": "@esfx/threading-autoresetevent Package | @esfx API Reference",
    "keywords": "@esfx/threading-autoresetevent Package Provides the AutoResetEvent class, a threading primitive for use with Workers. Installation npm i @esfx/threading-autoresetevent Usage TypeScript JavaScript (CommonJS) import { createInterface } from \"readline\"; import { AutoResetEvent } from \"@esfx/threading-autoresetevent\"; import { Worker, isMainThread, parentPort, workerData } from \"worker_threads\"; function worker_thread() { const workerReadyEvent = new AutoResetEvent(workerData[0]); const continueEvent = new AutoResetEvent(workerData[1]); // signal the main thread we are ready workerReadyEvent.set(); let count = 0; while (true) { // wait for the main thread to set 'continueEvent' continueEvent.waitOne(); parentPort.postMessage(`counter=${count++}`); } } function main() { // create two AutoResetEvents in the main thread const workerReadyEvent = new AutoResetEvent(); const continueEvent = new AutoResetEvent(); // create a Worker, passing the buffers of the two events const worker = new Worker(__filename, { workerData: [workerReadyEvent.buffer, continueEvent.buffer] }); // wait for the worker to tell us it is ready workerReadyEvent.waitOne(); console.log(\"worker is ready. Press ENTER to continue the worker...\"); worker.on(\"message\", message => { console.log(`worker says: ${message}`); }); const rl = createInterface({ input: process.stdin, output: process.stdout }); rl.on(\"line\", () => { // event is automatically reset as soon as a single waiter is signaled continueEvent.set(); }); } if (isMainThread) { main(); } else { worker_thread(); } const { createInterface } = require(\"readline\"); const { AutoResetEvent } = require(\"@esfx/threading-autoresetevent\"); const { Worker, isMainThread, parentPort, workerData } = require(\"worker_threads\"); function worker_thread() { const workerReadyEvent = new AutoResetEvent(workerData[0]); const continueEvent = new AutoResetEvent(workerData[1]); // signal the main thread we are ready workerReadyEvent.set(); let count = 0; while (true) { // wait for the main thread to set 'continueEvent' continueEvent.waitOne(); parentPort.postMessage(`counter=${count++}`); } } function main() { // create two AutoResetEvents in the main thread const workerReadyEvent = new AutoResetEvent(); const continueEvent = new AutoResetEvent(); // create a Worker, passing the buffers of the two events const worker = new Worker(__filename, { workerData: [workerReadyEvent.buffer, continueEvent.buffer] }); // wait for the worker to tell us it is ready workerReadyEvent.waitOne(); console.log(\"worker is ready. Press ENTER to continue the worker...\"); worker.on(\"message\", message => { console.log(`worker says: ${message}`); }); const rl = createInterface({ input: process.stdin, output: process.stdout }); rl.on(\"line\", () => { // event is automatically reset as soon as a single waiter is signaled continueEvent.set(); }); } if (isMainThread) { main(); } else { worker_thread(); } Classes AutoResetEvent"
  },
  "api/threading-autoresetevent/autoresetevent.html": {
    "href": "api/threading-autoresetevent/autoresetevent.html",
    "title": "AutoResetEvent Class | @esfx API Reference",
    "keywords": "AutoResetEvent Class Package : @esfx/threading-autoresetevent Declaration export declare class AutoResetEvent implements Disposable Constructors constructor(initialState) Constructs a new instance of the AutoResetEvent class Declaration constructor(initialState?: boolean); Parameters initialState boolean constructor(buffer, byteOffset) Constructs a new instance of the AutoResetEvent class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Gets the SharedArrayBuffer for this event. Declaration get buffer(): SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Gets the number of bytes occupied by this event in its buffer. Declaration get byteLength(): number; Property Value number byteOffset Gets the byte offset of this event in its buffer. Declaration get byteOffset(): number; Property Value number SIZE Declaration static readonly SIZE = 4; Methods [Disposable.dispose]() Releases all resources for this event. Declaration [Disposable.dispose](): void; Returns void close() Releases all resources for this event. Declaration close(): void; Returns void reset() Sets the state of the event to nonsignaled, causing any threads waiting on the event to block. Declaration reset(): boolean; Returns boolean true if the event was reset; otherwise, false <!-- --> . set() Sets the state of the event to signaled, allowing the next thread waiting on the event to proceed. Declaration set(): boolean; Returns boolean true if the event was set; otherwise, false <!-- --> . waitOne(ms) Blocks the current thread until this event becomes signaled. Declaration waitOne(ms?: number): boolean; Parameters ms number The number of milliseconds to wait. Returns boolean true if the event was signaled before the timeout expired; otherwise, false <!-- --> ."
  },
  "api/threading-conditionvariable.html": {
    "href": "api/threading-conditionvariable.html",
    "title": "@esfx/threading-conditionvariable Package | @esfx API Reference",
    "keywords": "@esfx/threading-conditionvariable Package Provides the ConditionVariable class, a thread synchronization primitive for use with Workers. Installation npm i @esfx/threading-conditionvariable Usage TypeScript JavaScript (CommonJS) import { Mutex } from \"@esfx/threading-mutex\"; import { ConditionVariable } from \"@esfx/threading-conditionvariable\"; import { StructType, int32 } from \"@esfx/struct-type\"; import { Worker, isMainThread, workerData } from \"worker_threads\"; const SharedData = StructType([ { name: \"ready\", type: int32 }, { name: \"processed\", type: int32 }, ] as const); function worker_thread() { const m = new Mutex(workerData[0]); const cv = new ConditionVariable(workerData[1]); const data = new SharedData(workerData[2]); m.lock(); try { // release the lock and wait until main() sends data cv.wait(m, () => data.ready === 1); // after waiting we once again own the lock console.log(\"worker thread is processing data\"); // send data back to main() data.processed = 1; console.log(\"worker thread is done\"); } finally { m.unlock(); } cv.notifyOne(); } function main() { const m = new Mutex(); const cv = new ConditionVariable(); const data = new SharedData(/*shared*/ true); // start the Worker, passing the buffers of the shared objects const worker = new Worker(__filename, { workerData: [m.buffer, cv.buffer, data.buffer], stdout: true, }); // pipe stdout for console.log in worker worker.stdout.pipe(process.stdout); // send data to the worker m.lock(); try { data.ready = 1; console.log(\"main is ready\"); } finally { m.unlock(); } // notify the waiting worker cv.notifyOne(); m.lock(); try { // release the lock and wait for the worker to finish processing cv.wait(m, () => data.processed === 1); } finally { m.unlock(); } } if (isMainThread) { main(); } else { worker_thread(); } const { Mutex } = require(\"@esfx/threading-mutex\"); const { ConditionVariable } = require(\"@esfx/threading-conditionvariable\"); const { StructType, int32 } = require(\"@esfx/struct-type\"); const { Worker, isMainThread, workerData } = require(\"worker_threads\"); const SharedData = StructType([ { name: \"ready\", type: int32 }, { name: \"processed\", type: int32 }, ]); function worker_thread() { const m = new Mutex(workerData[0]); const cv = new ConditionVariable(workerData[1]); const data = new SharedData(workerData[2]); m.lock(); try { // release the lock and wait until main() sends data cv.wait(m, () => data.ready === 1); // after waiting we once again own the lock console.log(\"worker thread is processing data\"); // send data back to main() data.processed = 1; console.log(\"worker thread is done\"); } finally { m.unlock(); } cv.notifyOne(); } function main() { const m = new Mutex(); const cv = new ConditionVariable(); const data = new SharedData(/*shared*/ true); // start the Worker, passing the buffers of the shared objects const worker = new Worker(__filename, { workerData: [m.buffer, cv.buffer, data.buffer], stdout: true, }); // pipe stdout for console.log in worker worker.stdout.pipe(process.stdout); // send data to the worker m.lock(); try { data.ready = 1; console.log(\"main is ready\"); } finally { m.unlock(); } // notify the waiting worker cv.notifyOne(); m.lock(); try { // release the lock and wait for the worker to finish processing cv.wait(m, () => data.processed === 1); } finally { m.unlock(); } } if (isMainThread) { main(); } else { worker_thread(); } Classes ConditionVariable"
  },
  "api/threading-conditionvariable/conditionvariable.html": {
    "href": "api/threading-conditionvariable/conditionvariable.html",
    "title": "ConditionVariable Class | @esfx API Reference",
    "keywords": "ConditionVariable Class Package : @esfx/threading-conditionvariable Declaration export declare class ConditionVariable implements Disposable Constructors constructor(buffer, byteOffset) Constructs a new instance of the ConditionVariable class Declaration constructor(buffer?: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Gets the SharedArrayBuffer for this object. Declaration get buffer(): SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Gets the number of bytes occupied by this object in its buffer. Declaration get byteLength(): number; Property Value number byteOffset Gets the byte offset of this object in its buffer. Declaration get byteOffset(): number; Property Value number SIZE Declaration static readonly SIZE = 4; Methods [Disposable.dispose]() Releases the resources associated for this object. Declaration [Disposable.dispose](): void; Returns void close() Releases the resources associated for this object. Declaration close(): void; Returns void notifyAll() Notifies all waiting threads. Declaration notifyAll(): number; Returns number The number of threads notified. notifyOne() Notifies one waiting thread. Declaration notifyOne(): boolean; Returns boolean true if a thread was notified; otherwise, false <!-- --> . wait(mutex, condition) Blocks the current thread until the condition variable is notified. Declaration wait(mutex: Lockable, condition?: () => boolean): boolean; Parameters mutex Lockable A lock used to synchronize access to the condition variable. condition () => boolean An optional condition to wait for. Returns boolean true if the condition variable was notified; otherwise, false <!-- --> . waitFor(mutex, ms, condition) Blocks the current thread until the condition variable is notified or after the specified timeout has elapsed. Declaration waitFor(mutex: Lockable, ms: number, condition?: () => boolean): boolean; Parameters mutex Lockable A lock used to synchronize access to the condition variable. ms number The number of milliseconds to wait. condition () => boolean An optional condition to wait for. Returns boolean true if the condition variable was notified prior to the timeout period elapsing; otherwise, false <!-- --> ."
  },
  "api/threading-countdown.html": {
    "href": "api/threading-countdown.html",
    "title": "@esfx/threading-countdown Package | @esfx API Reference",
    "keywords": "@esfx/threading-countdown Package Provides the CountdownEvent class, a thread synchronization primitive for use with Workers. Installation npm i @esfx/threading-countdown Usage TypeScript JavaScript (CommonJS) import { CountdownEvent } from \"@esfx/threading-countdown\"; import { Worker, isMainThread, workerData } from \"worker_threads\"; function worker_thread() { const countdown = new CountdownEvent(workerData); // do work in background... // signal worker is finished countdown.signal(); } function main() { const countdown = new CountdownEvent(5); // start 5 workers for (let i = 0; i < 5; i++) { new Worker(__filename, { workerData: countdown.buffer }); } // wait for the workers to finish countdown.wait(); } if (isMainThread) { main(); } else { worker_thread(); } const { CountdownEvent } = require(\"@esfx/threading-countdown\"); const { Worker, isMainThread, workerData } = require(\"worker_threads\"); function worker_thread() { const countdown = new CountdownEvent(workerData); // do work in background... // signal worker is finished countdown.signal(); } function main() { const countdown = new CountdownEvent(5); // start 5 workers for (let i = 0; i < 5; i++) { new Worker(__filename, { workerData: countdown.buffer }); } // wait for the workers to finish countdown.wait(); } if (isMainThread) { main(); } else { worker_thread(); } Classes CountdownEvent"
  },
  "api/threading-countdown/countdownevent.html": {
    "href": "api/threading-countdown/countdownevent.html",
    "title": "CountdownEvent Class | @esfx API Reference",
    "keywords": "CountdownEvent Class Package : @esfx/threading-countdown Declaration export declare class CountdownEvent implements Disposable Constructors constructor(initialCount) Constructs a new instance of the CountdownEvent class Declaration constructor(initialCount: number); Parameters initialCount number constructor(buffer, byteOffset) Constructs a new instance of the CountdownEvent class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Gets the SharedArrayBuffer for this object. Declaration get buffer(): SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Gets the number of bytes occupied by this object in its buffer. Declaration get byteLength(): number; Property Value number byteOffset Gets the byte offset of this object in its buffer. Declaration get byteOffset(): number; Property Value number initialCount Gets the number of participants initially required to signal the event. Declaration get initialCount(): number; Property Value number isSet Gets a value indicating whether the event is signaled (all participants are accounted for). Declaration get isSet(): boolean; Property Value boolean remainingCount Gets the number of remaining participants required to signal the event. Declaration get remainingCount(): number; Property Value number SIZE Declaration static readonly SIZE = 12; Methods [Disposable.dispose]() Releases all resources for this object. Declaration [Disposable.dispose](): void; Returns void add(count) Adds one or more required participants to the event. Declaration add(count?: number): void; Parameters count number Returns void close() Releases all resources for this object. Declaration close(): void; Returns void reset(count) Resets the countdown to the specified count. Declaration reset(count?: number): void; Parameters count number The new number of participants required. If this is undefined <!-- --> , the current value of initialCount is used. Returns void signal(count) Signals a participant is ready, decrementing the number of remaining required participants by the provided value. Declaration signal(count?: number): boolean; Parameters count number The number of participants to signal (default: 1 <!-- --> ). Returns boolean true if all participants were accounted for and the event became signaled; otherwise, false <!-- --> . tryAdd(count) Adds one or more required participants to the event if the event is not already signaled. Declaration tryAdd(count?: number): boolean; Parameters count number Returns boolean true if the participants were added; otherwise, false <!-- --> . wait(ms) Blocks the current thread until the countdown is set. Declaration wait(ms?: number): boolean; Parameters ms number The number of milliseconds to wait. Returns boolean true if the event was signaled before the timeout period elapsed; otherwise, false <!-- --> ."
  },
  "api/threading-lockable.html": {
    "href": "api/threading-lockable.html",
    "title": "@esfx/threading-lockable Package | @esfx API Reference",
    "keywords": "@esfx/threading-lockable Package A low-level Symbol-based API for defining locking semantics for thread synchronization primitives for Workers. Installation npm i @esfx/threading-lockable Interfaces Lockable Namespaces Lockable"
  },
  "api/threading-lockable/lockable-interface.html": {
    "href": "api/threading-lockable/lockable-interface.html",
    "title": "Lockable Interface | @esfx API Reference",
    "keywords": "Lockable Interface Package : @esfx/threading-lockable Declaration export interface Lockable Methods [Lockable.lock](ms) Takes an exclusive lock. Declaration [Lockable.lock](ms?: number): boolean; Parameters ms number The number of milliseconds to wait for the lock. Returns boolean true if the current thread now owns the lock; otherwise, false <!-- --> . [Lockable.tryLock]() Attempts to take an exclusive lock without waiting. Declaration [Lockable.tryLock]?(): boolean; Returns boolean true if the current thread now owns the lock; otherwise, false <!-- --> . [Lockable.unlock]() Releases the exclusive lock. Declaration [Lockable.unlock](): boolean; Returns boolean true if the current thread previously owned the lock and the lock could be released; otherwise, false <!-- --> ."
  },
  "api/threading-lockable/lockable-namespace.html": {
    "href": "api/threading-lockable/lockable-namespace.html",
    "title": "Lockable Namespace | @esfx API Reference",
    "keywords": "Lockable Namespace Package : @esfx/threading-lockable Functions hasInstance(value) Declaration function hasInstance(value: unknown): value is Lockable; Parameters value unknown Returns value is Lockable Variables lock Declaration lock: unique symbol name Declaration name = \"Lockable\" tryLock Declaration tryLock: unique symbol unlock Declaration unlock: unique symbol"
  },
  "api/threading-manualresetevent.html": {
    "href": "api/threading-manualresetevent.html",
    "title": "@esfx/threading-manualresetevent Package | @esfx API Reference",
    "keywords": "@esfx/threading-manualresetevent Package Provides the ManualResetEvent class, a threading primitive for use with Workers. Installation npm i @esfx/threading-manualresetevent Usage TypeScript JavaScript (CommonJS) import { ManualResetEvent } from \"@esfx/threading-manualresetevent\"; import { sleep } from \"@esfx/threading-sleep\"; import { Worker, isMainThread, workerData } from \"worker_threads\"; import { createInterface } from \"readline\"; function worker_thread() { const mre = new ManualResetEvent(workerData); let count = 0; while (true) { mre.waitOne(); // wait until signaled console.log(`counter: ${count++}`); sleep(500); } } function main() { const mre = new ManualResetEvent(); const worker = new Worker(__filename, { workerData: mre.buffer, stdout: true }); worker.stdout.pipe(process.stdout); console.log(\"Press ENTER to start counter:\"); const rl = createInterface({ input: process.stdin, output: process.stdout }); rl.on(\"line\", () => { if (mre.isSet) { mre.reset(); console.log(\"Press ENTER to start counter:\"); } else { console.log(\"Press ENTER to stop counter:\"); mre.set(); } }); } if (isMainThread) { main(); } else { worker_thread(); } const { ManualResetEvent } = require(\"@esfx/threading-manualresetevent\"); const { sleep } = require(\"@esfx/threading-sleep\"); const { Worker, isMainThread, workerData } = require(\"worker_threads\"); const { createInterface } = require(\"readline\"); function worker_thread() { const mre = new ManualResetEvent(workerData); let count = 0; while (true) { mre.waitOne(); // wait until signaled console.log(`counter: ${count++}`); sleep(500); } } function main() { const mre = new ManualResetEvent(); const worker = new Worker(__filename, { workerData: mre.buffer, stdout: true }); worker.stdout.pipe(process.stdout); console.log(\"Press ENTER to start counter:\"); const rl = createInterface({ input: process.stdin, output: process.stdout }); rl.on(\"line\", () => { if (mre.isSet) { mre.reset(); console.log(\"Press ENTER to start counter:\"); } else { console.log(\"Press ENTER to stop counter:\"); mre.set(); } }); } if (isMainThread) { main(); } else { worker_thread(); } Classes ManualResetEvent"
  },
  "api/threading-manualresetevent/manualresetevent.html": {
    "href": "api/threading-manualresetevent/manualresetevent.html",
    "title": "ManualResetEvent Class | @esfx API Reference",
    "keywords": "ManualResetEvent Class Package : @esfx/threading-manualresetevent Declaration export declare class ManualResetEvent implements Disposable Constructors constructor(initialState) Constructs a new instance of the ManualResetEvent class Declaration constructor(initialState?: boolean); Parameters initialState boolean constructor(buffer, byteOffset) Constructs a new instance of the ManualResetEvent class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Gets the SharedArrayBuffer for this event. Declaration get buffer(): SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Gets the number of bytes occupied by this event in its buffer. Declaration get byteLength(): number; Property Value number byteOffset Gets the byte offset of this event in its buffer. Declaration get byteOffset(): number; Property Value number isSet Gets a value indicating whether the event is currently set (e.g., in the signaled state). Declaration get isSet(): boolean; Property Value boolean SIZE Declaration static readonly SIZE = 4; Methods [Disposable.dispose]() Releases all resources for this event. Declaration [Disposable.dispose](): void; Returns void close() Releases all resources for this event. Declaration close(): void; Returns void reset() Sets the state of the event to nonsignaled, causing any threads waiting on the event to block. Declaration reset(): boolean; Returns boolean true if the event was reset; otherwise, false <!-- --> . set() Sets the state of the event to signaled, allowing any threads waiting on the event to proceed. Declaration set(): boolean; Returns boolean true if the event was set; otherwise, false <!-- --> . waitOne(ms) Blocks the current thread until this event becomes signaled. Declaration waitOne(ms?: number): boolean; Parameters ms number The number of milliseconds to wait. Returns boolean true if the event was signaled before the timeout expired; otherwise, false <!-- --> ."
  },
  "api/threading-mutex.html": {
    "href": "api/threading-mutex.html",
    "title": "@esfx/threading-mutex Package | @esfx API Reference",
    "keywords": "@esfx/threading-mutex Package Provides the Mutex class which can be used to protect shared resources across Workers using a @\"!SharedArrayBuffer\". Installation npm i @esfx/threading-mutex Usage TypeScript JavaScript (CommonJS) import { Mutex } from \"@esfx/threading-mutex\"; import { StructType, int32 } from \"@esfx/struct-type\"; import { sleep } from \"@esfx/threading-sleep\"; import { Worker, isMainThread, workerData } from \"worker_threads\"; const SharedData = StructType([ { name: \"x\", type: int32 }, { name: \"y\", type: int32 }, ] as const); function worker_thread() { const m = new Mutex(workerData[0]); const data = new SharedData(workerData[1]); while (true) { sleep(250); m.lock(); try { // inside of the lock we can mutate 'data' without // main() seeing a partial update. data.x++; data.y--; } finally { m.unlock(); } } } function main() { const m = new Mutex(); const data = new SharedData(/*shared*/ true); const worker = new Worker(__filename, { workerData: [m.buffer, data.buffer] }); while (true) { sleep(500); m.lock(); try { // inside of the lock, we know that we can safely read // both 'x' and 'y' and the worker will not modify // either value until we unlock. console.log(`x: ${data.x}, y: ${data.y}`); } finally { m.unlock(); } } } if (isMainThread) { main(); } else { worker_thread(); } const { Mutex } = require(\"@esfx/threading-mutex\"); const { StructType, int32 } = require(\"@esfx/struct-type\"); const { sleep } = require(\"@esfx/threading-sleep\"); const { Worker, isMainThread, workerData } = require(\"worker_threads\"); const SharedData = StructType([ { name: \"x\", type: int32 }, { name: \"y\", type: int32 }, ]); function worker_thread() { const m = new Mutex(workerData[0]); const data = new SharedData(workerData[1]); while (true) { sleep(250); m.lock(); try { // inside of the lock we can mutate 'data' without // main() seeing a partial update. data.x++; data.y--; } finally { m.unlock(); } } } function main() { const m = new Mutex(); const data = new SharedData(/*shared*/ true); const worker = new Worker(__filename, { workerData: [m.buffer, data.buffer] }); while (true) { sleep(500); m.lock(); try { // inside of the lock, we know that we can safely read // both 'x' and 'y' and the worker will not modify // either value until we unlock. console.log(`x: ${data.x}, y: ${data.y}`); } finally { m.unlock(); } } } if (isMainThread) { main(); } else { worker_thread(); } Classes Mutex"
  },
  "api/threading-mutex/mutex.html": {
    "href": "api/threading-mutex/mutex.html",
    "title": "Mutex Class | @esfx API Reference",
    "keywords": "Mutex Class Package : @esfx/threading-mutex Declaration export declare class Mutex implements Lockable, Disposable Constructors constructor(initiallyOwned) Constructs a new instance of the Mutex class Declaration constructor(initiallyOwned?: boolean); Parameters initiallyOwned boolean constructor(buffer, byteOffset) Constructs a new instance of the Mutex class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Gets the SharedArrayBuffer for this mutex. Declaration get buffer(): SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Gets the number of bytes occupied by this mutex in its buffer. Declaration get byteLength(): number; Property Value number byteOffset Gets the byte offset of this mutex in its buffer. Declaration get byteOffset(): number; Property Value number isLocked Gets a value indicating whether the mutex is currently locked. Declaration get isLocked(): boolean; Property Value boolean ownsLock Gets a value indicating whether this instance of the mutex owns the lock. Declaration get ownsLock(): boolean; Property Value boolean SIZE Declaration static readonly SIZE = 4; Methods [Disposable.dispose]() Releases the lock on the mutex (if this mutex owns the lock) and releases all resources for this mutex. Declaration [Disposable.dispose](): void; Returns void [Lockable.lock](ms) Declaration [Lockable.lock](ms?: number): boolean; Parameters ms number Returns boolean [Lockable.tryLock]() Declaration [Lockable.tryLock](): boolean; Returns boolean [Lockable.unlock]() Declaration [Lockable.unlock](): boolean; Returns boolean close() Releases the lock on the mutex (if this mutex owns the lock) and releases all resources for this mutex. Declaration close(): void; Returns void lock(ms) Blocks the current Agent until it can acquire a lock on the mutex. Declaration lock(ms?: number): boolean; Parameters ms number The number of milliseconds to wait before the operation times out. Returns boolean true if the lock was acquired within the provided timeout period; otherwise, false <!-- --> . tryLock() Attempts to acquire a lock on the mutex without blocking the current Agent <!-- --> . Declaration tryLock(): boolean; Returns boolean true if the lock was acquired successfully; otherwise, false <!-- --> . unlock() Releases the lock on the mutex allowing the next waiter to take the lock. Declaration unlock(): boolean; Returns boolean true if the lock was released successfully; otherwise, false <!-- --> ."
  },
  "api/threading-semaphore.html": {
    "href": "api/threading-semaphore.html",
    "title": "@esfx/threading-semaphore Package | @esfx API Reference",
    "keywords": "@esfx/threading-semaphore Package Provides the Semaphore class, a thread synchronization primitive for use with Workers. Installation npm i @esfx/threading-semaphore Usage TypeScript JavaScript (CommonJS) import { Semaphore } from \"@esfx/threading-semaphore\"; import { Worker, isMainThread, workerData } from \"worker_threads\"; function worker_thread() { const sem = new Semaphore(workerData[0]); while (true) { // wait until the thread can enter the semaphore sem.wait(); // do work inside the semaphore... // release this worker's spot sem.release(); // do work outside the semaphore... } } function main() { // create a semaphore that allows 5 workers to enter at once const sem = new Semaphore(5); // start 10 workers for (let i = 0; i < 10; i++) { new Worker(__filename, { workerData: [sem.buffer] }); } } if (isMainThread) { main(); } else { worker_thread(); } const { Semaphore } = require(\"@esfx/threading-semaphore\"); const { Worker, isMainThread, workerData } = require(\"worker_threads\"); function worker_thread() { const sem = new Semaphore(workerData[0]); while (true) { // wait until the thread can enter the semaphore sem.wait(); // do work inside the semaphore... // release this worker's spot sem.release(); // do work outside the semaphore... } } function main() { // create a semaphore that allows 5 workers to enter at once const sem = new Semaphore(5); // start 10 workers for (let i = 0; i < 10; i++) { new Worker(__filename, { workerData: [sem.buffer] }); } } if (isMainThread) { main(); } else { worker_thread(); } Classes Semaphore"
  },
  "api/threading-semaphore/semaphore.html": {
    "href": "api/threading-semaphore/semaphore.html",
    "title": "Semaphore Class | @esfx API Reference",
    "keywords": "Semaphore Class Package : @esfx/threading-semaphore Declaration export declare class Semaphore Constructors constructor(initialCount, maxCount) Constructs a new instance of the Semaphore class Declaration constructor(initialCount: number, maxCount?: number); Parameters initialCount number maxCount number constructor(buffer, byteOffset) Constructs a new instance of the Semaphore class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Gets the SharedArrayBuffer for this object. Declaration get buffer(): SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Gets the number of bytes occupied by this object in its buffer. Declaration get byteLength(): number; Property Value number byteOffset Gets the byte offset of this object in its buffer. Declaration get byteOffset(): number; Property Value number count Gets the number of remaining threads that can enter the semaphore. Declaration get count(): number; Property Value number SIZE Declaration static readonly SIZE = 16; Methods [Disposable.dispose]() Releases all resources for this object. Declaration [Disposable.dispose](): void; Returns void close() Releases all resources for this object. Declaration close(): void; Returns void release(count) Exits the semaphore the provided number of times. Declaration release(count?: number): number; Parameters count number The number of times to exit the semaphore (default: 1 <!-- --> ). Returns number The previous count of the semaphore. wait(ms) Blocks the current thread until it can enter the semaphore. Declaration wait(ms?: number): boolean; Parameters ms number The number of milliseconds to wait before the operation times out. Returns boolean true if the semaphore was entered before the timeout elapsed; otherwise, false <!-- --> ."
  },
  "api/threading-sleep.html": {
    "href": "api/threading-sleep.html",
    "title": "@esfx/threading-sleep Package | @esfx API Reference",
    "keywords": "@esfx/threading-sleep Package Provides the sleep(ms) function which causes the current execution thread to sleep until the timeout expires. Installation npm i @esfx/threading-sleep Usage TypeScript JavaScript (CommonJS) import { sleep } from \"@esfx/threading-sleep\"; // block the main thread for half a second sleep(500); const { sleep } = require(\"@esfx/threading-sleep\"); // block the main thread for half a second sleep(500); Functions sleep(ms) Causes the current thread of execution to sleep until the specified timeout expires. Declaration export declare function sleep(ms: number): void; Parameters ms number The number of milliseconds to suspend the thread. Must be a finite, positive value, or zero. Returns void"
  },
  "api/threading-spinwait.html": {
    "href": "api/threading-spinwait.html",
    "title": "@esfx/threading-spinwait Package | @esfx API Reference",
    "keywords": "@esfx/threading-spinwait Package Provides the SpinWait class, a thread synchronization primitive for use with Workers. Installation npm i @esfx/threading-spinwait Usage TypeScript JavaScript (CommonJS) import { SpinWait } from \"@esfx/threading-spinwait\"; import { StructType, int32 } from \"@esfx/struct-type\"; import { Worker, isMainThread, workerData } from \"worker_threads\"; const SharedData = StructType([ { name: \"ready\", type: int32 }, ] as const); function worker_thread() { const data = new SharedData(workerData); // do some long running process... // signal that the work has completed. data.ready = 1; } function main() { const data = new SharedData(/*shared*/ true); const worker = new Worker(__filename, { workerData: data.buffer }); // start spinning until the condition is met. // this results in the thread sleeping periodically // while it waits for the condition. const spinWait = new SpinWait(); spinWait.spinUntil(() => data.ready === 1); } if (isMainThread) { main(); } else { worker_thread(); } const { SpinWait } = require(\"@esfx/threading-spinwait\"); const { StructType, int32 } = require(\"@esfx/struct-type\"); const { Worker, isMainThread, workerData } = require(\"worker_threads\"); const SharedData = StructType([ { name: \"ready\", type: int32 }, ]); function worker_thread() { const data = new SharedData(workerData); // do some long running process... // signal that the work has completed. data.ready = 1; } function main() { const data = new SharedData(/*shared*/ true); const worker = new Worker(__filename, { workerData: data.buffer }); // start spinning until the condition is met. // this results in the thread sleeping periodically // while it waits for the condition. const spinWait = new SpinWait(); spinWait.spinUntil(() => data.ready === 1); } if (isMainThread) { main(); } else { worker_thread(); } Classes SpinWait"
  },
  "api/threading-spinwait/spinwait.html": {
    "href": "api/threading-spinwait/spinwait.html",
    "title": "SpinWait Class | @esfx API Reference",
    "keywords": "SpinWait Class Package : @esfx/threading-spinwait Declaration export declare class SpinWait Methods reset() Declaration reset(): void; Returns void spinOnce() Declaration spinOnce(): void; Returns void spinUntil(condition, ms) Declaration spinUntil(condition: () => boolean, ms?: number): boolean; Parameters condition () => boolean ms number Returns boolean"
  },
  "api/type-model.html": {
    "href": "api/type-model.html",
    "title": "@esfx/type-model Package | @esfx API Reference",
    "keywords": "@esfx/type-model Package Provides a number of utility types for TypeScript. Installation npm i @esfx/type-model Interfaces AccessorPropertyDescriptor<T> A PropertyDescriptor constrained to the valid attributes for an accessor. MethodPropertyDescriptor<T> A PropertyDescriptor constrained to the valid attributes for a method. Type Aliases AbstractConstructor Represents an abstract class constructor. Declaration export declare type AbstractConstructor<T = {}, A extends any[] = any[]> = abstract new (...args: A) => T; Type Parameters T A And Maps to true if both A and B are true <!-- --> ; otherwise, false <!-- --> . Declaration export declare type And<A extends boolean, B extends boolean> = IsNever<A> extends true ? never : IsNever<B> extends true ? never : A extends false ? false : B extends false ? false : true; Type Parameters A B AnyExclude Gets a union of Exclude<T', U> for each constituent T' of T <!-- --> . Declaration export declare type AnyExclude<T, U> = T extends unknown ? Exclude<T, U> : never; Type Parameters T U AnyExtract Gets a union of Extract<T', U> for each constituent T' of T <!-- --> . Declaration export declare type AnyExtract<T, U> = T extends unknown ? Extract<T, U> : never; Type Parameters T U AnyKeyof Gets a union of keyof T' of each constituent T' of T <!-- --> . Declaration export declare type AnyKeyof<T> = T extends unknown ? keyof T : never; Type Parameters T Assign Combine the properties of A and B <!-- --> , chosing the properties in B if the types differ. Declaration export declare type Assign<A extends object, B extends object> = Reshape<Diff<A, B> & B>; Type Parameters A B AsyncGeneratorNextType Gets the type that can be sent to a generator via its next method. Declaration export declare type AsyncGeneratorNextType<T> = T extends { [Symbol.asyncIterator](): { next(value?: infer U): any; }; } ? U : never; Type Parameters T AsyncGeneratorReturnType Gets the type that can be returned from a generator when it has finished executing. Declaration export declare type AsyncGeneratorReturnType<T> = T extends { [Symbol.asyncIterator](): { next(...args: any): PromiseLike<infer R>; }; } ? R extends { done?: boolean; value?: any; } ? R[\"done\"] extends false | undefined ? never : Await<R[\"value\"]> : never : never; Type Parameters T AsyncIteratedType Gets the type yielded by an AsyncIterable. Declaration export declare type AsyncIteratedType<T> = T extends { [Symbol.asyncIterator](): { next(...args: any): PromiseLike<infer R>; }; } ? R extends { done?: boolean; value?: any; } ? R[\"done\"] extends true ? never : Await<R[\"value\"]> : never : never; Type Parameters T Await Maps T to its awaited type if T is a promise. Declaration export declare type Await<T> = T extends { then(onfulfilled: infer U): any; } ? U extends ((value: infer V) => any) ? Await<V> : never : T; Type Parameters T AwaitAll Maps each element of T to its awaited type if the element is a promise. Declaration export declare type AwaitAll<T extends any[]> = { [P in keyof T]: Await<T[P]>; }; Type Parameters T Conjoin Joins a union of disjoint object types into a single object type. Declaration export declare type Conjoin<T extends object> = { [P in AnyKeyof<T>]: AnyExtract<T, { readonly [U in P]: unknown; }>[P]; }; Type Parameters T constnumber A type useful as a base constraint for a number that should be inferred as a number literal type. Declaration export declare type constnumber = number & {} | 0; Constructor Represents a concrete ECMAScript constructor object. Declaration export declare type Constructor<T = {}, A extends any[] = any[]> = new (...args: A) => T; Type Parameters T A conststring A type useful as a base constraint for a string that should be inferred as a string literal type. Declaration export declare type conststring = string & {} | \"\"; constsymbol A type useful as a base constraint for a symbol that should be inferred as a unique symbol type. Declaration export declare type constsymbol = symbol & {} | typeof kIgnore; consttuple A type useful as a base constraint for an array that should be inferred as a tuple. Declaration export declare type consttuple<T> = readonly T[] | readonly []; Type Parameters T Diff Remove from A all properties with the same types that exist in B <!-- --> . Declaration export declare type Diff<A extends object, B extends object> = Omit<A, keyof B>; Type Parameters A B Disjoin Split an object into a union of objects for each key/value pair. Declaration export declare type Disjoin<T extends object> = IsNever<T> extends true ? never : IsAny<T> extends true ? any : __DisjoinRest<{ [K in keyof T]: { [P in K]: T[P]; }; }[keyof T]>; Type Parameters T DisjoinOverlaps Maps to true if any type in A is assignable to or shares a property with any type in B <!-- --> ; otherwise, false <!-- --> . This is similar to Overlaps <!-- --> , except object types in A and B are mapped through Disjoin <!-- --> . Declaration export declare type DisjoinOverlaps<A, B> = Overlaps<A extends object ? Disjoin<A> : A, B extends object ? Disjoin<B> : B>; Type Parameters A B Every Maps to true if every element of the tuple L is true <!-- --> ; otherwise, false <!-- --> . Declaration export declare type Every<L extends boolean[]> = L extends [] ? never : __EveryRest<{ [P in keyof L]: IsNever<L[P]> extends true ? \"never\" : IsAny<L[P]> extends true ? \"boolean\" : boolean extends L[P] ? \"boolean\" : L[P] extends false ? \"false\" : never; }[number]>; Type Parameters L ExactType Maps to true if A and B are identical types; otherwise, false <!-- --> . Declaration export declare type ExactType<A, B> = (<T>() => T extends A ? 0 : 1) extends (<T>() => T extends B ? 0 : 1) ? true : false; Type Parameters A B ExactTypes Maps to true if all elements of the tuple L are identical; otherwise, false <!-- --> . Declaration export declare type ExactTypes<L extends any[]> = L extends [] ? never : SameType<{ [P in keyof L]: ExactType<L[P], L[number]>; }[number], true>; Type Parameters L Falsy A union of all of the falsy types in TypeScript. Declaration export declare type Falsy = null | undefined | false | 0 | 0n | ''; FunctionKeys Maps to the keys of T whose values are functions. Declaration export declare type FunctionKeys<T, F extends Function = Function> = MatchingKeys<T, F>; Type Parameters T F GeneratorNextType Gets the type that can be sent to a generator via its next method. Declaration export declare type GeneratorNextType<T> = T extends { [Symbol.iterator](): { next(value?: infer U): any; }; } ? U : never; Type Parameters T GeneratorReturnType Gets the type that can be returned from a generator when it has finished executing. Declaration export declare type GeneratorReturnType<T> = T extends { [Symbol.iterator](): { next(...args: any): infer R; }; } ? R extends { done?: boolean; value: any; } ? R[\"done\"] extends false | undefined ? never : R[\"value\"] : never : never; Type Parameters T Intersect Pick from A all properties with the same types that exist in B <!-- --> . Declaration export declare type Intersect<A extends object, B extends object> = Pick<A & B, Extract<keyof A, keyof B> & Extract<keyof B, keyof A>>; Type Parameters A B Intersection Maps an ordered tuple of types into an intersection of those types. Declaration export declare type Intersection<A extends any[]> = A extends [infer H, ...infer T] ? H & Intersection<T> : unknown; Type Parameters A Is Constrains T to U <!-- --> . Declaration export declare type Is<T extends U, U> = T; Type Parameters T U IsAny Maps to true if A is precisely the any type; otherwise, false <!-- --> . Declaration export declare type IsAny<A> = boolean extends (A extends never ? true : false) ? true : false; Type Parameters A IsCallable Maps to true if the type has a call signature; otherwise, false <!-- --> . Declaration export declare type IsCallable<T> = IsAny<T> extends true ? boolean : IsNever<T> extends true ? never : SameType<T, Function> extends true ? true : [ T ] extends [(...args: any) => any] ? true : false; Type Parameters T IsConstructable Maps to true if the type has a construct signature; otherwise, false <!-- --> . Declaration export declare type IsConstructable<T> = IsAny<T> extends true ? boolean : IsNever<T> extends true ? never : SameType<T, Function> extends true ? true : [ T ] extends [new (...args: any) => any] ? true : false; Type Parameters T IsEmpty Maps to true if T is an empty object ( {} <!-- --> ). Declaration export declare type IsEmpty<T extends object> = IsNever<keyof T>; Type Parameters T IsNever Maps to true if A is precisely the never type; otherwise, false <!-- --> . Declaration export declare type IsNever<A> = [A] extends [never] ? true : false; Type Parameters A IsProperSubsetOf Maps to true if Sub is a proper subset of Super <!-- --> ; otherwise, false <!-- --> . Declaration export declare type IsProperSubsetOf<Sub, Super> = IsAny<Sub> extends true ? boolean : IsAny<Super> extends true ? boolean : SameType<Sub, Super> extends true ? false : __IsSubsetOf<Sub, Super>; Type Parameters Sub Super IsProperSupersetOf Maps to true if Super is a proper superset of Sub <!-- --> ; otherwise, false <!-- --> . Declaration export declare type IsProperSupersetOf<Super, Sub> = IsProperSubsetOf<Sub, Super>; Type Parameters Super Sub IsSubsetOf Maps to true if Sub is a subset of Super <!-- --> ; otherwise, false <!-- --> . Declaration export declare type IsSubsetOf<Sub, Super> = IsAny<Sub> extends true ? boolean : IsAny<Super> extends true ? boolean : __IsSubsetOf<Sub, Super>; Type Parameters Sub Super IsSubtypeOf Maps to true if Sub is a subtype of Super <!-- --> ; otherwise, false <!-- --> . Declaration export declare type IsSubtypeOf<Sub, Super> = IsNever<Super> extends true ? IsNever<Sub> : IsNever<Sub> extends true ? true : IsAny<Super> extends true ? true : IsAny<Sub> extends true ? true : Sub extends Super ? true : false; Type Parameters Sub Super IsSupersetOf Maps to true if Super is a superset of Sub <!-- --> ; otherwise, false <!-- --> . Declaration export declare type IsSupersetOf<Super, Sub> = IsSubsetOf<Sub, Super>; Type Parameters Super Sub IsSupertypeOf Maps to true if Super is a supertype of Sub <!-- --> ; otherwise, false <!-- --> . Declaration export declare type IsSupertypeOf<Super, Sub> = IsSubtypeOf<Sub, Super>; Type Parameters Super Sub IsUnion Maps to true if T is a union of multiple types; otherwise, false <!-- --> . Declaration export declare type IsUnion<T> = IsNever<T> extends true ? false : __IsUnionRest<T, [T]>; Type Parameters T IsUnknown Maps to true if A is precisely the unknown type; otherwise, false <!-- --> . Declaration export declare type IsUnknown<A> = IsAny<A> extends true ? false : unknown extends A ? true : false; Type Parameters A IteratedType Gets the type yielded by an Iterable. Declaration export declare type IteratedType<T> = T extends { [Symbol.iterator](): { next(...args: any): infer R; }; } ? R extends { done?: boolean; value: any; } ? R[\"done\"] extends true ? never : R[\"value\"] : never : never; Type Parameters T MatchingKeys Maps to the keys of T whose values match TMatch <!-- --> . Declaration export declare type MatchingKeys<T, TMatch> = { [P in keyof T]: T[P] extends TMatch ? P : never; }[keyof T]; Type Parameters T TMatch Mutable Maps to a mutable copy of T. Declaration export declare type Mutable<T> = { -readonly [P in keyof T]: T[P]; }; Type Parameters T NonFunctionKeys Maps to the keys of T whose values are not functions. Declaration export declare type NonFunctionKeys<T, F extends Function = Function> = NonMatchingKeys<T, F>; Type Parameters T F NonMatchingKeys Maps to the keys of T whose values do not match TMatch <!-- --> . Declaration export declare type NonMatchingKeys<T, TMatch> = Exclude<keyof T, MatchingKeys<T, TMatch>>; Type Parameters T TMatch NonOptional Strips undefined from a type. Declaration export declare type NonOptional<T> = T extends undefined ? never : T; Type Parameters T Not Maps to true if A is false <!-- --> , otherwise true <!-- --> . Declaration export declare type Not<A extends boolean> = IsNever<A> extends true ? never : A extends false ? true : false; Type Parameters A Nullable Indicates a type that may be null or undefined <!-- --> . Declaration export declare type Nullable<T> = T | undefined | null; Type Parameters T numstr Gets a union of the number and numeric string value for a number or numeric string index between 0 and 255 Declaration export declare type numstr<I extends keyof any> = _SupportsNumericExtraction extends true ? _numstrUsingNumericExtraction<I> : _numstrUsingTable<I>; Type Parameters I One Maps to true if exactly one element of the tuple L is true <!-- --> ; otherwise, false <!-- --> . Declaration export declare type One<L extends boolean[]> = L extends [] ? never : __OneRest<{ [P in keyof L]: IsNever<L[P]> extends true ? \"never\" : IsAny<L[P]> extends true ? \"boolean\" : boolean extends L[P] ? \"boolean\" : L[P] extends true ? [P] : never; }[number]>; Type Parameters L Optional Indicates a type that may be undefined <!-- --> . Declaration export declare type Optional<T> = T | undefined; Type Parameters T OptionalKeyof Warning Deprecated Use `OptionalKeys ` instead. Declaration export declare type OptionalKeyof<T> = OptionalKeys<T>; Type Parameters T OptionalKeys Gets a union of the keys of T that are optional. Declaration export declare type OptionalKeys<T> = Exclude<keyof T, RequiredKeys<T>>; Type Parameters T Or Maps to true if either A or B are true <!-- --> ; otherwise, false <!-- --> . Declaration export declare type Or<A extends boolean, B extends boolean> = IsNever<A> extends true ? never : IsNever<B> extends true ? never : A extends true ? true : B extends true ? true : false; Type Parameters A B Overlaps Maps to true if any type in A is assignable to any type in B <!-- --> ; otherwise, false <!-- --> . Declaration export declare type Overlaps<A, B> = IsNever<A> extends true ? false : IsNever<B> extends true ? false : IsAny<A> extends true ? true : IsAny<B> extends true ? true : 1 extends (A extends unknown ? A extends B ? 1 : 2 : 3) ? true : 1 extends (B extends unknown ? B extends A ? 1 : 2 : 3) ? true : false; Type Parameters A B Pop Maps to a tuple where the first element is the last element of L and the second element are the remaining elements of L <!-- --> . Declaration export declare type Pop<L extends any[]> = L extends [...infer H, infer T] ? [T, H] : [never, never]; Type Parameters L Primitive A union of all of the primitive types in TypeScript. Declaration export declare type Primitive = string | symbol | boolean | number | bigint; PromisedType Gets the promised type of a Promise. Declaration export declare type PromisedType<T> = T extends { then(onfulfilled: infer U): any; } ? U extends ((value: infer V) => any) ? V : never : never; Type Parameters T Push Push an element on to the end of a tuple. Declaration export declare type Push<H extends any[], T> = [...H, T]; Type Parameters H T Relatable Maps to true if either A or B are relatable to each other. Declaration export declare type Relatable<A, B> = IsNever<A> extends true ? false : IsNever<B> extends true ? false : IsAny<A> extends true ? true : IsAny<B> extends true ? true : [ A ] extends [B] ? true : [ B ] extends [A] ? true : false; Type Parameters A B RequiredKeyof Warning Deprecated Use `RequiredKeys ` instead. Declaration export declare type RequiredKeyof<T> = RequiredKeys<T>; Type Parameters T RequiredKeys Gets a union of the keys of T that are non-optional. Declaration export declare type RequiredKeys<T> = _RequiredKeyof<T, keyof T>; Type Parameters T Reshape Map an intersection of object types into a single object type. Declaration export declare type Reshape<T extends object> = Pick<T, keyof T>; Type Parameters T Reverse Reverse the order of the elements of a tuple. Declaration export declare type Reverse<L extends any[]> = L extends [infer H, ...infer T] ? [...Reverse<T>, H] : []; Type Parameters L SameType Maps to true if both A and B are assignable to each other; otherwise, false <!-- --> . Declaration export declare type SameType<A, B> = IsNever<A> extends true ? IsNever<B> : IsNever<B> extends true ? false : [ A, B ] extends [B, A] ? true : false; Type Parameters A B SameTypes Maps to true if all elements of the tuple L are assignable to each other; otherwise, false <!-- --> . Declaration export declare type SameTypes<L extends any[]> = L extends [] ? never : SameType<{ [P in keyof L]: SameType<L[P], L[number]>; }[number], true>; Type Parameters L Shift Maps to a tuple where the first element is the first element of L and the second element are the remaining elements of L <!-- --> . Declaration export declare type Shift<L extends any[]> = L extends [infer H, ...infer T] ? [H, T] : [never, never]; Type Parameters L Some Maps to true if any element of the tuple L is true <!-- --> ; otherwise, false <!-- --> . Declaration export declare type Some<L extends boolean[]> = L extends [] ? never : __SomeRest<{ [P in keyof L]: IsNever<L[P]> extends true ? \"never\" : IsAny<L[P]> extends true ? \"boolean\" : boolean extends L[P] ? \"boolean\" : L[P] extends true ? \"true\" : never; }[number]>; Type Parameters L Union Maps an ordered tuple of types into a union of those types. Declaration export declare type Union<A extends any[]> = A[number]; Type Parameters A Unshift Inserts an element at the start of a tuple. Declaration export declare type Unshift<T extends any[], H> = [H, ...T]; Type Parameters T H XOr Maps to true if only one of either A or B are true <!-- --> ; otherwise, false <!-- --> . Declaration export declare type XOr<A extends boolean, B extends boolean> = IsNever<A> extends true ? never : IsNever<B> extends true ? never : A extends true ? Not<B> : B extends true ? Not<A> : false; Type Parameters A B"
  },
  "api/type-model/accessorpropertydescriptor.html": {
    "href": "api/type-model/accessorpropertydescriptor.html",
    "title": "AccessorPropertyDescriptor<T> Interface | @esfx API Reference",
    "keywords": "AccessorPropertyDescriptor<T> Interface Package : @esfx/type-model A PropertyDescriptor constrained to the valid attributes for an accessor. Declaration export interface AccessorPropertyDescriptor<T = any> Properties configurable Declaration configurable?: boolean; Property Value boolean enumerable Declaration enumerable?: boolean; Property Value boolean Methods get() Declaration get?(): T; Returns T set(v) Declaration set?(v: T): void; Parameters v T Returns void"
  },
  "api/type-model/methodpropertydescriptor.html": {
    "href": "api/type-model/methodpropertydescriptor.html",
    "title": "MethodPropertyDescriptor<T> Interface | @esfx API Reference",
    "keywords": "MethodPropertyDescriptor<T> Interface Package : @esfx/type-model A PropertyDescriptor constrained to the valid attributes for a method. Declaration export interface MethodPropertyDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> Properties configurable Declaration configurable?: boolean; Property Value boolean enumerable Declaration enumerable?: boolean; Property Value boolean value Declaration value: T; Property Value T writable Declaration writable?: boolean; Property Value boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "@esfx reference | @esfx API Reference",
    "keywords": "The @esfx suite of packages is designed to provide low-level interoperability between 3rd-party packages for a number of common operations. Packages The main packages in the @esfx suite include: @esfx/async - Provides a number of asynchronous coordination primitives from the following packages: @esfx/canceltoken @esfx/async-autoresetevent @esfx/async-barrier @esfx/async-conditionvariable @esfx/async-countdown @esfx/async-deferred @esfx/async-delay @esfx/async-lazy @esfx/async-lockable @esfx/async-manualresetevent @esfx/async-mutex @esfx/async-queue @esfx/async-readerwriterlock @esfx/async-semaphore @esfx/async-stack @esfx/async-waitqueue @esfx/cancelable - A low-level Symbol-based API for defining a common cancellation protocol. @esfx/collection-core - A low-level Symbol-based API for defining common collection behaviors. @esfx/collections - A common collections API composed of the following packages: @esfx/collections-hashmap @esfx/collections-hashset @esfx/collections-linkedlist @esfx/collections-sortedmap @esfx/collections-sortedset @esfx/disposable - A low-level Symbol-based API for defining explicit resource management. @esfx/equatable - A low-level Symbol-based API for defining equality. @esfx/fn - Utility functions for FP-style development. @esfx/iter - A collection of utilities for working with Iterables, composed of the following packages: @esfx/iter-fn - FP-style functions for querying Iterables. @esfx/iter-query - An OOP-style wrapper for querying Iterables. @esfx/iter-ordered - A low-level Symbol-based API for defining an ordered Iterable. @esfx/iter-hierarchy - A low-level Symbol-based API for defining a hierarchical Iterable. @esfx/iter-grouping - A low-level API for defining grouped Iterables. @esfx/iter-lookup - A low-level API for defining lookups. @esfx/iter-page - A low-level API for defining paged Iterables. @esfx/async-iter - A collection of utilities for working with AsyncIterables, composed of the following packages: @esfx/async-iter-fn - FP-style functions for querying AsyncIterables. @esfx/async-iter-query - An OOP-style wrapper for querying AsyncIterables. @esfx/async-iter-ordered - A low-level Symbol-based API for defining an ordered AsyncIterable. @esfx/async-iter-hierarchy - A low-level Symbol-based API for defining a hierarchical AsyncIterable. @esfx/async-iter-fromsync - A utility for adapting a synchronous Iterable into an AsyncIterable. @esfx/async-iter-ordered-fromsync - A utility for adapting a synchronous ordered Iterable into an ordered AsyncIterable. @esfx/events - A low-level API for defining events. @esfx/indexed-object - A base class for custom integer-indexed objects. @esfx/lazy - Provides a class to simplify lazy-initialization logic. @esfx/metadata - An API for defining metadata about an object. @esfx/ref - A low-level API for defining forward references. @esfx/threading - Thread synchronization primitives for use with Workers: @esfx/threading-autoresetevent @esfx/threading-conditionvariable @esfx/threading-countdown @esfx/threading-lockable @esfx/threading-manualresetevent @esfx/threading-mutex @esfx/threading-semaphore @esfx/threading-sleep @esfx/threading-spinwait @esfx/type-model - A number of useful types for TypeScript. Shims Shim packages augment built-in objects with functionality from the main packages. @esfx/cancelable-dom-shim @esfx/collection-core-shim @esfx/collection-core-dom-shim @esfx/equatable-shim @esfx/metadata-shim @esfx/reflect-metadata-compat Adapters Adapter packages provide functionality to simplify interoperability scenarios with different platforms: @esfx/cancelable-dom"
  }
}