{
  "index.html": {
    "href": "index.html",
    "title": "@esfx reference | @esfx API Reference",
    "keywords": "The @esfx suite of packages is designed to provide low-level interoperability between 3rd-party packages for a number of common operations. Packages The main packages in the @esfx suite include: @esfx/async - Provides a number of asynchronous coordination primitives from the following packages: @esfx/async-autoresetevent @esfx/async-barrier @esfx/async-canceltoken @esfx/async-conditionvariable @esfx/async-countdown @esfx/async-deferred @esfx/async-delay @esfx/async-lazy @esfx/async-lockable @esfx/async-manualresetevent @esfx/async-mutex @esfx/async-queue @esfx/async-readerwriterlock @esfx/async-semaphore @esfx/async-stack @esfx/async-waitqueue @esfx/cancelable - A low-level Symbol-based API for defining a common cancellation protocol. @esfx/collection-core - A low-level Symbol-based API for defining common collection behaviors. @esfx/collections - A common collections API composed of the following packages: @esfx/collections-hashmap @esfx/collections-hashset @esfx/collections-linkedlist @esfx/collections-sortedmap @esfx/collections-sortedset @esfx/disposable - A low-level Symbol-based API for defining explicit resource management. @esfx/equatable - A low-level Symbol-based API for defining equality. @esfx/events - A low-level API for defining events. @esfx/indexed-object - A base class for custom integer-indexed objects. @esfx/lazy - Provides a class to simplify lazy-initialization logic. @esfx/metadata - An API for defining metadata about an object. @esfx/ref - A low-level API for defining forward references. @esfx/threading - Thread synchronization primitives for use with Workers: @esfx/threading-autoresetevent @esfx/threading-conditionvariable @esfx/threading-countdown @esfx/threading-lockable @esfx/threading-manualresetevent @esfx/threading-mutex @esfx/threading-semaphore @esfx/threading-sleep @esfx/threading-spinwait @esfx/type-model - A number of useful types for TypeScript. Shims Shim packages augment built-in objects with functionality from the main packages. @esfx/cancelable-dom-shim @esfx/collection-core-shim @esfx/collection-core-dom-shim @esfx/equatable-shim @esfx/metadata-shim @esfx/reflect-metadata-compat Adapters Adapter packages provide functionality to simplify interoperability scenarios with different platforms: @esfx/cancelable-dom"
  },
  "api/async-barrier/asyncbarrier_class.html": {
    "href": "api/async-barrier/asyncbarrier_class.html",
    "title": "Class AsyncBarrier | @esfx API Reference",
    "keywords": "Class AsyncBarrier Enables multiple tasks to cooperatively work on an algorithm through multiple phases. Constructors (constructor)(participantCount, postPhaseAction) Initializes a new instance of the Barrier class. Declaration constructor(participantCount: number, postPhaseAction?: (barrier: AsyncBarrier) => void | PromiseLike<void>); Parameters participantCount number postPhaseAction (barrier: AsyncBarrier ) => void | PromiseLike <void> Properties currentPhaseNumber Gets the number of the Barrier's current phase. Declaration readonly currentPhaseNumber: number; Property Value number participantCount Gets the total number of participants in the barrier. Declaration readonly participantCount: number; Property Value number remainingParticipants Gets the number of participants in the barrier that haven't yet signaled in the current phase. Declaration readonly remainingParticipants: number; Property Value number Methods add(participantCount) Notifies the Barrier there will be additional participants. Declaration add(participantCount?: number): void; Parameters participantCount number Returns void remove(participantCount) Notifies the Barrier there will be fewer participants. Declaration remove(participantCount?: number): void; Parameters participantCount number Returns void signalAndWait(cancelable) Signals that a participant has reached the barrier and waits for all other participants to reach the barrier. Declaration signalAndWait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable Returns Promise <void>"
  },
  "api/async-autoresetevent/asyncautoresetevent_class.html": {
    "href": "api/async-autoresetevent/asyncautoresetevent_class.html",
    "title": "Class AsyncAutoResetEvent | @esfx API Reference",
    "keywords": "Class AsyncAutoResetEvent Represents a synchronization event that, when signaled, resets automatically after releasing a single waiting asynchronous operation. Constructors (constructor)(initialState) Initializes a new instance of the AutoResetEvent class. Declaration constructor(initialState?: boolean); Parameters initialState boolean Methods reset() Sets the state of the event to nonsignaled, causing asynchronous operations to pause. Declaration reset(): void; Returns void set() Sets the state of the event to signaled, resolving at most one waiting Promise. The event is then automatically reset. Declaration set(): boolean; Returns boolean true if the operation successfully resolved a waiting Promise; otherwise, false <!-- --> . wait(cancelable) Asynchronously waits for the event to become signaled. Declaration wait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable Returns Promise <void>"
  },
  "api/threading-spinwait.html": {
    "href": "api/threading-spinwait.html",
    "title": "Package @esfx/threading-spinwait | @esfx API Reference",
    "keywords": "Package @esfx/threading-spinwait"
  },
  "api/collection-core.html": {
    "href": "api/collection-core.html",
    "title": "Package @esfx/collection-core | @esfx API Reference",
    "keywords": "Package @esfx/collection-core"
  },
  "api/cancelable.html": {
    "href": "api/cancelable.html",
    "title": "Package @esfx/cancelable | @esfx API Reference",
    "keywords": "Package @esfx/cancelable"
  },
  "api/cancelable-dom-shim.html": {
    "href": "api/cancelable-dom-shim.html",
    "title": "Package @esfx/cancelable-dom-shim | @esfx API Reference",
    "keywords": "Package @esfx/cancelable-dom-shim"
  },
  "api/async-waitqueue.html": {
    "href": "api/async-waitqueue.html",
    "title": "Package @esfx/async-waitqueue | @esfx API Reference",
    "keywords": "Package @esfx/async-waitqueue"
  },
  "api/async-semaphore.html": {
    "href": "api/async-semaphore.html",
    "title": "Package @esfx/async-semaphore | @esfx API Reference",
    "keywords": "Package @esfx/async-semaphore"
  },
  "api/async-queue.html": {
    "href": "api/async-queue.html",
    "title": "Package @esfx/async-queue | @esfx API Reference",
    "keywords": "Package @esfx/async-queue"
  },
  "api/async-lockable.html": {
    "href": "api/async-lockable.html",
    "title": "Package @esfx/async-lockable | @esfx API Reference",
    "keywords": "Package @esfx/async-lockable"
  },
  "api/async-countdown.html": {
    "href": "api/async-countdown.html",
    "title": "Package @esfx/async-countdown | @esfx API Reference",
    "keywords": "Package @esfx/async-countdown"
  },
  "api/equatable/structuralequatable_interface.html": {
    "href": "api/equatable/structuralequatable_interface.html",
    "title": "Interface StructuralEquatable | @esfx API Reference",
    "keywords": "Interface StructuralEquatable Represents a value that can compare its structural equality with another value. Methods [StructuralEquatable.structuralEquals](other, equaler) Determines whether this value is structurally equal to another value using the supplied Equaler <!-- --> . Declaration [StructuralEquatable.structuralEquals](other: unknown, equaler: Equaler<unknown>): boolean; Parameters other unknown equaler Equaler <unknown> Returns boolean [StructuralEquatable.structuralHash](equaler) Compute a structural hash code for a value using the supplied Equaler <!-- --> . Declaration [StructuralEquatable.structuralHash](equaler: Equaler<unknown>): number; Parameters equaler Equaler <unknown> Returns number"
  },
  "api/equatable/structuralcomparable_namespace.html": {
    "href": "api/equatable/structuralcomparable_namespace.html",
    "title": "Namespace StructuralComparable | @esfx API Reference",
    "keywords": "Namespace StructuralComparable Functions StructuralComparable.hasInstance(value) Determines whether a value is StructuralComparable. Declaration function hasInstance(value: unknown): value is StructuralComparable; Parameters value unknown Returns value is StructuralComparable StructuralComparable.isStructuralComparable(value) Determines whether a value is StructuralComparable. Declaration function isStructuralComparable(value: unknown): value is StructuralComparable; Parameters value unknown Returns value is StructuralComparable"
  },
  "api/collection-core/readonlyindexedcollection_namespace.html": {
    "href": "api/collection-core/readonlyindexedcollection_namespace.html",
    "title": "Namespace ReadonlyIndexedCollection | @esfx API Reference",
    "keywords": "Namespace ReadonlyIndexedCollection Functions ReadonlyIndexedCollection.hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyIndexedCollection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is ReadonlyIndexedCollection<T>; Parameters value Iterable <T> Returns value is ReadonlyIndexedCollection <T> Type Parameters Name Description T ReadonlyIndexedCollection.hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyIndexedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is ReadonlyIndexedCollection<unknown>; Parameters value unknown Returns value is ReadonlyIndexedCollection <unknown> ReadonlyIndexedCollection.isReadonlyIndexedCollection(value) Tests whether a value supports the minimal representation of a ReadonlyIndexedCollection <!-- --> . Declaration function isReadonlyIndexedCollection<T>(value: Iterable<T>): value is ReadonlyIndexedCollection<T>; Parameters value Iterable <T> Returns value is ReadonlyIndexedCollection <T> Type Parameters Name Description T ReadonlyIndexedCollection.isReadonlyIndexedCollection(value) Tests whether a value supports the minimal representation of a ReadonlyIndexedCollection <!-- --> . Declaration function isReadonlyIndexedCollection(value: unknown): value is ReadonlyIndexedCollection<unknown>; Parameters value unknown Returns value is ReadonlyIndexedCollection <unknown>"
  },
  "api/async-waitqueue/waitqueue_class.html": {
    "href": "api/async-waitqueue/waitqueue_class.html",
    "title": "Class WaitQueue | @esfx API Reference",
    "keywords": "Class WaitQueue An async coordination primitive that provides a queue of Promises. Properties size Gets the number of pending entries in the queue. Declaration readonly size: number; Property Value number Methods cancelAll() Rejects all pending wait() operations with a CancelError <!-- --> . Declaration cancelAll(): number; Returns number The number of pending wait() operations that were rejected. cancelOne() Rejects the next pending wait() operation with a CancelError <!-- --> . Declaration cancelOne(): boolean; Returns boolean true if a pending wait() operation was rejected; otherwise, false <!-- --> . rejectAll(reason) Rejects all pending wait() operations with the provided reason. Declaration rejectAll(reason: unknown): number; Parameters reason unknown Returns number The number of pending wait() operations that were rejected. rejectOne(reason) Rejects the next pending wait() operation with the provided reason. Declaration rejectOne(reason: unknown): boolean; Parameters reason unknown Returns boolean true if a pending wait() operation was rejected; otherwise, false <!-- --> . resolveAll(this) Resolves all pending wait() operations with the provided value. Declaration resolveAll(this: WaitQueue<void>): number; Parameters this WaitQueue <void> Returns number The number of pending wait() operations that were resolved. resolveAll(value) Resolves all pending wait() operations with the provided value. Declaration resolveAll(value: T | PromiseLike<T>): number; Parameters value T | PromiseLike <T> Returns number The number of pending wait() operations that were resolved. resolveOne(this) Resolves a pending wait() operation with the provided value. Declaration resolveOne(this: WaitQueue<void>): boolean; Parameters this WaitQueue <void> Returns boolean true if a pending wait() operation was resolved; otherwise, false <!-- --> . resolveOne(value) Resolves a pending wait() operation with the provided value. Declaration resolveOne(value: T | PromiseLike<T>): boolean; Parameters value T | PromiseLike <T> Returns boolean true if a pending wait() operation was resolved; otherwise, false <!-- --> . wait(cancelable) Returns a Promise for the next value to be added to the queue. Declaration wait(cancelable?: Cancelable): Promise<T>; Parameters cancelable Cancelable Returns Promise <T>"
  },
  "api/async-delay.html": {
    "href": "api/async-delay.html",
    "title": "Package @esfx/async-delay | @esfx API Reference",
    "keywords": "Package @esfx/async-delay Functions delay(msec) Waits the specified number of milliseconds before resolving. Declaration export declare function delay(msec: number): Promise<void>; Parameters msec number Returns Promise <void> delay(msec, value) Waits the specified number of milliseconds before resolving with the provided value. Declaration export declare function delay<T>(msec: number, value: T | PromiseLike<T>): Promise<T>; Parameters msec number value T | PromiseLike <T> Returns Promise <T> Type Parameters Name Description T delay(cancelable, msec) Waits the specified number of milliseconds before resolving. Declaration export declare function delay(cancelable: Cancelable, msec: number): Promise<void>; Parameters cancelable Cancelable msec number Returns Promise <void> delay(cancelable, msec, value) Waits the specified number of milliseconds before resolving with the provided value. Declaration export declare function delay<T>(cancelable: Cancelable, msec: number, value: T | PromiseLike<T>): Promise<T>; Parameters cancelable Cancelable msec number value T | PromiseLike <T> Returns Promise <T> Type Parameters Name Description T"
  },
  "api/async-readerwriterlock/asyncreaderwriterlockreader_interface.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlockreader_interface.html",
    "title": "Interface AsyncReaderWriterLockReader | @esfx API Reference",
    "keywords": "Interface AsyncReaderWriterLockReader Properties owner Gets the AsyncReaderWriterLock that owns this object. Declaration readonly owner: AsyncReaderWriterLock; Property Value AsyncReaderWriterLock"
  },
  "api/async-queue/asyncqueue_class.html": {
    "href": "api/async-queue/asyncqueue_class.html",
    "title": "Class AsyncQueue | @esfx API Reference",
    "keywords": "Class AsyncQueue An asynchronous queue. Constructors (constructor)(iterable) Initializes a new instance of the AsyncQueue class. Declaration constructor(iterable?: Iterable<T | PromiseLike<T>>); Parameters iterable Iterable <T | PromiseLike <T>> Properties done Gets a value indicating whether the queue has ended and there are no more items available. Declaration readonly done: boolean; Property Value boolean readable Gets a value indicating whether items can be read from the queue. Declaration readonly readable: boolean; Property Value boolean size Gets the number of entries in the queue. When positive, indicates the number of entries available to get. When negative, indicates the number of requests waiting to be fulfilled. Declaration readonly size: number; Property Value number writable Gets a value indicating whether new items can be added to the queue. Declaration readonly writable: boolean; Property Value boolean Methods doneReading() Blocks attempts to read from the queue until it is empty. Available items in the queue can still be read until the queue is empty. Declaration doneReading(): void; Returns void doneWriting() Blocks attempts to write to the queue. Pending requests in the queue can still be resolved until the queue is empty. Declaration doneWriting(): void; Returns void end() Blocks future attempts to read or write from the queue. Available items in the queue can still be read until the queue is empty. Pending reads from the queue are rejected with a CancelError <!-- --> . Declaration end(): void; Returns void get(cancelable) Removes and returns a Promise for the first value in the queue. If the queue is empty, returns a Promise for the next value to be added to the queue. Declaration get(cancelable?: Cancelable): Promise<T>; Parameters cancelable Cancelable Returns Promise <T> put(this) Adds a value to the end of the queue. If the queue is empty but has a pending dequeue request, the value will be dequeued and the request fulfilled. Declaration put(this: AsyncQueue<void>): void; Parameters this AsyncQueue <void> Returns void put(value) Adds a value to the end of the queue. If the queue is empty but has a pending dequeue request, the value will be dequeued and the request fulfilled. Declaration put(value: T | PromiseLike<T>): void; Parameters value T | PromiseLike <T> Returns void"
  },
  "api/async-lazy/asynclazy_class.html": {
    "href": "api/async-lazy/asynclazy_class.html",
    "title": "Class AsyncLazy | @esfx API Reference",
    "keywords": "Class AsyncLazy A lazy-initialized asynchronous value. Constructors (constructor)(factory) Constructs a new instance of the AsyncLazy class Declaration constructor(factory: () => T | PromiseLike<T>); Parameters factory () => T | PromiseLike <T> Properties isStarted Declaration readonly isStarted: boolean; Property Value boolean value Declaration readonly value: Promise<T>; Property Value Promise <T> Methods for(value) Declaration static for<T>(value: T | PromiseLike<T>): AsyncLazy<T>; Parameters value T | PromiseLike <T> Returns AsyncLazy <T> Type Parameters Name Description T from(factory, args) Declaration static from<T, A extends any[]>(factory: (...args: A) => T | PromiseLike<T>, ...args: A): AsyncLazy<T>; Parameters factory (...args: A) => T | PromiseLike <T> args A Returns AsyncLazy <T> Type Parameters Name Description T A"
  },
  "api/async-deferred/deferred_class.html": {
    "href": "api/async-deferred/deferred_class.html",
    "title": "Class Deferred | @esfx API Reference",
    "keywords": "Class Deferred Encapsulates a Promise and exposes its resolve and reject callbacks. Constructors (constructor)() Initializes a new instance of the Deferred class. Declaration constructor(); Properties callback Gets a NodeJS-style callback that can be used to resolve or reject the promise. Declaration readonly callback: T extends void ? (err: Error | null | undefined) => void : (err: Error | null | undefined, value: T) => void; Property Value T extends void ? (err: Error | null | undefined) => void : (err: Error | null | undefined, value: T) => void promise Gets the promise. Declaration readonly promise: Promise<T>; Property Value Promise <T> reject Gets the callback used to reject the promise. Declaration readonly reject: (reason: any) => void; Property Value (reason: any) => void resolve Gets the callback used to resolve the promise. Declaration readonly resolve: (value?: T | PromiseLike<T> | undefined) => void; Property Value (value?: T | PromiseLike <T> | undefined) => void Methods createCallback(selector) Creates a NodeJS-style callback that can be used to resolve or reject the promise with multiple values. Declaration createCallback<A extends any[]>(selector: (...args: A) => T): (err: Error | null | undefined, ...args: A) => void; Parameters selector (...args: A) => T Returns (err: Error | null | undefined, ...args: A) => void Type Parameters Name Description A"
  },
  "api/threading.html": {
    "href": "api/threading.html",
    "title": "Package @esfx/threading | @esfx API Reference",
    "keywords": "Package @esfx/threading"
  },
  "api/threading-manualresetevent.html": {
    "href": "api/threading-manualresetevent.html",
    "title": "Package @esfx/threading-manualresetevent | @esfx API Reference",
    "keywords": "Package @esfx/threading-manualresetevent"
  },
  "api/threading-lockable.html": {
    "href": "api/threading-lockable.html",
    "title": "Package @esfx/threading-lockable | @esfx API Reference",
    "keywords": "Package @esfx/threading-lockable"
  },
  "api/reflect-metadata-compat.html": {
    "href": "api/reflect-metadata-compat.html",
    "title": "Package @esfx/reflect-metadata-compat | @esfx API Reference",
    "keywords": "Package @esfx/reflect-metadata-compat"
  },
  "api/ref.html": {
    "href": "api/ref.html",
    "title": "Package @esfx/ref | @esfx API Reference",
    "keywords": "Package @esfx/ref Functions ref(get, set) Create a reference to a value in the current lexical scope. Declaration export declare function ref<T>(get: () => T, set?: (value: T) => void): Reference<T>; Parameters get () => T set (value: T) => void Returns Reference <T> Type Parameters Name Description T"
  },
  "api/metadata-shim.html": {
    "href": "api/metadata-shim.html",
    "title": "Package @esfx/metadata-shim | @esfx API Reference",
    "keywords": "Package @esfx/metadata-shim"
  },
  "api/events.html": {
    "href": "api/events.html",
    "title": "Package @esfx/events | @esfx API Reference",
    "keywords": "Package @esfx/events"
  },
  "api/equatable-shim.html": {
    "href": "api/equatable-shim.html",
    "title": "Package @esfx/equatable-shim | @esfx API Reference",
    "keywords": "Package @esfx/equatable-shim"
  },
  "api/collections.html": {
    "href": "api/collections.html",
    "title": "Package @esfx/collections | @esfx API Reference",
    "keywords": "Package @esfx/collections"
  },
  "api/collections-sortedmap.html": {
    "href": "api/collections-sortedmap.html",
    "title": "Package @esfx/collections-sortedmap | @esfx API Reference",
    "keywords": "Package @esfx/collections-sortedmap"
  },
  "api/async-manualresetevent.html": {
    "href": "api/async-manualresetevent.html",
    "title": "Package @esfx/async-manualresetevent | @esfx API Reference",
    "keywords": "Package @esfx/async-manualresetevent"
  },
  "api/async-conditionvariable.html": {
    "href": "api/async-conditionvariable.html",
    "title": "Package @esfx/async-conditionvariable | @esfx API Reference",
    "keywords": "Package @esfx/async-conditionvariable"
  },
  "api/type-model.html": {
    "href": "api/type-model.html",
    "title": "Package @esfx/type-model | @esfx API Reference",
    "keywords": "Package @esfx/type-model"
  },
  "api/threading-spinwait/spinwait_class.html": {
    "href": "api/threading-spinwait/spinwait_class.html",
    "title": "Class SpinWait | @esfx API Reference",
    "keywords": "Class SpinWait Methods reset() Declaration reset(): void; Returns void spinOnce() Declaration spinOnce(): void; Returns void spinUntil(condition, ms) Declaration spinUntil(condition: () => boolean, ms?: number): boolean; Parameters condition () => boolean ms number Returns boolean"
  },
  "api/threading-semaphore/semaphore_class.html": {
    "href": "api/threading-semaphore/semaphore_class.html",
    "title": "Class Semaphore | @esfx API Reference",
    "keywords": "Class Semaphore Constructors (constructor)(initialCount, maxCount) Constructs a new instance of the Semaphore class Declaration constructor(initialCount: number, maxCount?: number); Parameters initialCount number maxCount number (constructor)(buffer, byteOffset) Constructs a new instance of the Semaphore class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Declaration readonly buffer: SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Declaration readonly byteLength: number; Property Value number byteOffset Declaration readonly byteOffset: number; Property Value number count Declaration readonly count: number; Property Value number SIZE Declaration static readonly SIZE = 16; Methods release(count) Declaration release(count?: number): number; Parameters count number Returns number wait(ms) Declaration wait(ms?: number): boolean; Parameters ms number Returns boolean"
  },
  "api/collection-core/indexedcollection_interface.html": {
    "href": "api/collection-core/indexedcollection_interface.html",
    "title": "Interface IndexedCollection | @esfx API Reference",
    "keywords": "Interface IndexedCollection Methods [IndexedCollection.insertAt](index, value) Inserts a value at the specified index in the collection, shifting any following elements to the right one position. Declaration [IndexedCollection.insertAt](index: number, value: T): void; Parameters index number value T Returns void [IndexedCollection.removeAt](index) Removes the value at the specified index in the collection, shifting any following elements to the left one position. Declaration [IndexedCollection.removeAt](index: number): void; Parameters index number Returns void"
  },
  "api/cancelable/cancelable_namespace.html": {
    "href": "api/cancelable/cancelable_namespace.html",
    "title": "Namespace Cancelable | @esfx API Reference",
    "keywords": "Namespace Cancelable Functions Cancelable.hasInstance(value) Determines whether a value is a Cancelable object. Declaration function hasInstance(value: unknown): value is Cancelable; Parameters value unknown Returns value is Cancelable Cancelable.isCancelable(value) Determines whether a value is a Cancelable object. Declaration function isCancelable(value: unknown): value is Cancelable; Parameters value unknown Returns value is Cancelable Cancelable.isSignaled(cancelable) Determines whether cancelable is in the signaled state. Declaration function isSignaled(cancelable: Cancelable | undefined): boolean; Parameters cancelable Cancelable | undefined Returns boolean Cancelable.subscribe(cancelable, onSignaled) Subscribes to be notified when a cancelable becomes signaled. Declaration function subscribe(cancelable: Cancelable | undefined, onSignaled: () => void): CancelSubscription; Parameters cancelable Cancelable | undefined onSignaled () => void Returns CancelSubscription Cancelable.throwIfSignaled(cancelable) Throws a CancelError exception if the provided cancelable is in the signaled state. Declaration function throwIfSignaled(cancelable: Cancelable | undefined): void; Parameters cancelable Cancelable | undefined Returns void"
  },
  "api/cancelable/cancelable_interface.html": {
    "href": "api/cancelable/cancelable_interface.html",
    "title": "Interface Cancelable | @esfx API Reference",
    "keywords": "Interface Cancelable An object that can be canceled from an external source. Methods [Cancelable.cancelSignal]() Gets the [[CancelSignal]] for this [[Cancelable]]. Declaration [Cancelable.cancelSignal](): CancelSignal; Returns CancelSignal"
  },
  "api/async-stack/asyncstack_class.html": {
    "href": "api/async-stack/asyncstack_class.html",
    "title": "Class AsyncStack | @esfx API Reference",
    "keywords": "Class AsyncStack An asynchronous Stack. Constructors (constructor)(iterable) Initializes a new instance of the AsyncStack class. Declaration constructor(iterable?: Iterable<T | PromiseLike<T>>); Parameters iterable Iterable <T | PromiseLike <T>> Properties done Gets a value indicating whether the stack has ended and there are no more items available. Declaration readonly done: boolean; Property Value boolean readable Gets a value indicating whether items can be read from the stack. Declaration readonly readable: boolean; Property Value boolean size Gets the number of entries in the stack. When positive, indicates the number of entries available to get. When negative, indicates the number of requests waiting to be fulfilled. Declaration readonly size: number; Property Value number writable Gets a value indicating whether new items can be added to the stack. Declaration readonly writable: boolean; Property Value boolean Methods doneReading() Blocks attempts to read from the stack until it is empty. Available items in the stack can still be read until the stack is empty. Declaration doneReading(): void; Returns void doneWriting() Blocks attempts to write to the stack. Pending requests in the stack can still be resolved until the stack is empty. Declaration doneWriting(): void; Returns void end() Blocks future attempts to read or write from the stack. Available items in the stack can still be read until the stack is empty. Pending reads from the stack are rejected with a CancelError <!-- --> . Declaration end(): void; Returns void pop(cancelable) Removes and returns a Promise for the top value of the stack. If the stack is empty, returns a Promise for the next value to be pushed on to the stack. Declaration pop(cancelable?: Cancelable): Promise<T>; Parameters cancelable Cancelable Returns Promise <T> push(this) Adds a value to the top of the stack. If the stack is empty but has a pending pop request, the value will be popped and the request fulfilled. Declaration push(this: AsyncStack<void>): void; Parameters this AsyncStack <void> Returns void push(value) Adds a value to the top of the stack. If the stack is empty but has a pending pop request, the value will be popped and the request fulfilled. Declaration push(value: T | PromiseLike<T>): void; Parameters value T | PromiseLike <T> Returns void"
  },
  "api/struct-type/structtype_interface.html": {
    "href": "api/struct-type/structtype_interface.html",
    "title": "Interface StructType | @esfx API Reference",
    "keywords": "Interface StructType Properties [kFields] Declaration [kFields]: TDef; Property Value TDef SIZE Declaration readonly SIZE: number; Property Value number"
  },
  "api/events/event_interface.html": {
    "href": "api/events/event_interface.html",
    "title": "Interface Event | @esfx API Reference",
    "keywords": "Interface Event"
  },
  "api/events/event_class.html": {
    "href": "api/events/event_class.html",
    "title": "Class Event | @esfx API Reference",
    "keywords": "Class Event Properties count Declaration readonly count: number; Property Value number owner Declaration readonly owner: ThisParameterType<F>; Property Value ThisParameterType <F> Methods addListener(listener) Declaration addListener(listener: EventListener<F>): ThisParameterType<F>; Parameters listener EventListener <F> Returns ThisParameterType <F> create() Declaration static create<F extends (this: undefined, ...args: any[]) => void>(): EventSource<F>; Returns EventSource <F> Type Parameters Name Description F create(owner) Declaration static create<F extends (...args: any[]) => void>(owner: ThisParameterType<F>): EventSource<F>; Parameters owner ThisParameterType <F> Returns EventSource <F> Type Parameters Name Description F listeners() Declaration listeners(): IterableIterator<EventListener<F>>; Returns IterableIterator < EventListener <F>> off(listener) Declaration off(listener: EventListener<F>): ThisParameterType<F>; Parameters listener EventListener <F> Returns ThisParameterType <F> on(listener) Declaration on(listener: EventListener<F>): ThisParameterType<F>; Parameters listener EventListener <F> Returns ThisParameterType <F> once(listener) Declaration once(listener: EventListener<F>): ThisParameterType<F>; Parameters listener EventListener <F> Returns ThisParameterType <F> prependListener(listener) Declaration prependListener(listener: EventListener<F>): ThisParameterType<F>; Parameters listener EventListener <F> Returns ThisParameterType <F> prependOnceListener(listener) Declaration prependOnceListener(listener: EventListener<F>): ThisParameterType<F>; Parameters listener EventListener <F> Returns ThisParameterType <F> rawListeners() Declaration rawListeners(): IterableIterator<EventListener<F>>; Returns IterableIterator < EventListener <F>> removeAllListeners() Declaration removeAllListeners(): ThisParameterType<F>; Returns ThisParameterType <F> removeListener(listener) Declaration removeListener(listener: EventListener<F>): ThisParameterType<F>; Parameters listener EventListener <F> Returns ThisParameterType <F>"
  },
  "api/collection-core/readonlykeyedcollection_interface.html": {
    "href": "api/collection-core/readonlykeyedcollection_interface.html",
    "title": "Interface ReadonlyKeyedCollection | @esfx API Reference",
    "keywords": "Interface ReadonlyKeyedCollection Properties [ReadonlyKeyedCollection.size] Gets the number of elements in the collection. Declaration readonly [ReadonlyKeyedCollection.size]: number; Property Value number Methods [ReadonlyKeyedCollection.get](key) Gets the value in the collection associated with the provided key, if it exists. Declaration [ReadonlyKeyedCollection.get](key: K): V | undefined; Parameters key K Returns V | undefined [ReadonlyKeyedCollection.has](key) Tests whether a key is present in the collection. Declaration [ReadonlyKeyedCollection.has](key: K): boolean; Parameters key K Returns boolean [ReadonlyKeyedCollection.keys]() Gets an IterableIterator for the keys present in the collection. Declaration [ReadonlyKeyedCollection.keys](): IterableIterator<K>; Returns IterableIterator <K> [ReadonlyKeyedCollection.values]() Gets an IterableIterator for the values present in the collection. Declaration [ReadonlyKeyedCollection.values](): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collection-core/fixedsizeindexedcollection_namespace.html": {
    "href": "api/collection-core/fixedsizeindexedcollection_namespace.html",
    "title": "Namespace FixedSizeIndexedCollection | @esfx API Reference",
    "keywords": "Namespace FixedSizeIndexedCollection Functions FixedSizeIndexedCollection.hasInstance(value) Tests whether a value supports the minimal representation of a FixedSizeIndexedCollection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is FixedSizeIndexedCollection<T>; Parameters value Iterable <T> Returns value is FixedSizeIndexedCollection <T> Type Parameters Name Description T FixedSizeIndexedCollection.hasInstance(value) Tests whether a value supports the minimal representation of a FixedSizeIndexedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is FixedSizeIndexedCollection<unknown>; Parameters value unknown Returns value is FixedSizeIndexedCollection <unknown> FixedSizeIndexedCollection.isFixedSizeIndexedCollection(value) Tests whether a value supports the minimal representation of a FixedSizeIndexedCollection <!-- --> . Declaration function isFixedSizeIndexedCollection<T>(value: Iterable<T>): value is FixedSizeIndexedCollection<T>; Parameters value Iterable <T> Returns value is FixedSizeIndexedCollection <T> Type Parameters Name Description T FixedSizeIndexedCollection.isFixedSizeIndexedCollection(value) Tests whether a value supports the minimal representation of a FixedSizeIndexedCollection <!-- --> . Declaration function isFixedSizeIndexedCollection(value: unknown): value is FixedSizeIndexedCollection<unknown>; Parameters value unknown Returns value is FixedSizeIndexedCollection <unknown>"
  },
  "api/collection-core/fixedsizeindexedcollection_interface.html": {
    "href": "api/collection-core/fixedsizeindexedcollection_interface.html",
    "title": "Interface FixedSizeIndexedCollection | @esfx API Reference",
    "keywords": "Interface FixedSizeIndexedCollection Methods [FixedSizeIndexedCollection.setAt](index, value) Sets a value at the specified index in the collection. Declaration [FixedSizeIndexedCollection.setAt](index: number, value: T): boolean; Parameters index number value T Returns boolean true if the value was set at the provided index, otherwise false <!-- --> ."
  },
  "api/collection-core/collection_namespace.html": {
    "href": "api/collection-core/collection_namespace.html",
    "title": "Namespace Collection | @esfx API Reference",
    "keywords": "Namespace Collection Functions Collection.hasInstance(value) Tests whether a value supports the minimal representation of a Collection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is Collection<T>; Parameters value Iterable <T> Returns value is Collection <T> Type Parameters Name Description T Collection.hasInstance(value) Tests whether a value supports the minimal representation of a Collection <!-- --> . Declaration function hasInstance(value: any): value is Collection<unknown>; Parameters value any Returns value is Collection <unknown> Collection.isCollection(value) Tests whether a value supports the minimal representation of a Collection <!-- --> . Declaration function isCollection<T>(value: Iterable<T>): value is Collection<T>; Parameters value Iterable <T> Returns value is Collection <T> Type Parameters Name Description T Collection.isCollection(value) Tests whether a value supports the minimal representation of a Collection <!-- --> . Declaration function isCollection(value: any): value is Collection<unknown>; Parameters value any Returns value is Collection <unknown>"
  },
  "api/async-readerwriterlock/asyncreaderwriterlockupgradeablereader_interface.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlockupgradeablereader_interface.html",
    "title": "Interface AsyncReaderWriterLockUpgradeableReader | @esfx API Reference",
    "keywords": "Interface AsyncReaderWriterLockUpgradeableReader Properties owner Gets the AsyncReaderWriterLock that owns this object. Declaration readonly owner: AsyncReaderWriterLock; Property Value AsyncReaderWriterLock Methods createWriter() Creates a AsyncReaderWriterLockUpgradedWriter that can be used to take and release \"write\" locks on a resource. Declaration createWriter(): AsyncReaderWriterLockUpgradedWriter; Returns AsyncReaderWriterLockUpgradedWriter upgrade(cancelable) Asynchronously waits for and takes a write lock on a resource. Declaration upgrade(cancelable?: Cancelable): Promise<AsyncReaderWriterLockUpgradedWriter>; Parameters cancelable Cancelable Returns Promise < AsyncReaderWriterLockUpgradedWriter >"
  },
  "api/async-lockable/asynclockable_namespace.html": {
    "href": "api/async-lockable/asynclockable_namespace.html",
    "title": "Namespace AsyncLockable | @esfx API Reference",
    "keywords": "Namespace AsyncLockable Functions AsyncLockable.hasInstance(value) Determines whether a value is AsyncLockable <!-- --> . Declaration function hasInstance(value: unknown): value is AsyncLockable; Parameters value unknown Returns value is AsyncLockable AsyncLockable.isAsyncLockable(value) Determines whether a value is AsyncLockable <!-- --> . Declaration function isAsyncLockable(value: unknown): value is AsyncLockable; Parameters value unknown Returns value is AsyncLockable"
  },
  "api/equatable/structuralcomparable_interface.html": {
    "href": "api/equatable/structuralcomparable_interface.html",
    "title": "Interface StructuralComparable | @esfx API Reference",
    "keywords": "Interface StructuralComparable Represents a value that can compare its structure relationally with another value. Methods [StructuralComparable.structuralCompareTo](other, comparer) Compares the structure of this value with another value using the supplied comparer: - A negative value indicates this value is lesser. - A positive value indicates this value is greater. - A zero value indicates this value is the same. Declaration [StructuralComparable.structuralCompareTo](other: unknown, comparer: Comparer<unknown>): number; Parameters other unknown comparer Comparer <unknown> Returns number"
  },
  "api/equatable/equatable_namespace.html": {
    "href": "api/equatable/equatable_namespace.html",
    "title": "Namespace Equatable | @esfx API Reference",
    "keywords": "Namespace Equatable Functions Equatable.hasInstance(value) Determines whether a value is Equatable. Declaration function hasInstance(value: unknown): value is Equatable; Parameters value unknown Returns value is Equatable Equatable.isEquatable(value) Determines whether a value is Equatable. Declaration function isEquatable(value: unknown): value is Equatable; Parameters value unknown Returns value is Equatable"
  },
  "api/cancelable/cancelerror_class.html": {
    "href": "api/cancelable/cancelerror_class.html",
    "title": "Class CancelError | @esfx API Reference",
    "keywords": "Class CancelError Constructors (constructor)(message) Constructs a new instance of the CancelError class Declaration constructor(message?: string); Parameters message string"
  },
  "api/cancelable/cancelablecancelsignal_interface.html": {
    "href": "api/cancelable/cancelablecancelsignal_interface.html",
    "title": "Interface CancelableCancelSignal | @esfx API Reference",
    "keywords": "Interface CancelableCancelSignal Methods [Cancelable.cancelSignal]() Declaration [Cancelable.cancelSignal](): CancelableCancelSignal; Returns CancelableCancelSignal"
  },
  "api/async-mutex/asyncmutex_class.html": {
    "href": "api/async-mutex/asyncmutex_class.html",
    "title": "Class AsyncMutex | @esfx API Reference",
    "keywords": "Class AsyncMutex An async coordination primitive used to coordinate access to a protected resource. Properties isLocked Indicates whether the lock has been taken. Declaration readonly isLocked: boolean; Property Value boolean Methods [AsyncLockable.lock](cancelable) Declaration [AsyncLockable.lock](cancelable?: Cancelable): Promise<LockHandle<AsyncMutex>>; Parameters cancelable Cancelable Returns Promise < LockHandle < AsyncMutex >> [AsyncLockable.unlock]() Declaration [AsyncLockable.unlock](): void; Returns void lock(cancelable) Asynchronously waits for the lock to become available and then takes the lock. Declaration lock(cancelable?: Cancelable): Promise<LockHandle<AsyncMutex>>; Parameters cancelable Cancelable Returns Promise < LockHandle < AsyncMutex >> tryLock() Synchronously tries to take a lock. Declaration tryLock(): boolean; Returns boolean unlock() Releases the lock. Declaration unlock(): boolean; Returns boolean"
  },
  "api/cancelable-dom.html": {
    "href": "api/cancelable-dom.html",
    "title": "Package @esfx/cancelable-dom | @esfx API Reference",
    "keywords": "Package @esfx/cancelable-dom Functions toAbortSignal(cancelable) Declaration export declare function toAbortSignal(cancelable: Cancelable): AbortSignal; Parameters cancelable Cancelable Returns AbortSignal"
  },
  "api/async-autoresetevent.html": {
    "href": "api/async-autoresetevent.html",
    "title": "Package @esfx/async-autoresetevent | @esfx API Reference",
    "keywords": "Package @esfx/async-autoresetevent"
  },
  "api/collections-linkedlist/linkedlist_class.html": {
    "href": "api/collections-linkedlist/linkedlist_class.html",
    "title": "Class LinkedList | @esfx API Reference",
    "keywords": "Class LinkedList Constructors (constructor)(equaler) Constructs a new instance of the LinkedList class Declaration constructor(equaler?: EqualityComparison<T> | Equaler<T>); Parameters equaler EqualityComparison <T> | Equaler <T> (constructor)(iterable, equaler) Constructs a new instance of the LinkedList class Declaration constructor(iterable?: Iterable<T>, equaler?: EqualityComparison<T> | Equaler<T>); Parameters iterable Iterable <T> equaler EqualityComparison <T> | Equaler <T> Properties [ReadonlyCollection.size] Declaration readonly [ReadonlyCollection.size]: number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string equaler Declaration readonly equaler: Equaler<T>; Property Value Equaler <T> first Declaration readonly first: LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined last Declaration readonly last: LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined size Declaration readonly size: number; Property Value number Methods [Collection.add](value) Declaration [Collection.add](value: T): void; Parameters value T Returns void [Collection.clear]() Declaration [Collection.clear](): void; Returns void [Collection.delete](value) Declaration [Collection.delete](value: T): boolean; Parameters value T Returns boolean [ReadonlyCollection.has](value) Declaration [ReadonlyCollection.has](value: T): boolean; Parameters value T Returns boolean [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T> clear() Declaration clear(): void; Returns void delete(value) Declaration delete(value: T): LinkedListNode<T> | undefined; Parameters value T Returns LinkedListNode <T> | undefined deleteAll(predicate, thisArg) Declaration deleteAll(predicate: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): number; Parameters predicate (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns number deleteNode(node) Declaration deleteNode(node: LinkedListNode<T> | null | undefined): boolean; Parameters node LinkedListNode <T> | null | undefined Returns boolean drain() Declaration drain(): IterableIterator<T>; Returns IterableIterator <T> every(callback, thisArg) Declaration every(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): boolean; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns boolean filter(callback, thisArg) Declaration filter<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): LinkedList<S>; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S thisArg any Returns LinkedList <S> Type Parameters Name Description S filter(callback, thisArg) Declaration filter(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): LinkedList<T>; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns LinkedList <T> find(callback, thisArg) Declaration find<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): S | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S thisArg any Returns S | undefined Type Parameters Name Description S find(callback, thisArg) Declaration find(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): T | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns T | undefined findLast(callback, thisArg) Declaration findLast<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): S | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S thisArg any Returns S | undefined Type Parameters Name Description S findLast(callback, thisArg) Declaration findLast(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): T | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns T | undefined findLastNode(callback, thisArg) Declaration findLastNode<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): LinkedListNode<S> | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S thisArg any Returns LinkedListNode <S> | undefined Type Parameters Name Description S findLastNode(callback, thisArg) Declaration findLastNode(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): LinkedListNode<T> | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns LinkedListNode <T> | undefined findNode(callback, thisArg) Declaration findNode<S extends T>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => value is S, thisArg?: any): LinkedListNode<S> | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => value is S thisArg any Returns LinkedListNode <S> | undefined Type Parameters Name Description S findNode(callback, thisArg) Declaration findNode(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): LinkedListNode<T> | undefined; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns LinkedListNode <T> | undefined forEach(callback, thisArg) Declaration forEach(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => void, thisArg?: any): void; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => void thisArg any Returns void has(value) Declaration has(value: T): boolean; Parameters value T Returns boolean insertAfter(node, value) Declaration insertAfter(node: LinkedListNode<T> | null | undefined, value: T): LinkedListNode<T>; Parameters node LinkedListNode <T> | null | undefined value T Returns LinkedListNode <T> insertBefore(node, value) Declaration insertBefore(node: LinkedListNode<T> | null | undefined, value: T): LinkedListNode<T>; Parameters node LinkedListNode <T> | null | undefined value T Returns LinkedListNode <T> insertNodeAfter(node, newNode) Declaration insertNodeAfter(node: LinkedListNode<T> | null | undefined, newNode: LinkedListNode<T>): void; Parameters node LinkedListNode <T> | null | undefined newNode LinkedListNode <T> Returns void insertNodeBefore(node, newNode) Declaration insertNodeBefore(node: LinkedListNode<T> | null | undefined, newNode: LinkedListNode<T>): void; Parameters node LinkedListNode <T> | null | undefined newNode LinkedListNode <T> Returns void lastNodeOf(value, fromNode) Declaration lastNodeOf(value: T, fromNode?: LinkedListNode<T>): LinkedListNode<T> | undefined; Parameters value T fromNode LinkedListNode <T> Returns LinkedListNode <T> | undefined map(callback, thisArg) Declaration map<U>(callback: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => U, thisArg?: any): LinkedList<U>; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => U thisArg any Returns LinkedList <U> Type Parameters Name Description U nodeOf(value, fromNode) Declaration nodeOf(value: T, fromNode?: LinkedListNode<T>): LinkedListNode<T> | undefined; Parameters value T fromNode LinkedListNode <T> Returns LinkedListNode <T> | undefined nodes() Declaration nodes(): IterableIterator<LinkedListNode<T>>; Returns IterableIterator < LinkedListNode <T>> pop() Declaration pop(): T | undefined; Returns T | undefined popNode() Declaration popNode(): LinkedListNode<T> | undefined; Returns LinkedListNode <T> | undefined push(value) Declaration push(value: T): LinkedListNode<T>; Parameters value T Returns LinkedListNode <T> pushNode(newNode) Declaration pushNode(newNode: LinkedListNode<T>): void; Parameters newNode LinkedListNode <T> Returns void reduce(callback) Declaration reduce(callback: (previousValue: T, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => T): T; Parameters callback (previousValue: T, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => T Returns T reduce(callback, initialValue) Declaration reduce(callback: (previousValue: T, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => T, initialValue: T): T; Parameters callback (previousValue: T, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => T initialValue T Returns T reduce(callback, initialValue) Declaration reduce<U>(callback: (previousValue: U, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => U, initialValue: U): U; Parameters callback (previousValue: U, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => U initialValue U Returns U Type Parameters Name Description U reduceRight(callback) Declaration reduceRight(callback: (previousValue: T, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => T): T; Parameters callback (previousValue: T, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => T Returns T reduceRight(callback, initialValue) Declaration reduceRight(callback: (previousValue: T, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => T, initialValue: T): T; Parameters callback (previousValue: T, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => T initialValue T Returns T reduceRight(callback, initialValue) Declaration reduceRight<U>(callback: (previousValue: U, value: T, node: LinkedListNode<T>, list: LinkedList<T>) => U, initialValue: U): U; Parameters callback (previousValue: U, value: T, node: LinkedListNode <T>, list: LinkedList <T>) => U initialValue U Returns U Type Parameters Name Description U shift() Declaration shift(): T | undefined; Returns T | undefined shiftNode() Declaration shiftNode(): LinkedListNode<T> | undefined; Returns LinkedListNode <T> | undefined some(callback, thisArg) Declaration some(callback?: (value: T, node: LinkedListNode<T>, list: LinkedList<T>) => boolean, thisArg?: any): boolean; Parameters callback (value: T, node: LinkedListNode <T>, list: LinkedList <T>) => boolean thisArg any Returns boolean unshift(value) Declaration unshift(value: T): LinkedListNode<T>; Parameters value T Returns LinkedListNode <T> unshiftNode(newNode) Declaration unshiftNode(newNode: LinkedListNode<T>): void; Parameters newNode LinkedListNode <T> Returns void values() Declaration values(): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/collections-linkedlist/linkedlistnode_class.html": {
    "href": "api/collections-linkedlist/linkedlistnode_class.html",
    "title": "Class LinkedListNode | @esfx API Reference",
    "keywords": "Class LinkedListNode Constructors (constructor)(value) Constructs a new instance of the LinkedListNode class Declaration constructor(value: T); Parameters value T Properties [kList] Declaration [kList]: LinkedList<T> | undefined; Property Value LinkedList <T> | undefined [kNext] Declaration [kNext]: LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined [kPrevious] Declaration [kPrevious]: LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string list Declaration readonly list: LinkedList<T> | undefined; Property Value LinkedList <T> | undefined next Declaration readonly next: LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined previous Declaration readonly previous: LinkedListNode<T> | undefined; Property Value LinkedListNode <T> | undefined value Declaration value: T; Property Value T Methods detachSelf() Declaration detachSelf(): boolean; Returns boolean"
  },
  "api/collection-core/keyedmulticollection_namespace.html": {
    "href": "api/collection-core/keyedmulticollection_namespace.html",
    "title": "Namespace KeyedMultiCollection | @esfx API Reference",
    "keywords": "Namespace KeyedMultiCollection Functions KeyedMultiCollection.hasInstance(value) Tests whether a value supports the minimal representation of a KeyedMultiCollection <!-- --> . Declaration function hasInstance<K, V>(value: Iterable<[K, V]>): value is KeyedMultiCollection<K, V>; Parameters value Iterable <[K, V]> Returns value is KeyedMultiCollection <K, V> Type Parameters Name Description K V KeyedMultiCollection.hasInstance(value) Tests whether a value supports the minimal representation of a KeyedMultiCollection <!-- --> . Declaration function hasInstance(value: unknown): value is KeyedMultiCollection<unknown, unknown>; Parameters value unknown Returns value is KeyedMultiCollection <unknown, unknown> KeyedMultiCollection.isKeyedMultiCollection(value) Tests whether a value supports the minimal representation of a KeyedMultiCollection <!-- --> . Declaration function isKeyedMultiCollection<K, V>(value: Iterable<[K, V]>): value is KeyedMultiCollection<K, V>; Parameters value Iterable <[K, V]> Returns value is KeyedMultiCollection <K, V> Type Parameters Name Description K V KeyedMultiCollection.isKeyedMultiCollection(value) Tests whether a value supports the minimal representation of a KeyedMultiCollection <!-- --> . Declaration function isKeyedMultiCollection(value: unknown): value is KeyedMultiCollection<unknown, unknown>; Parameters value unknown Returns value is KeyedMultiCollection <unknown, unknown>"
  },
  "api/collection-core/keyedmulticollection_interface.html": {
    "href": "api/collection-core/keyedmulticollection_interface.html",
    "title": "Interface KeyedMultiCollection | @esfx API Reference",
    "keywords": "Interface KeyedMultiCollection Methods [KeyedMultiCollection.add](key, value) Adds a value to the collection for the provided key. Declaration [KeyedMultiCollection.add](key: K, value: V): void; Parameters key K value V Returns void [KeyedMultiCollection.clear]() Clears the collection. Declaration [KeyedMultiCollection.clear](): void; Returns void [KeyedMultiCollection.delete](key) Deletes a key and its associated values from the collection. Declaration [KeyedMultiCollection.delete](key: K): number; Parameters key K Returns number The number of values removed when the key was deleted. [KeyedMultiCollection.deleteValue](key, value) Deletes a key and its associated value from the collection. Declaration [KeyedMultiCollection.deleteValue](key: K, value: V): boolean; Parameters key K value V Returns boolean true if the key and value were found and removed; otherwise, false <!-- --> ."
  },
  "api/cancelable/cancelsubscription_namespace.html": {
    "href": "api/cancelable/cancelsubscription_namespace.html",
    "title": "Namespace CancelSubscription | @esfx API Reference",
    "keywords": "Namespace CancelSubscription Functions CancelSubscription.create(unsubscribe) Creates a CancelSubscription object for an unsubscribe callback. Declaration function create(unsubscribe: () => void): CancelSubscription; Parameters unsubscribe () => void Returns CancelSubscription"
  },
  "api/cancelable/cancelsubscription_interface.html": {
    "href": "api/cancelable/cancelsubscription_interface.html",
    "title": "Interface CancelSubscription | @esfx API Reference",
    "keywords": "Interface CancelSubscription An object used to unsubscribe from a cancellation signal Methods unsubscribe() Unsubscribes from a cancellation signal. Declaration unsubscribe(): void; Returns void"
  },
  "api/cancelable/cancelablesource_namespace.html": {
    "href": "api/cancelable/cancelablesource_namespace.html",
    "title": "Namespace CancelableSource | @esfx API Reference",
    "keywords": "Namespace CancelableSource Functions CancelableSource.hasInstance(value) Determines whether a value is a CancelableSource object. Declaration function hasInstance(value: unknown): value is CancelableSource; Parameters value unknown Returns value is CancelableSource CancelableSource.isCancelableSource(value) Determines whether a value is a CancelableSource object. Declaration function isCancelableSource(value: unknown): value is CancelableSource; Parameters value unknown Returns value is CancelableSource"
  },
  "api/cancelable/cancelablesource_interface.html": {
    "href": "api/cancelable/cancelablesource_interface.html",
    "title": "Interface CancelableSource | @esfx API Reference",
    "keywords": "Interface CancelableSource Represents an object that is a source for cancelation. Methods [CancelableSource.cancel]() Cancels the source, notifying the associated [[CancelSignal]]. Declaration [CancelableSource.cancel](): void; Returns void"
  },
  "api/threading-mutex/mutex_class.html": {
    "href": "api/threading-mutex/mutex_class.html",
    "title": "Class Mutex | @esfx API Reference",
    "keywords": "Class Mutex Constructors (constructor)(initiallyOwned) Constructs a new instance of the Mutex class Declaration constructor(initiallyOwned?: boolean); Parameters initiallyOwned boolean (constructor)(buffer, byteOffset) Constructs a new instance of the Mutex class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Declaration readonly buffer: SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Declaration readonly byteLength: number; Property Value number byteOffset Declaration readonly byteOffset: number; Property Value number isLocked Declaration readonly isLocked: boolean; Property Value boolean ownsLock Declaration readonly ownsLock: boolean; Property Value boolean SIZE Declaration static readonly SIZE = 12; Methods [Disposable.dispose]() Declaration [Disposable.dispose](): void; Returns void [Lockable.lock](ms) Declaration [Lockable.lock](ms?: number): boolean; Parameters ms number Returns boolean [Lockable.tryLock]() Declaration [Lockable.tryLock](): boolean; Returns boolean [Lockable.unlock]() Declaration [Lockable.unlock](): boolean; Returns boolean close() Declaration close(): void; Returns void lock(ms) Declaration lock(ms?: number): boolean; Parameters ms number Returns boolean tryLock() Declaration tryLock(): boolean; Returns boolean unlock() Declaration unlock(): boolean; Returns boolean"
  },
  "api/struct-type/structtypeconstructor_interface.html": {
    "href": "api/struct-type/structtypeconstructor_interface.html",
    "title": "Interface StructTypeConstructor | @esfx API Reference",
    "keywords": "Interface StructTypeConstructor Properties prototype Declaration prototype: typeof Struct; Property Value typeof Struct"
  },
  "api/struct-type/structprimitivetype_interface.html": {
    "href": "api/struct-type/structprimitivetype_interface.html",
    "title": "Interface StructPrimitiveType | @esfx API Reference",
    "keywords": "Interface StructPrimitiveType Properties name Declaration readonly name: K; Property Value K SIZE Declaration readonly SIZE: number; Property Value number"
  },
  "api/struct-type/structfielddefinition_interface.html": {
    "href": "api/struct-type/structfielddefinition_interface.html",
    "title": "Interface StructFieldDefinition | @esfx API Reference",
    "keywords": "Interface StructFieldDefinition Properties name Declaration readonly name: string | symbol; Property Value string | symbol type Declaration readonly type: StructFieldType; Property Value StructFieldType"
  },
  "api/struct-type/structclass_interface.html": {
    "href": "api/struct-type/structclass_interface.html",
    "title": "Interface StructClass | @esfx API Reference",
    "keywords": "Interface StructClass Properties [kFields] Declaration [kFields]: TDef; Property Value TDef SIZE Declaration readonly SIZE: number; Property Value number"
  },
  "api/equatable/equatable_interface.html": {
    "href": "api/equatable/equatable_interface.html",
    "title": "Interface Equatable | @esfx API Reference",
    "keywords": "Interface Equatable Represents a value that can compare its equality with another value. Methods [Equatable.equals](other) Determines whether this value is equal to another value. Declaration [Equatable.equals](other: unknown): boolean; Parameters other unknown Returns boolean [Equatable.hash]() Compute a hash code for an value. Declaration [Equatable.hash](): number; Returns number"
  },
  "api/equatable/equaler_namespace.html": {
    "href": "api/equatable/equaler_namespace.html",
    "title": "Namespace Equaler | @esfx API Reference",
    "keywords": "Namespace Equaler Functions Equaler.create(equalityComparison, hashGenerator) Creates an Equaler from a comparison function and an optional hash generator. Declaration function create<T>(equalityComparison: EqualityComparison<T>, hashGenerator?: HashGenerator<T>): Equaler<T>; Parameters equalityComparison EqualityComparison <T> hashGenerator HashGenerator <T> Returns Equaler <T> Type Parameters Name Description T"
  },
  "api/equatable/equaler_interface.html": {
    "href": "api/equatable/equaler_interface.html",
    "title": "Interface Equaler | @esfx API Reference",
    "keywords": "Interface Equaler Represents an object that can be used to compare the equality of two objects. Methods equals(x, y) Tests whether two values are equal to each other. Declaration equals(x: T, y: T): boolean; Parameters x T y T Returns boolean hash(x) Generates a hash code for a value. Declaration hash(x: T): number; Parameters x T Returns number"
  },
  "api/async-semaphore/asyncsemaphore_class.html": {
    "href": "api/async-semaphore/asyncsemaphore_class.html",
    "title": "Class AsyncSemaphore | @esfx API Reference",
    "keywords": "Class AsyncSemaphore Limits the number of asynchronous operations that can access a resource or pool of resources. Constructors (constructor)(initialCount, maxCount) Initializes a new instance of the Semaphore class. Declaration constructor(initialCount: number, maxCount?: number); Parameters initialCount number maxCount number Properties count Gets the number of remaining asynchronous operations that can enter the Semaphore. Declaration readonly count: number; Property Value number Methods release(count) Releases the [[Semaphore]] one or more times. Declaration release(count?: number): void; Parameters count number Returns void wait(cancelable) Asynchronously waits for the event to become signaled. Declaration wait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable Returns Promise <void>"
  },
  "api/async-lockable/upgradeablelockhandle_interface.html": {
    "href": "api/async-lockable/upgradeablelockhandle_interface.html",
    "title": "Interface UpgradeableLockHandle | @esfx API Reference",
    "keywords": "Interface UpgradeableLockHandle An object used to release a held lock or upgrade to a stronger lock. Methods upgrade(cancelable) Upgrades the lock to a stronger lock. Declaration upgrade(cancelable?: Cancelable): Promise<LockHandle<TUpgradedMutex>>; Parameters cancelable Cancelable Returns Promise < LockHandle <TUpgradedMutex>>"
  },
  "api/async-lockable/lockhandle_interface.html": {
    "href": "api/async-lockable/lockhandle_interface.html",
    "title": "Interface LockHandle | @esfx API Reference",
    "keywords": "Interface LockHandle An object used to release a held lock. Properties mutex Gets the associated AsyncLockable object. Declaration readonly mutex: TMutex; Property Value TMutex ownsLock Indicates whether this handle owns its associated mutex <!-- --> . Declaration readonly ownsLock: boolean; Property Value boolean Methods lock(cancelable) Reacquires the lock. If this handle already owns the lock, an Error is thrown. Declaration lock(cancelable?: Cancelable): Promise<this>; Parameters cancelable Cancelable Returns Promise <this> unlock() Releases the lock. If this handle does not own the lock, an Error is thrown. Declaration unlock(): void; Returns void"
  },
  "api/async-canceltoken/canceltoken_class.html": {
    "href": "api/async-canceltoken/canceltoken_class.html",
    "title": "Class CancelToken | @esfx API Reference",
    "keywords": "Class CancelToken Propagates notifications that operations should be canceled. Properties canBeSignaled Gets a value indicating whether the token can be signaled. Declaration readonly canBeSignaled: boolean; Property Value boolean canceled Declaration static readonly canceled: CancelToken; Property Value CancelToken none Declaration static readonly none: CancelToken; Property Value CancelToken signaled Gets a value indicating whether the token is signaled. Declaration readonly signaled: boolean; Property Value boolean Methods [Cancelable.cancelSignal]() Declaration [Cancelable.cancelSignal](): CancelToken; Returns CancelToken all(cancelables) Returns a CancelToken that becomes signaled when **all** of the provided cancelables are signaled. Declaration static all(cancelables: Iterable<Cancelable>): CancelToken; Parameters cancelables Iterable < Cancelable > Returns CancelToken from(cancelable) Gets a CancelToken from a cancelable. Declaration static from(cancelable: Cancelable | null | undefined): CancelToken; Parameters cancelable Cancelable | null | undefined Returns CancelToken race(cancelables) Returns a CancelToken that becomes signaled when **any** of the provided cancelables are signaled. Declaration static race(cancelables: Iterable<Cancelable>): CancelToken; Parameters cancelables Iterable < Cancelable > Returns CancelToken source() Creates a new CancelSource. Declaration static source(): CancelSource; Returns CancelSource subscribe(onSignaled) Subscribes to notifications for when the object becomes signaled. Declaration subscribe(onSignaled: () => void): CancelSubscription; Parameters onSignaled () => void Returns CancelSubscription throwIfSignaled() Throws a CancelError if the token was signaled. Declaration throwIfSignaled(): void; Returns void"
  },
  "api/async-canceltoken/cancelsource_interface.html": {
    "href": "api/async-canceltoken/cancelsource_interface.html",
    "title": "Interface CancelSource | @esfx API Reference",
    "keywords": "Interface CancelSource Signals a CancelToken when cancellation has been requested. Properties token Gets the CancelToken linked to this source. Declaration readonly token: CancelToken; Property Value CancelToken Methods cancel() Cancels the source, evaluating any subscribed callbacks. If any callback raises an exception, the exception is propagated to a host specific unhanedle exception mechanism. Declaration cancel(): void; Returns void close() Closes the source, preventing the possibility of future cancellation. Declaration close(): void; Returns void"
  },
  "api/threading-semaphore.html": {
    "href": "api/threading-semaphore.html",
    "title": "Package @esfx/threading-semaphore | @esfx API Reference",
    "keywords": "Package @esfx/threading-semaphore"
  },
  "api/threading-mutex.html": {
    "href": "api/threading-mutex.html",
    "title": "Package @esfx/threading-mutex | @esfx API Reference",
    "keywords": "Package @esfx/threading-mutex"
  },
  "api/threading-autoresetevent.html": {
    "href": "api/threading-autoresetevent.html",
    "title": "Package @esfx/threading-autoresetevent | @esfx API Reference",
    "keywords": "Package @esfx/threading-autoresetevent"
  },
  "api/decorators-stage1-core/classdescriptor_interface.html": {
    "href": "api/decorators-stage1-core/classdescriptor_interface.html",
    "title": "Interface ClassDescriptor | @esfx API Reference",
    "keywords": "Interface ClassDescriptor Properties kind Declaration kind: \"class\"; Property Value \"class\" target Declaration target: T; Property Value T"
  },
  "api/collection-core/readonlykeyedmulticollection_namespace.html": {
    "href": "api/collection-core/readonlykeyedmulticollection_namespace.html",
    "title": "Namespace ReadonlyKeyedMultiCollection | @esfx API Reference",
    "keywords": "Namespace ReadonlyKeyedMultiCollection Functions ReadonlyKeyedMultiCollection.hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedMultiCollection <!-- --> . Declaration function hasInstance<K, V>(value: Iterable<[K, V]>): value is ReadonlyKeyedMultiCollection<K, V>; Parameters value Iterable <[K, V]> Returns value is ReadonlyKeyedMultiCollection <K, V> Type Parameters Name Description K V ReadonlyKeyedMultiCollection.hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedMultiCollection <!-- --> . Declaration function hasInstance(value: unknown): value is ReadonlyKeyedMultiCollection<unknown, unknown>; Parameters value unknown Returns value is ReadonlyKeyedMultiCollection <unknown, unknown> ReadonlyKeyedMultiCollection.isReadonlyKeyedMultiCollection(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedMultiCollection <!-- --> . Declaration function isReadonlyKeyedMultiCollection<K, V>(value: Iterable<[K, V]>): value is ReadonlyKeyedMultiCollection<K, V>; Parameters value Iterable <[K, V]> Returns value is ReadonlyKeyedMultiCollection <K, V> Type Parameters Name Description K V ReadonlyKeyedMultiCollection.isReadonlyKeyedMultiCollection(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedMultiCollection <!-- --> . Declaration function isReadonlyKeyedMultiCollection(value: unknown): value is ReadonlyKeyedMultiCollection<unknown, unknown>; Parameters value unknown Returns value is ReadonlyKeyedMultiCollection <unknown, unknown>"
  },
  "api/collection-core/readonlykeyedmulticollection_interface.html": {
    "href": "api/collection-core/readonlykeyedmulticollection_interface.html",
    "title": "Interface ReadonlyKeyedMultiCollection | @esfx API Reference",
    "keywords": "Interface ReadonlyKeyedMultiCollection Properties [ReadonlyKeyedMultiCollection.size] Gets the number of elements in the collection. Declaration readonly [ReadonlyKeyedMultiCollection.size]: number; Property Value number Methods [ReadonlyKeyedMultiCollection.get](key) Gets the value in the collection associated with the provided key, if it exists. Declaration [ReadonlyKeyedMultiCollection.get](key: K): Iterable<V> | undefined; Parameters key K Returns Iterable <V> | undefined [ReadonlyKeyedMultiCollection.has](key) Tests whether a key is present in the collection. Declaration [ReadonlyKeyedMultiCollection.has](key: K): boolean; Parameters key K Returns boolean [ReadonlyKeyedMultiCollection.hasValue](key, value) Tests whether a key and value is present in the collection. Declaration [ReadonlyKeyedMultiCollection.hasValue](key: K, value: V): boolean; Parameters key K value V Returns boolean [ReadonlyKeyedMultiCollection.keys]() Gets an IterableIterator for the keys present in the collection. Declaration [ReadonlyKeyedMultiCollection.keys](): IterableIterator<K>; Returns IterableIterator <K> [ReadonlyKeyedMultiCollection.values]() Gets an IterableIterator for the values present in the collection. Declaration [ReadonlyKeyedMultiCollection.values](): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collection-core/readonlykeyedcollection_namespace.html": {
    "href": "api/collection-core/readonlykeyedcollection_namespace.html",
    "title": "Namespace ReadonlyKeyedCollection | @esfx API Reference",
    "keywords": "Namespace ReadonlyKeyedCollection Functions ReadonlyKeyedCollection.hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedCollection <!-- --> . Declaration function hasInstance<K, V>(value: Iterable<[K, V]>): value is ReadonlyKeyedCollection<K, V>; Parameters value Iterable <[K, V]> Returns value is ReadonlyKeyedCollection <K, V> Type Parameters Name Description K V ReadonlyKeyedCollection.hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is ReadonlyKeyedCollection<unknown, unknown>; Parameters value unknown Returns value is ReadonlyKeyedCollection <unknown, unknown> ReadonlyKeyedCollection.isReadonlyKeyedCollection(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedCollection <!-- --> . Declaration function isReadonlyKeyedCollection<K, V>(value: Iterable<[K, V]>): value is ReadonlyKeyedCollection<K, V>; Parameters value Iterable <[K, V]> Returns value is ReadonlyKeyedCollection <K, V> Type Parameters Name Description K V ReadonlyKeyedCollection.isReadonlyKeyedCollection(value) Tests whether a value supports the minimal representation of a ReadonlyKeyedCollection <!-- --> . Declaration function isReadonlyKeyedCollection(value: unknown): value is ReadonlyKeyedCollection<unknown, unknown>; Parameters value unknown Returns value is ReadonlyKeyedCollection <unknown, unknown>"
  },
  "api/async-lockable/asynclockable_interface.html": {
    "href": "api/async-lockable/asynclockable_interface.html",
    "title": "Interface AsyncLockable | @esfx API Reference",
    "keywords": "Interface AsyncLockable Represents a value that can be used to synchronize access to a resource. Methods [AsyncLockable.lock](cancelable) Takes a lock. Declaration [AsyncLockable.lock](cancelable?: Cancelable): Promise<LockHandle>; Parameters cancelable Cancelable Returns Promise < LockHandle > [AsyncLockable.unlock]() Releases a lock. Declaration [AsyncLockable.unlock](): void; Returns void"
  },
  "api/async-canceltoken.html": {
    "href": "api/async-canceltoken.html",
    "title": "Package @esfx/async-canceltoken | @esfx API Reference",
    "keywords": "Package @esfx/async-canceltoken"
  },
  "api/async-barrier.html": {
    "href": "api/async-barrier.html",
    "title": "Package @esfx/async-barrier | @esfx API Reference",
    "keywords": "Package @esfx/async-barrier"
  },
  "api/threading-conditionvariable/conditionvariable_class.html": {
    "href": "api/threading-conditionvariable/conditionvariable_class.html",
    "title": "Class ConditionVariable | @esfx API Reference",
    "keywords": "Class ConditionVariable Constructors (constructor)(buffer, byteOffset) Constructs a new instance of the ConditionVariable class Declaration constructor(buffer?: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Declaration readonly buffer: SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Declaration readonly byteLength: number; Property Value number byteOffset Declaration readonly byteOffset: number; Property Value number SIZE Declaration static readonly SIZE = 4; Methods [Disposable.dispose]() Declaration [Disposable.dispose](): void; Returns void close() Declaration close(): void; Returns void notifyAll() Declaration notifyAll(): number; Returns number notifyOne() Declaration notifyOne(): boolean; Returns boolean wait(mutex, condition) Declaration wait(mutex: Lockable, condition?: () => boolean): boolean; Parameters mutex Lockable condition () => boolean Returns boolean waitFor(mutex, ms, condition) Declaration waitFor(mutex: Lockable, ms: number, condition?: () => boolean): boolean; Parameters mutex Lockable ms number condition () => boolean Returns boolean"
  },
  "api/threading-autoresetevent/autoresetevent_class.html": {
    "href": "api/threading-autoresetevent/autoresetevent_class.html",
    "title": "Class AutoResetEvent | @esfx API Reference",
    "keywords": "Class AutoResetEvent Constructors (constructor)(initialState) Constructs a new instance of the AutoResetEvent class Declaration constructor(initialState?: boolean); Parameters initialState boolean (constructor)(buffer, byteOffset) Constructs a new instance of the AutoResetEvent class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Declaration readonly buffer: SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Declaration readonly byteLength: number; Property Value number byteOffset Declaration readonly byteOffset: number; Property Value number SIZE Declaration static readonly SIZE = 4; Methods [Disposable.dispose]() Declaration [Disposable.dispose](): void; Returns void close() Declaration close(): void; Returns void reset() Declaration reset(): boolean; Returns boolean set() Declaration set(): boolean; Returns boolean waitOne(ms) Declaration waitOne(ms?: number): boolean; Parameters ms number Returns boolean"
  },
  "api/struct-type/struct_class.html": {
    "href": "api/struct-type/struct_class.html",
    "title": "Class Struct | @esfx API Reference",
    "keywords": "Class Struct Constructors (constructor)() Constructs a new instance of the Struct class Declaration constructor(); (constructor)(shared) Constructs a new instance of the Struct class Declaration constructor(shared: boolean); Parameters shared boolean (constructor)(buffer, byteOffset) Constructs a new instance of the Struct class Declaration constructor(buffer: ArrayBufferLike, byteOffset?: number); Parameters buffer ArrayBufferLike byteOffset number (constructor)(object, shared) Constructs a new instance of the Struct class Declaration constructor(object: Partial<StructInitProperties<TDef>>, shared?: boolean); Parameters object Partial < StructInitProperties <TDef>> shared boolean (constructor)(elements, shared) Constructs a new instance of the Struct class Declaration constructor(elements: Partial<StructInitElements<TDef>>, shared?: boolean); Parameters elements Partial < StructInitElements <TDef>> shared boolean Properties buffer Declaration readonly buffer: ArrayBuffer | SharedArrayBuffer; Property Value ArrayBuffer | SharedArrayBuffer byteLength Declaration readonly byteLength: number; Property Value number byteOffset Declaration readonly byteOffset: number; Property Value number SIZE Declaration static readonly SIZE: number; Property Value number Methods get(key) Declaration get<K extends keyof StructProperties<TDef>>(key: K): StructProperties<TDef>[K]; Parameters key K Returns StructProperties <TDef>[K] Type Parameters Name Description K getIndex(index) Declaration getIndex<I extends keyof StructElements<TDef>>(index: I): StructElements<TDef>[I]; Parameters index I Returns StructElements <TDef>[I] Type Parameters Name Description I set(key, value) Declaration set<K extends keyof StructProperties<TDef>>(key: K, value: StructProperties<TDef>[K]): void; Parameters key K value StructProperties <TDef>[K] Returns void Type Parameters Name Description K setIndex(index, value) Declaration setIndex<I extends keyof StructElements<TDef>>(index: I, value: StructElements<TDef>[I]): boolean; Parameters index I value StructElements <TDef>[I] Returns boolean Type Parameters Name Description I writeTo(buffer, byteOffset) Declaration writeTo(buffer: ArrayBufferLike, byteOffset?: number): void; Parameters buffer ArrayBufferLike byteOffset number Returns void"
  },
  "api/equatable/structuralequatable_namespace.html": {
    "href": "api/equatable/structuralequatable_namespace.html",
    "title": "Namespace StructuralEquatable | @esfx API Reference",
    "keywords": "Namespace StructuralEquatable Functions StructuralEquatable.hasInstance(value) Determines whether a value is StructuralEquatable. Declaration function hasInstance(value: unknown): value is StructuralEquatable; Parameters value unknown Returns value is StructuralEquatable StructuralEquatable.isStructuralEquatable(value) Determines whether a value is StructuralEquatable. Declaration function isStructuralEquatable(value: unknown): value is StructuralEquatable; Parameters value unknown Returns value is StructuralEquatable"
  },
  "api/decorators-stage1-core/methodmemberdescriptor_interface.html": {
    "href": "api/decorators-stage1-core/methodmemberdescriptor_interface.html",
    "title": "Interface MethodMemberDescriptor | @esfx API Reference",
    "keywords": "Interface MethodMemberDescriptor Properties descriptor Declaration descriptor: MethodPropertyDescriptor<T>; Property Value MethodPropertyDescriptor <T>"
  },
  "api/decorators-stage1-core/memberdescriptor_interface.html": {
    "href": "api/decorators-stage1-core/memberdescriptor_interface.html",
    "title": "Interface MemberDescriptor | @esfx API Reference",
    "keywords": "Interface MemberDescriptor Properties descriptor Declaration descriptor?: TypedPropertyDescriptor<T>; Property Value TypedPropertyDescriptor <T> key Declaration key: string | symbol; Property Value string | symbol kind Declaration kind: \"member\"; Property Value \"member\" target Declaration target: object; Property Value object"
  },
  "api/decorators-stage1-core/fieldmemberdescriptor_interface.html": {
    "href": "api/decorators-stage1-core/fieldmemberdescriptor_interface.html",
    "title": "Interface FieldMemberDescriptor | @esfx API Reference",
    "keywords": "Interface FieldMemberDescriptor Properties descriptor Declaration descriptor?: undefined; Property Value undefined"
  },
  "api/collection-core/collection_interface.html": {
    "href": "api/collection-core/collection_interface.html",
    "title": "Interface Collection | @esfx API Reference",
    "keywords": "Interface Collection Methods [Collection.add](value) Adds an element to the collection. Declaration [Collection.add](value: T): void; Parameters value T Returns void [Collection.clear]() Clears the collection. Declaration [Collection.clear](): void; Returns void [Collection.delete](value) Deletes an element from the collection. Declaration [Collection.delete](value: T): boolean; Parameters value T Returns boolean"
  },
  "api/async-readerwriterlock/asyncreaderwriterlock_class.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlock_class.html",
    "title": "Class AsyncReaderWriterLock | @esfx API Reference",
    "keywords": "Class AsyncReaderWriterLock Coordinates readers and writers for a resource. Methods createReader() Creates a AsyncReaderWriterLockReader that can be used to take and release \"read\" locks on a resource. Declaration createReader(): AsyncReaderWriterLockReader; Returns AsyncReaderWriterLockReader createUpgradeableReader() Creates a AsyncReaderWriterLockUpgradeableReader that can be used to take and release \"read\" locks on a resource and can be later upgraded to take and release \"write\" locks. Declaration createUpgradeableReader(): AsyncReaderWriterLockUpgradeableReader; Returns AsyncReaderWriterLockUpgradeableReader createWriter() Creates a AsyncReaderWriterLockWriter that can be used to take and release \"write\" locks on a resource. Declaration createWriter(): AsyncReaderWriterLockWriter; Returns AsyncReaderWriterLockWriter read(cancelable) Asynchronously waits for and takes a read lock on a resource. Declaration read(cancelable?: Cancelable): Promise<AsyncReaderWriterLockReader>; Parameters cancelable Cancelable Returns Promise < AsyncReaderWriterLockReader > upgradeableRead(cancelable) Asynchronously waits for and takes a read lock on a resource that can later be upgraded to a write lock. Declaration upgradeableRead(cancelable?: Cancelable): Promise<AsyncReaderWriterLockUpgradeableReader>; Parameters cancelable Cancelable Returns Promise < AsyncReaderWriterLockUpgradeableReader > write(cancelable) Asynchronously waits for and takes a write lock on a resource. Declaration write(cancelable?: Cancelable): Promise<AsyncReaderWriterLockWriter>; Parameters cancelable Cancelable Returns Promise < AsyncReaderWriterLockWriter >"
  },
  "api/async-readerwriterlock/asyncreaderwriterlockwriter_interface.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlockwriter_interface.html",
    "title": "Interface AsyncReaderWriterLockWriter | @esfx API Reference",
    "keywords": "Interface AsyncReaderWriterLockWriter Properties owner Gets the AsyncReaderWriterLock that owns this object. Declaration readonly owner: AsyncReaderWriterLock; Property Value AsyncReaderWriterLock"
  },
  "api/async-readerwriterlock/asyncreaderwriterlockupgradedwriter_interface.html": {
    "href": "api/async-readerwriterlock/asyncreaderwriterlockupgradedwriter_interface.html",
    "title": "Interface AsyncReaderWriterLockUpgradedWriter | @esfx API Reference",
    "keywords": "Interface AsyncReaderWriterLockUpgradedWriter Properties owner Gets the AsyncReaderWriterLock that owns this object. Declaration readonly owner: AsyncReaderWriterLock; Property Value AsyncReaderWriterLock"
  },
  "api/threading-sleep.html": {
    "href": "api/threading-sleep.html",
    "title": "Package @esfx/threading-sleep | @esfx API Reference",
    "keywords": "Package @esfx/threading-sleep Functions sleep(ms) Causes the current thread of execution to sleep until the specified timeout expires. Declaration export declare function sleep(ms: number): void; Parameters ms number Returns void"
  },
  "api/threading-countdown.html": {
    "href": "api/threading-countdown.html",
    "title": "Package @esfx/threading-countdown | @esfx API Reference",
    "keywords": "Package @esfx/threading-countdown"
  },
  "api/threading-conditionvariable.html": {
    "href": "api/threading-conditionvariable.html",
    "title": "Package @esfx/threading-conditionvariable | @esfx API Reference",
    "keywords": "Package @esfx/threading-conditionvariable"
  },
  "api/lazy.html": {
    "href": "api/lazy.html",
    "title": "Package @esfx/lazy | @esfx API Reference",
    "keywords": "Package @esfx/lazy"
  },
  "api/indexed-object.html": {
    "href": "api/indexed-object.html",
    "title": "Package @esfx/indexed-object | @esfx API Reference",
    "keywords": "Package @esfx/indexed-object"
  },
  "api/decorators.html": {
    "href": "api/decorators.html",
    "title": "Package @esfx/decorators | @esfx API Reference",
    "keywords": "Package @esfx/decorators"
  },
  "api/collection-core/readonlyindexedcollection_interface.html": {
    "href": "api/collection-core/readonlyindexedcollection_interface.html",
    "title": "Interface ReadonlyIndexedCollection | @esfx API Reference",
    "keywords": "Interface ReadonlyIndexedCollection Methods [ReadonlyIndexedCollection.getAt](index) Gets the value at the specified index in the collection, or undefined if the index was outside of the bounds of the collection. Declaration [ReadonlyIndexedCollection.getAt](index: number): T | undefined; Parameters index number Returns T | undefined [ReadonlyIndexedCollection.indexOf](value, fromIndex) Gets the index for a value in the collection, or -1 if the value was not found. Declaration [ReadonlyIndexedCollection.indexOf](value: T, fromIndex?: number): number; Parameters value T fromIndex number Returns number"
  },
  "api/collection-core/keyedcollection_namespace.html": {
    "href": "api/collection-core/keyedcollection_namespace.html",
    "title": "Namespace KeyedCollection | @esfx API Reference",
    "keywords": "Namespace KeyedCollection Functions KeyedCollection.hasInstance(value) Tests whether a value supports the minimal representation of a KeyedCollection <!-- --> . Declaration function hasInstance<K, V>(value: Iterable<[K, V]>): value is KeyedCollection<K, V>; Parameters value Iterable <[K, V]> Returns value is KeyedCollection <K, V> Type Parameters Name Description K V KeyedCollection.hasInstance(value) Tests whether a value supports the minimal representation of a KeyedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is KeyedCollection<unknown, unknown>; Parameters value unknown Returns value is KeyedCollection <unknown, unknown> KeyedCollection.isKeyedCollection(value) Tests whether a value supports the minimal representation of a KeyedCollection <!-- --> . Declaration function isKeyedCollection<K, V>(value: Iterable<[K, V]>): value is KeyedCollection<K, V>; Parameters value Iterable <[K, V]> Returns value is KeyedCollection <K, V> Type Parameters Name Description K V KeyedCollection.isKeyedCollection(value) Tests whether a value supports the minimal representation of a KeyedCollection <!-- --> . Declaration function isKeyedCollection(value: unknown): value is KeyedCollection<unknown, unknown>; Parameters value unknown Returns value is KeyedCollection <unknown, unknown>"
  },
  "api/async-manualresetevent/asyncmanualresetevent_class.html": {
    "href": "api/async-manualresetevent/asyncmanualresetevent_class.html",
    "title": "Class AsyncManualResetEvent | @esfx API Reference",
    "keywords": "Class AsyncManualResetEvent Asynchronously notifies one or more waiting Promises that an event has occurred. Constructors (constructor)(initialState) Initializes a new instance of the ManualResetEvent class. Declaration constructor(initialState?: boolean); Parameters initialState boolean Properties isSet Gets a value indicating whether the event is signaled. Declaration readonly isSet: boolean; Property Value boolean Methods reset() Sets the state of the event to nonsignaled, causing asynchronous operations to pause. Declaration reset(): void; Returns void set() Sets the state of the event to signaled, resolving one or more waiting Promises. Declaration set(): void; Returns void wait(cancelable) Asynchronously waits for the event to become signaled. Declaration wait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable Returns Promise <void>"
  },
  "api/async-countdown/asynccountdownevent_class.html": {
    "href": "api/async-countdown/asynccountdownevent_class.html",
    "title": "Class AsyncCountdownEvent | @esfx API Reference",
    "keywords": "Class AsyncCountdownEvent An event that is set when all participants have signaled. Constructors (constructor)(initialCount) Initializes a new instance of the CountdownEvent class. Declaration constructor(initialCount: number); Parameters initialCount number Properties initialCount Gets the number of signals initially required to set the event. Declaration readonly initialCount: number; Property Value number remainingCount Gets the number of remaining signals required to set the event. Declaration readonly remainingCount: number; Property Value number Methods add(count) Increments the event's current count by one or more. Declaration add(count?: number): void; Parameters count number Returns void reset(count) Resets the remaining and initial count to the specified value, or the initial count. Declaration reset(count?: number): void; Parameters count number Returns void signal(count) Registers one or more signals with the CountdownEvent, decrementing the remaining count. Declaration signal(count?: number): boolean; Parameters count number Returns boolean wait(cancelable) Asynchronously waits for the event to become signaled. Declaration wait(cancelable?: Cancelable): Promise<void>; Parameters cancelable Cancelable Returns Promise <void>"
  },
  "api/collection-core-dom-shim.html": {
    "href": "api/collection-core-dom-shim.html",
    "title": "Package @esfx/collection-core-dom-shim | @esfx API Reference",
    "keywords": "Package @esfx/collection-core-dom-shim"
  },
  "api/async-stack.html": {
    "href": "api/async-stack.html",
    "title": "Package @esfx/async-stack | @esfx API Reference",
    "keywords": "Package @esfx/async-stack"
  },
  "api/async-deferred.html": {
    "href": "api/async-deferred.html",
    "title": "Package @esfx/async-deferred | @esfx API Reference",
    "keywords": "Package @esfx/async-deferred"
  },
  "api/equatable/comparable_interface.html": {
    "href": "api/equatable/comparable_interface.html",
    "title": "Interface Comparable | @esfx API Reference",
    "keywords": "Interface Comparable Represents a value that can compare itself relationally with another value. Methods [Comparable.compareTo](other) Compares this value with another value: - A negative value indicates this value is lesser. - A positive value indicates this value is greater. - A zero value indicates this value is the same. Declaration [Comparable.compareTo](other: unknown): number; Parameters other unknown Returns number"
  },
  "api/disposable/disposable_namespace.html": {
    "href": "api/disposable/disposable_namespace.html",
    "title": "Namespace Disposable | @esfx API Reference",
    "keywords": "Namespace Disposable Functions Disposable.create(dispose) Creates a Disposable wrapper around a callback used to dispose of a resource. Declaration function create(dispose: () => void): Disposable; Parameters dispose () => void Returns Disposable Disposable.from(disposables) Creates a Disposable wrapper around a set of other disposables. Declaration function from(disposables: Iterable<Disposable | null | undefined>): Disposable; Parameters disposables Iterable < Disposable | null | undefined> Returns Disposable Disposable.hasInstance(value) Determines whether a value is Disposable. Declaration function hasInstance(value: unknown): value is Disposable; Parameters value unknown Returns value is Disposable Disposable.isDisposable(value) Determines whether a value is Disposable. Declaration function isDisposable(value: unknown): value is Disposable; Parameters value unknown Returns value is Disposable Disposable.use(resource, callback) Executes a callback with the provided Disposable resource, disposing the resource when the callback completes. Declaration function use<T extends Disposable | null | undefined, U>(resource: T, callback: (resource: T) => U): U; Parameters resource T callback (resource: T) => U Returns U Type Parameters Name Description T U"
  },
  "api/decorators-stage1-core/accessormemberdescriptor_interface.html": {
    "href": "api/decorators-stage1-core/accessormemberdescriptor_interface.html",
    "title": "Interface AccessorMemberDescriptor | @esfx API Reference",
    "keywords": "Interface AccessorMemberDescriptor Properties descriptor Declaration descriptor: AccessorPropertyDescriptor<T>; Property Value AccessorPropertyDescriptor <T>"
  },
  "api/collections-sortedset/sortedset_class.html": {
    "href": "api/collections-sortedset/sortedset_class.html",
    "title": "Class SortedSet | @esfx API Reference",
    "keywords": "Class SortedSet Constructors (constructor)(comparer) Constructs a new instance of the SortedSet class Declaration constructor(comparer?: Comparison<T> | Comparer<T>); Parameters comparer Comparison <T> | Comparer <T> (constructor)(iterable, comparer) Constructs a new instance of the SortedSet class Declaration constructor(iterable?: Iterable<T>, comparer?: Comparison<T> | Comparer<T>); Parameters iterable Iterable <T> comparer Comparison <T> | Comparer <T> Properties [Collection.size] Declaration readonly [Collection.size]: number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string comparer Declaration readonly comparer: Comparer<T>; Property Value Comparer <T> size Declaration readonly size: number; Property Value number Methods [Collection.add](value) Declaration [Collection.add](value: T): void; Parameters value T Returns void [Collection.clear]() Declaration [Collection.clear](): void; Returns void [Collection.delete](value) Declaration [Collection.delete](value: T): boolean; Parameters value T Returns boolean [Collection.has](value) Declaration [Collection.has](value: T): boolean; Parameters value T Returns boolean [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T> add(value) Declaration add(value: T): this; Parameters value T Returns this clear() Declaration clear(): void; Returns void delete(value) Declaration delete(value: T): boolean; Parameters value T Returns boolean entries() Declaration entries(): IterableIterator<[T, T]>; Returns IterableIterator <[T, T]> forEach(cb, thisArg) Declaration forEach(cb: (value: T, key: T, map: this) => void, thisArg?: unknown): void; Parameters cb (value: T, key: T, map: this) => void thisArg unknown Returns void has(value) Declaration has(value: T): boolean; Parameters value T Returns boolean keys() Declaration keys(): IterableIterator<T>; Returns IterableIterator <T> values() Declaration values(): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/collections-sortedset/readonlysortedset_interface.html": {
    "href": "api/collections-sortedset/readonlysortedset_interface.html",
    "title": "Interface ReadonlySortedSet | @esfx API Reference",
    "keywords": "Interface ReadonlySortedSet Properties comparer Declaration readonly comparer: Comparer<T>; Property Value Comparer <T> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/collections-sortedmap/sortedmap_class.html": {
    "href": "api/collections-sortedmap/sortedmap_class.html",
    "title": "Class SortedMap | @esfx API Reference",
    "keywords": "Class SortedMap Constructors (constructor)(comparer) Constructs a new instance of the SortedMap class Declaration constructor(comparer?: Comparison<K> | Comparer<K>); Parameters comparer Comparison <K> | Comparer <K> (constructor)(iterable, comparer) Constructs a new instance of the SortedMap class Declaration constructor(iterable?: Iterable<[K, V]>, comparer?: Comparison<K> | Comparer<K>); Parameters iterable Iterable <[K, V]> comparer Comparison <K> | Comparer <K> Properties [KeyedCollection.size] Declaration readonly [KeyedCollection.size]: number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string comparer Declaration readonly comparer: Comparer<K>; Property Value Comparer <K> size Declaration readonly size: number; Property Value number Methods [KeyedCollection.clear]() Declaration [KeyedCollection.clear](): void; Returns void [KeyedCollection.delete](key) Declaration [KeyedCollection.delete](key: K): boolean; Parameters key K Returns boolean [KeyedCollection.get](key) Declaration [KeyedCollection.get](key: K): V | undefined; Parameters key K Returns V | undefined [KeyedCollection.has](key) Declaration [KeyedCollection.has](key: K): boolean; Parameters key K Returns boolean [KeyedCollection.keys]() Declaration [KeyedCollection.keys](): IterableIterator<K>; Returns IterableIterator <K> [KeyedCollection.set](key, value) Declaration [KeyedCollection.set](key: K, value: V): void; Parameters key K value V Returns void [KeyedCollection.values]() Declaration [KeyedCollection.values](): IterableIterator<V>; Returns IterableIterator <V> [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]> clear() Declaration clear(): void; Returns void delete(key) Declaration delete(key: K): boolean; Parameters key K Returns boolean entries() Declaration entries(): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]> forEach(cb, thisArg) Declaration forEach(cb: (value: V, key: K, map: this) => void, thisArg?: unknown): void; Parameters cb (value: V, key: K, map: this) => void thisArg unknown Returns void get(key) Declaration get(key: K): V | undefined; Parameters key K Returns V | undefined has(key) Declaration has(key: K): boolean; Parameters key K Returns boolean keys() Declaration keys(): IterableIterator<K>; Returns IterableIterator <K> set(key, value) Declaration set(key: K, value: V): this; Parameters key K value V Returns this values() Declaration values(): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collections-multimap/multimap_class.html": {
    "href": "api/collections-multimap/multimap_class.html",
    "title": "Class MultiMap | @esfx API Reference",
    "keywords": "Class MultiMap Constructors (constructor)(options) Constructs a new instance of the MultiMap class Declaration constructor(options?: MultiMapOptions<K, V>); Parameters options MultiMapOptions <K, V> (constructor)(iterable, options) Constructs a new instance of the MultiMap class Declaration constructor(iterable?: Iterable<[K, V]>, options?: MultiMapOptions<K, V>); Parameters iterable Iterable <[K, V]> options MultiMapOptions <K, V> (constructor)(capacity, options) Constructs a new instance of the MultiMap class Declaration constructor(capacity: number, options?: MultiMapOptions<K, V>); Parameters capacity number options MultiMapOptions <K, V> Properties [ReadonlyKeyedMultiCollection.size] Declaration readonly [ReadonlyKeyedMultiCollection.size]: number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string keyEqualer Declaration readonly keyEqualer: Equaler<K>; Property Value Equaler <K> size Declaration readonly size: number; Property Value number valueEqualer Declaration readonly valueEqualer: Equaler<V>; Property Value Equaler <V> Methods [KeyedMultiCollection.add](key, value) Declaration [KeyedMultiCollection.add](key: K, value: V): void; Parameters key K value V Returns void [KeyedMultiCollection.clear]() Declaration [KeyedMultiCollection.clear](): void; Returns void [KeyedMultiCollection.delete](key) Declaration [KeyedMultiCollection.delete](key: K): number; Parameters key K Returns number [KeyedMultiCollection.deleteValue](key, value) Declaration [KeyedMultiCollection.deleteValue](key: K, value: V): boolean; Parameters key K value V Returns boolean [ReadonlyKeyedMultiCollection.get](key) Declaration [ReadonlyKeyedMultiCollection.get](key: K): ReadonlyHashSet<V> | undefined; Parameters key K Returns ReadonlyHashSet <V> | undefined [ReadonlyKeyedMultiCollection.has](key) Declaration [ReadonlyKeyedMultiCollection.has](key: K): boolean; Parameters key K Returns boolean [ReadonlyKeyedMultiCollection.hasValue](key, value) Declaration [ReadonlyKeyedMultiCollection.hasValue](key: K, value: V): boolean; Parameters key K value V Returns boolean [ReadonlyKeyedMultiCollection.keys]() Declaration [ReadonlyKeyedMultiCollection.keys](): IterableIterator<K>; Returns IterableIterator <K> [ReadonlyKeyedMultiCollection.values]() Declaration [ReadonlyKeyedMultiCollection.values](): IterableIterator<V>; Returns IterableIterator <V> [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]> add(key, value) Declaration add(key: K, value: V): this; Parameters key K value V Returns this clear() Declaration clear(): void; Returns void delete(key) Declaration delete(key: K): number; Parameters key K Returns number deleteValue(key, value) Declaration deleteValue(key: K, value: V): boolean; Parameters key K value V Returns boolean ensureCapacity(capacity) Declaration ensureCapacity(capacity: number): number; Parameters capacity number Returns number entries() Declaration entries(): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]> forEach(callback, thisArg) Declaration forEach(callback: (value: V, key: K, map: this) => void, thisArg?: any): void; Parameters callback (value: V, key: K, map: this) => void thisArg any Returns void get(key) Declaration get(key: K): ReadonlyHashSet<V> | undefined; Parameters key K Returns ReadonlyHashSet <V> | undefined has(key) Declaration has(key: K): boolean; Parameters key K Returns boolean hasValue(key, value) Declaration hasValue(key: K, value: V): boolean; Parameters key K value V Returns boolean keys() Declaration keys(): IterableIterator<K>; Returns IterableIterator <K> trimExcess(capacity) Declaration trimExcess(capacity?: number): void; Parameters capacity number Returns void values() Declaration values(): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collections-multimap/multimapoptions_interface.html": {
    "href": "api/collections-multimap/multimapoptions_interface.html",
    "title": "Interface MultiMapOptions | @esfx API Reference",
    "keywords": "Interface MultiMapOptions Properties keyEqualer Declaration keyEqualer?: Equaler<K>; Property Value Equaler <K> valueEqualer Declaration valueEqualer?: Equaler<V>; Property Value Equaler <V>"
  },
  "api/collections-hashmap/hashmap_class.html": {
    "href": "api/collections-hashmap/hashmap_class.html",
    "title": "Class HashMap | @esfx API Reference",
    "keywords": "Class HashMap Constructors (constructor)(equaler) Constructs a new instance of the HashMap class Declaration constructor(equaler?: Equaler<K>); Parameters equaler Equaler <K> (constructor)(iterable, equaler) Constructs a new instance of the HashMap class Declaration constructor(iterable?: Iterable<[K, V]>, equaler?: Equaler<K>); Parameters iterable Iterable <[K, V]> equaler Equaler <K> (constructor)(capacity, equaler) Constructs a new instance of the HashMap class Declaration constructor(capacity: number, equaler?: Equaler<K>); Parameters capacity number equaler Equaler <K> Properties [ReadonlyKeyedCollection.size] Declaration readonly [ReadonlyKeyedCollection.size]: number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string equaler Declaration readonly equaler: Equaler<K>; Property Value Equaler <K> size Declaration readonly size: number; Property Value number Methods [KeyedCollection.clear]() Declaration [KeyedCollection.clear](): void; Returns void [KeyedCollection.delete](key) Declaration [KeyedCollection.delete](key: K): boolean; Parameters key K Returns boolean [KeyedCollection.set](key, value) Declaration [KeyedCollection.set](key: K, value: V): void; Parameters key K value V Returns void [ReadonlyKeyedCollection.get](key) Declaration [ReadonlyKeyedCollection.get](key: K): V | undefined; Parameters key K Returns V | undefined [ReadonlyKeyedCollection.has](key) Declaration [ReadonlyKeyedCollection.has](key: K): boolean; Parameters key K Returns boolean [ReadonlyKeyedCollection.keys]() Declaration [ReadonlyKeyedCollection.keys](): IterableIterator<K>; Returns IterableIterator <K> [ReadonlyKeyedCollection.values]() Declaration [ReadonlyKeyedCollection.values](): IterableIterator<V>; Returns IterableIterator <V> [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]> clear() Declaration clear(): void; Returns void delete(key) Declaration delete(key: K): boolean; Parameters key K Returns boolean ensureCapacity(capacity) Declaration ensureCapacity(capacity: number): number; Parameters capacity number Returns number entries() Declaration entries(): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]> forEach(callback, thisArg) Declaration forEach(callback: (value: V, key: K, map: this) => void, thisArg?: any): void; Parameters callback (value: V, key: K, map: this) => void thisArg any Returns void get(key) Declaration get(key: K): V | undefined; Parameters key K Returns V | undefined has(key) Declaration has(key: K): boolean; Parameters key K Returns boolean keys() Declaration keys(): IterableIterator<K>; Returns IterableIterator <K> set(key, value) Declaration set(key: K, value: V): this; Parameters key K value V Returns this trimExcess(capacity) Declaration trimExcess(capacity?: number): void; Parameters capacity number Returns void values() Declaration values(): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collection-core/readonlycollection_namespace.html": {
    "href": "api/collection-core/readonlycollection_namespace.html",
    "title": "Namespace ReadonlyCollection | @esfx API Reference",
    "keywords": "Namespace ReadonlyCollection Functions ReadonlyCollection.hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyCollection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is ReadonlyCollection<T>; Parameters value Iterable <T> Returns value is ReadonlyCollection <T> Type Parameters Name Description T ReadonlyCollection.hasInstance(value) Tests whether a value supports the minimal representation of a ReadonlyCollection <!-- --> . Declaration function hasInstance(value: any): value is ReadonlyCollection<unknown>; Parameters value any Returns value is ReadonlyCollection <unknown> ReadonlyCollection.isReadonlyCollection(value) Tests whether a value supports the minimal representation of a ReadonlyCollection <!-- --> . Declaration function isReadonlyCollection<T>(value: Iterable<T>): value is ReadonlyCollection<T>; Parameters value Iterable <T> Returns value is ReadonlyCollection <T> Type Parameters Name Description T ReadonlyCollection.isReadonlyCollection(value) Tests whether a value supports the minimal representation of a ReadonlyCollection <!-- --> . Declaration function isReadonlyCollection(value: any): value is ReadonlyCollection<unknown>; Parameters value any Returns value is ReadonlyCollection <unknown>"
  },
  "api/collection-core/readonlycollection_interface.html": {
    "href": "api/collection-core/readonlycollection_interface.html",
    "title": "Interface ReadonlyCollection | @esfx API Reference",
    "keywords": "Interface ReadonlyCollection Properties [ReadonlyCollection.size] Gets the number of elements in the collection. Declaration readonly [ReadonlyCollection.size]: number; Property Value number Methods [ReadonlyCollection.has](value) Tests whether an element is present in the collection. Declaration [ReadonlyCollection.has](value: T): boolean; Parameters value T Returns boolean"
  },
  "api/collection-core/indexedcollection_namespace.html": {
    "href": "api/collection-core/indexedcollection_namespace.html",
    "title": "Namespace IndexedCollection | @esfx API Reference",
    "keywords": "Namespace IndexedCollection Functions IndexedCollection.hasInstance(value) Tests whether a value supports the minimal representation of an IndexedCollection <!-- --> . Declaration function hasInstance<T>(value: Iterable<T>): value is IndexedCollection<T>; Parameters value Iterable <T> Returns value is IndexedCollection <T> Type Parameters Name Description T IndexedCollection.hasInstance(value) Tests whether a value supports the minimal representation of an IndexedCollection <!-- --> . Declaration function hasInstance(value: unknown): value is IndexedCollection<unknown>; Parameters value unknown Returns value is IndexedCollection <unknown> IndexedCollection.isIndexedCollection(value) Tests whether a value supports the minimal representation of an IndexedCollection <!-- --> . Declaration function isIndexedCollection<T>(value: Iterable<T>): value is IndexedCollection<T>; Parameters value Iterable <T> Returns value is IndexedCollection <T> Type Parameters Name Description T IndexedCollection.isIndexedCollection(value) Tests whether a value supports the minimal representation of an IndexedCollection <!-- --> . Declaration function isIndexedCollection(value: unknown): value is IndexedCollection<unknown>; Parameters value unknown Returns value is IndexedCollection <unknown>"
  },
  "api/struct-type.html": {
    "href": "api/struct-type.html",
    "title": "Package @esfx/struct-type | @esfx API Reference",
    "keywords": "Package @esfx/struct-type"
  },
  "api/metadata.html": {
    "href": "api/metadata.html",
    "title": "Package @esfx/metadata | @esfx API Reference",
    "keywords": "Package @esfx/metadata Functions defineObjectMetadata(target, metadataKey, metadataValue) Define metadata on an object. Declaration export declare function defineObjectMetadata(target: object, metadataKey: MetadataKey, metadataValue: unknown): void; Parameters target object metadataKey MetadataKey metadataValue unknown Returns void defineParameterMetadata(target, propertyKey, parameterIndex, metadataKey, metadataValue) Define metadata on a parameter of a method of an object. Declaration export declare function defineParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey, metadataValue: unknown): void; Parameters target object propertyKey PropertyKey parameterIndex number metadataKey MetadataKey metadataValue unknown Returns void definePropertyMetadata(target, propertyKey, metadataKey, metadataValue) Define metadata for a property of an object. The property does not have to exist. Declaration export declare function definePropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey, metadataValue: unknown): void; Parameters target object propertyKey PropertyKey metadataKey MetadataKey metadataValue unknown Returns void deleteObjectMetadata(target, metadataKey) Deletes an own metadata key from an object. Declaration export declare function deleteObjectMetadata(target: object, metadataKey: MetadataKey): boolean; Parameters target object metadataKey MetadataKey Returns boolean deleteParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Deletes an own metadata key from a parameter of a method of an object. Declaration export declare function deleteParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): boolean; Parameters target object propertyKey PropertyKey parameterIndex number metadataKey MetadataKey Returns boolean deletePropertyMetadata(target, propertyKey, metadataKey) Deletes an own metadata key from a property of an object. Declaration export declare function deletePropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): boolean; Parameters target object propertyKey PropertyKey metadataKey MetadataKey Returns boolean getMetadataParameterLength(target, propertyKey) Gets the maximum known length of a method of an object or its prototypes from its parameters that have metadata metadata. Declaration export declare function getMetadataParameterLength(target: object, propertyKey: PropertyKey): number; Parameters target object propertyKey PropertyKey Returns number getMetadataProperties(target) Gets the property names for an object or its prototypes for which there is metadata defined. Declaration export declare function getMetadataProperties(target: object): (string | symbol)[]; Parameters target object Returns (string | symbol)[] getObjectMetadata(target, metadataKey) Gets the metadata value for a metadata key on an object or its prototypes. Declaration export declare function getObjectMetadata(target: object, metadataKey: MetadataKey): unknown; Parameters target object metadataKey MetadataKey Returns unknown getObjectMetadataKeys(target) Gets the metadata keys defined on an object or its prototypes. Declaration export declare function getObjectMetadataKeys(target: object): MetadataKey[]; Parameters target object Returns MetadataKey [] getOwnMetadataParameterLength(target, propertyKey) Gets the maximum known length of a method of an object from its parameters that have metadata metadata. Declaration export declare function getOwnMetadataParameterLength(target: object, propertyKey: PropertyKey): number; Parameters target object propertyKey PropertyKey Returns number getOwnMetadataProperties(target) Gets the own property names for an object for which there is metadata defined. Declaration export declare function getOwnMetadataProperties(target: object): (string | symbol)[]; Parameters target object Returns (string | symbol)[] getOwnObjectMetadata(target, metadataKey) Gets the metadata value for an own metadata key on an object. Declaration export declare function getOwnObjectMetadata(target: object, metadataKey: MetadataKey): unknown; Parameters target object metadataKey MetadataKey Returns unknown getOwnObjectMetadataKeys(target) Gets the own metadata keys defined on an object. Declaration export declare function getOwnObjectMetadataKeys(target: object): MetadataKey[]; Parameters target object Returns MetadataKey [] getOwnParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Gets the metadata value for an own metadata key on a parameter of a method of an object. Declaration export declare function getOwnParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): unknown; Parameters target object propertyKey PropertyKey parameterIndex number metadataKey MetadataKey Returns unknown getOwnParameterMetadataKeys(target, propertyKey, parameterIndex) Gets the own metadata keys defined on a parameter of a method of an object. Declaration export declare function getOwnParameterMetadataKeys(target: object, propertyKey: PropertyKey, parameterIndex: number): MetadataKey[]; Parameters target object propertyKey PropertyKey parameterIndex number Returns MetadataKey [] getOwnPropertyMetadata(target, propertyKey, metadataKey) Gets the metadata value for an own metadata key on a property of an object. Declaration export declare function getOwnPropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): unknown; Parameters target object propertyKey PropertyKey metadataKey MetadataKey Returns unknown getOwnPropertyMetadataKeys(target, propertyKey) Gets the own metadata keys defined on a property of an object. Declaration export declare function getOwnPropertyMetadataKeys(target: object, propertyKey: PropertyKey): MetadataKey[]; Parameters target object propertyKey PropertyKey Returns MetadataKey [] getParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Gets the metadata value for a metadata key on a parameter of a method of an object or its prototypes. Declaration export declare function getParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): unknown; Parameters target object propertyKey PropertyKey parameterIndex number metadataKey MetadataKey Returns unknown getParameterMetadataKeys(target, propertyKey, parameterIndex) Gets the metadata keys defined on a parameter of a method of an object or its prototypes. Declaration export declare function getParameterMetadataKeys(target: object, propertyKey: PropertyKey, parameterIndex: number): MetadataKey[]; Parameters target object propertyKey PropertyKey parameterIndex number Returns MetadataKey [] getPropertyMetadata(target, propertyKey, metadataKey) Gets the metadata value for a metadata key on a property of an object or its prototypes. Declaration export declare function getPropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): unknown; Parameters target object propertyKey PropertyKey metadataKey MetadataKey Returns unknown getPropertyMetadataKeys(target, propertyKey) Gets the metadata keys defined on a property of an object or its prototypes. Declaration export declare function getPropertyMetadataKeys(target: object, propertyKey: PropertyKey): MetadataKey[]; Parameters target object propertyKey PropertyKey Returns MetadataKey [] hasObjectMetadata(target, metadataKey) Tests whether an object or its prototypes have metadata for the provided key. Declaration export declare function hasObjectMetadata(target: object, metadataKey: MetadataKey): boolean; Parameters target object metadataKey MetadataKey Returns boolean hasOwnObjectMetadata(target, metadataKey) Tests whether an object has own metadata for the provided key. Declaration export declare function hasOwnObjectMetadata(target: object, metadataKey: MetadataKey): boolean; Parameters target object metadataKey MetadataKey Returns boolean hasOwnParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Tests whether a parameter of a method of an object has own metadata for the provided key. Declaration export declare function hasOwnParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): boolean; Parameters target object propertyKey PropertyKey parameterIndex number metadataKey MetadataKey Returns boolean hasOwnPropertyMetadata(target, propertyKey, metadataKey) Tests whether a property of an object has own metadata for the provided key. Declaration export declare function hasOwnPropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): boolean; Parameters target object propertyKey PropertyKey metadataKey MetadataKey Returns boolean hasParameterMetadata(target, propertyKey, parameterIndex, metadataKey) Tests whether a parameter of a method of an object or its prototypes have metadata for the provided key. Declaration export declare function hasParameterMetadata(target: object, propertyKey: PropertyKey, parameterIndex: number, metadataKey: MetadataKey): boolean; Parameters target object propertyKey PropertyKey parameterIndex number metadataKey MetadataKey Returns boolean hasPropertyMetadata(target, propertyKey, metadataKey) Tests whether a property of an object or its prototypes have metadata for the provided key. Declaration export declare function hasPropertyMetadata(target: object, propertyKey: PropertyKey, metadataKey: MetadataKey): boolean; Parameters target object propertyKey PropertyKey metadataKey MetadataKey Returns boolean"
  },
  "api/equatable.html": {
    "href": "api/equatable.html",
    "title": "Package @esfx/equatable | @esfx API Reference",
    "keywords": "Package @esfx/equatable"
  },
  "api/disposable.html": {
    "href": "api/disposable.html",
    "title": "Package @esfx/disposable | @esfx API Reference",
    "keywords": "Package @esfx/disposable"
  },
  "api/decorators-stage1-core.html": {
    "href": "api/decorators-stage1-core.html",
    "title": "Package @esfx/decorators-stage1-core | @esfx API Reference",
    "keywords": "Package @esfx/decorators-stage1-core Functions createClassDescriptor(target) Declaration export declare function createClassDescriptor<T extends Function = Function>(target: T): ClassDescriptor<T>; Parameters target T Returns ClassDescriptor <T> Type Parameters Name Description T createDecorator(decorator) Declaration export declare function createDecorator<S extends DecoratorSignature<[]>>(decorator: S): MappedDecoratorSignature<S>; Parameters decorator S Returns MappedDecoratorSignature <S> Type Parameters Name Description S createDecoratorFactory(decorator) Declaration export declare function createDecoratorFactory<S extends DecoratorSignature>(decorator: S): MappedDecoratorFactorySignature<S>; Parameters decorator S Returns MappedDecoratorFactorySignature <S> Type Parameters Name Description S createDecoratorOrDecoratorFactory(decorator) Declaration export declare function createDecoratorOrDecoratorFactory<S extends DecoratorSignature>(decorator: S): MappedDecoratorOrDecoratorFactorySignature<S>; Parameters decorator S Returns MappedDecoratorOrDecoratorFactorySignature <S> Type Parameters Name Description S createMemberDescriptor(target, propertyKey, descriptor) Declaration export declare function createMemberDescriptor<T = any>(target: object, propertyKey: PropertyKey, descriptor?: TypedPropertyDescriptor<T>): MemberDescriptor<T>; Parameters target object propertyKey PropertyKey descriptor TypedPropertyDescriptor <T> Returns MemberDescriptor <T> Type Parameters Name Description T createParameterDescriptor(target, propertyKey, parameterIndex) Declaration export declare function createParameterDescriptor(target: object, propertyKey: PropertyKey, parameterIndex: number): ParameterDescriptor; Parameters target object propertyKey PropertyKey parameterIndex number Returns ParameterDescriptor decorate(decorators, target) Declaration export declare function decorate(decorators: ((target: Function) => Function | void)[], target: Function): Function; Parameters decorators ((target: Function ) => Function | void)[] target Function Returns Function decorate(decorators, target, propertyKey, descriptor) Declaration export declare function decorate(decorators: ((target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor) => PropertyDescriptor | void)[], target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor): PropertyDescriptor | void; Parameters decorators ((target: object, propertyKey: PropertyKey , descriptor?: PropertyDescriptor ) => PropertyDescriptor | void)[] target object propertyKey PropertyKey descriptor PropertyDescriptor Returns PropertyDescriptor | void decorateClass(decorators, target) Declaration export declare function decorateClass(decorators: ((target: Function) => Function | void)[], target: Function): Function; Parameters decorators ((target: Function ) => Function | void)[] target Function Returns Function decorateMember(decorators, target, propertyKey, descriptor) Declaration export declare function decorateMember(decorators: ((target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor) => PropertyDescriptor | void)[], target: object, propertyKey: PropertyKey, descriptor?: PropertyDescriptor): PropertyDescriptor | void; Parameters decorators ((target: object, propertyKey: PropertyKey , descriptor?: PropertyDescriptor ) => PropertyDescriptor | void)[] target object propertyKey PropertyKey descriptor PropertyDescriptor Returns PropertyDescriptor | void getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: ClassDecoratorArguments): ClassDescriptor; Parameters args ClassDecoratorArguments Returns ClassDescriptor getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: MemberDecoratorArguments): MemberDescriptor; Parameters args MemberDecoratorArguments Returns MemberDescriptor getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: ParameterDecoratorArguments): ParameterDescriptor; Parameters args ParameterDecoratorArguments Returns ParameterDescriptor getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: DecoratorArguments): DecoratorDescriptor; Parameters args DecoratorArguments Returns DecoratorDescriptor getDecoratorInfoFromArguments(args) Declaration export declare function getDecoratorInfoFromArguments(args: DecoratorArguments | IArguments): DecoratorDescriptor | undefined; Parameters args DecoratorArguments | IArguments Returns DecoratorDescriptor | undefined isAccessor(value) Declaration export declare function isAccessor(value: DecoratorDescriptor): value is AccessorMemberDescriptor; Parameters value DecoratorDescriptor Returns value is AccessorMemberDescriptor isClass(value) Declaration export declare function isClass(value: DecoratorDescriptor): value is ClassDescriptor; Parameters value DecoratorDescriptor Returns value is ClassDescriptor isClassDecoratorArguments(args) Declaration export declare function isClassDecoratorArguments(args: DecoratorArguments | IArguments | unknown[]): args is ClassDecoratorArguments; Parameters args DecoratorArguments | IArguments | unknown[] Returns args is ClassDecoratorArguments isDecoratorArguments(args) Declaration export declare function isDecoratorArguments(args: DecoratorArguments | IArguments | unknown[]): args is DecoratorArguments; Parameters args DecoratorArguments | IArguments | unknown[] Returns args is DecoratorArguments isField(value) Declaration export declare function isField(value: DecoratorDescriptor): value is FieldMemberDescriptor; Parameters value DecoratorDescriptor Returns value is FieldMemberDescriptor isMember(value) Declaration export declare function isMember(value: DecoratorDescriptor): value is MemberDescriptor; Parameters value DecoratorDescriptor Returns value is MemberDescriptor isMemberDecoratorArguments(args) Declaration export declare function isMemberDecoratorArguments(args: DecoratorArguments | IArguments | unknown[]): args is MemberDecoratorArguments; Parameters args DecoratorArguments | IArguments | unknown[] Returns args is MemberDecoratorArguments isMethod(value) Declaration export declare function isMethod(value: DecoratorDescriptor): value is MethodMemberDescriptor; Parameters value DecoratorDescriptor Returns value is MethodMemberDescriptor isNonStatic(value) Declaration export declare function isNonStatic(value: MemberDescriptor | ParameterDescriptor): boolean; Parameters value MemberDescriptor | ParameterDescriptor Returns boolean isParameter(value) Declaration export declare function isParameter(value: DecoratorDescriptor): value is ParameterDescriptor; Parameters value DecoratorDescriptor Returns value is ParameterDescriptor isParameterDecoratorArguments(args) Declaration export declare function isParameterDecoratorArguments(args: DecoratorArguments | IArguments | unknown[]): args is ParameterDecoratorArguments; Parameters args DecoratorArguments | IArguments | unknown[] Returns args is ParameterDecoratorArguments isStatic(value) Declaration export declare function isStatic(value: MemberDescriptor | ParameterDescriptor): boolean; Parameters value MemberDescriptor | ParameterDescriptor Returns boolean"
  },
  "api/collections-linkedlist.html": {
    "href": "api/collections-linkedlist.html",
    "title": "Package @esfx/collections-linkedlist | @esfx API Reference",
    "keywords": "Package @esfx/collections-linkedlist"
  },
  "api/collections-hashset.html": {
    "href": "api/collections-hashset.html",
    "title": "Package @esfx/collections-hashset | @esfx API Reference",
    "keywords": "Package @esfx/collections-hashset"
  },
  "api/collections-hashmap.html": {
    "href": "api/collections-hashmap.html",
    "title": "Package @esfx/collections-hashmap | @esfx API Reference",
    "keywords": "Package @esfx/collections-hashmap"
  },
  "api/collections-sortedmap/readonlysortedmap_interface.html": {
    "href": "api/collections-sortedmap/readonlysortedmap_interface.html",
    "title": "Interface ReadonlySortedMap | @esfx API Reference",
    "keywords": "Interface ReadonlySortedMap Properties comparer Declaration readonly comparer: Comparer<K>; Property Value Comparer <K> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]>"
  },
  "api/collections-multimap/readonlymultimap_interface.html": {
    "href": "api/collections-multimap/readonlymultimap_interface.html",
    "title": "Interface ReadonlyMultiMap | @esfx API Reference",
    "keywords": "Interface ReadonlyMultiMap Properties keyEqualer Declaration readonly keyEqualer: Equaler<K>; Property Value Equaler <K> size Declaration readonly size: number; Property Value number valueEqualer Declaration readonly valueEqualer: Equaler<V>; Property Value Equaler <V> Methods entries() Declaration entries(): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]> forEach(callback, thisArg) Declaration forEach(callback: (value: V, key: K, map: this) => void, thisArg?: any): void; Parameters callback (value: V, key: K, map: this) => void thisArg any Returns void get(key) Declaration get(key: K): ReadonlyHashSet<V> | undefined; Parameters key K Returns ReadonlyHashSet <V> | undefined has(key, value) Declaration has(key: K, value: V): boolean; Parameters key K value V Returns boolean hasKey(key) Declaration hasKey(key: K): boolean; Parameters key K Returns boolean keys() Declaration keys(): IterableIterator<K>; Returns IterableIterator <K> values() Declaration values(): IterableIterator<V>; Returns IterableIterator <V>"
  },
  "api/collection-core/keyedcollection_interface.html": {
    "href": "api/collection-core/keyedcollection_interface.html",
    "title": "Interface KeyedCollection | @esfx API Reference",
    "keywords": "Interface KeyedCollection Methods [KeyedCollection.clear]() Clears the collection. Declaration [KeyedCollection.clear](): void; Returns void [KeyedCollection.delete](key) Deletes a key and its associated value from the collection. Declaration [KeyedCollection.delete](key: K): boolean; Parameters key K Returns boolean true if the key was found and removed; otherwise, false <!-- --> . [KeyedCollection.set](key, value) Sets a value in the collection for the provided key. Declaration [KeyedCollection.set](key: K, value: V): void; Parameters key K value V Returns void"
  },
  "api/cancelable/cancelsignal_interface.html": {
    "href": "api/cancelable/cancelsignal_interface.html",
    "title": "Interface CancelSignal | @esfx API Reference",
    "keywords": "Interface CancelSignal An object that represents a cancellation signal. Properties signaled Gets a value indicating whether cancellation was signaled. Declaration readonly signaled: boolean; Property Value boolean Methods subscribe(onSignaled) Subscribes to notifications for when the object becomes signaled. Declaration subscribe(onSignaled: () => void): CancelSubscription; Parameters onSignaled () => void Returns CancelSubscription"
  },
  "api/async-conditionvariable/asyncconditionvariable_class.html": {
    "href": "api/async-conditionvariable/asyncconditionvariable_class.html",
    "title": "Class AsyncConditionVariable | @esfx API Reference",
    "keywords": "Class AsyncConditionVariable Methods notifyAll() Notifies all current waiters to reacquire their locks. Declaration notifyAll(): void; Returns void notifyOne() Notifies one waiter to reacquire its lock. Declaration notifyOne(): void; Returns void wait(lock, cancelable) Releases lock <!-- --> , waiting until notified before reacquiring lock <!-- --> . Declaration wait(lock: AsyncLockable, cancelable?: Cancelable): Promise<void>; Parameters lock AsyncLockable cancelable Cancelable Returns Promise <void> wait(lock, condition, cancelable) Releases lock <!-- --> , waiting until notified before reacquiring lock <!-- --> . Declaration wait(lock: AsyncLockable, condition?: () => boolean, cancelable?: Cancelable): Promise<void>; Parameters lock AsyncLockable condition () => boolean cancelable Cancelable Returns Promise <void>"
  },
  "api/collection-core-shim.html": {
    "href": "api/collection-core-shim.html",
    "title": "Package @esfx/collection-core-shim | @esfx API Reference",
    "keywords": "Package @esfx/collection-core-shim"
  },
  "api/async.html": {
    "href": "api/async.html",
    "title": "Package @esfx/async | @esfx API Reference",
    "keywords": "Package @esfx/async"
  },
  "api/async-readerwriterlock.html": {
    "href": "api/async-readerwriterlock.html",
    "title": "Package @esfx/async-readerwriterlock | @esfx API Reference",
    "keywords": "Package @esfx/async-readerwriterlock"
  },
  "api/async-mutex.html": {
    "href": "api/async-mutex.html",
    "title": "Package @esfx/async-mutex | @esfx API Reference",
    "keywords": "Package @esfx/async-mutex"
  },
  "api/threading-manualresetevent/manualresetevent_class.html": {
    "href": "api/threading-manualresetevent/manualresetevent_class.html",
    "title": "Class ManualResetEvent | @esfx API Reference",
    "keywords": "Class ManualResetEvent Constructors (constructor)(initialState) Constructs a new instance of the ManualResetEvent class Declaration constructor(initialState?: boolean); Parameters initialState boolean (constructor)(buffer, byteOffset) Constructs a new instance of the ManualResetEvent class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Declaration readonly buffer: SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Declaration readonly byteLength: number; Property Value number byteOffset Declaration readonly byteOffset: number; Property Value number isSet Declaration readonly isSet: boolean; Property Value boolean SIZE Declaration static readonly SIZE = 4; Methods [Disposable.dispose]() Declaration [Disposable.dispose](): void; Returns void close() Declaration close(): void; Returns void reset() Declaration reset(): boolean; Returns boolean set() Declaration set(): boolean; Returns boolean waitOne(ms) Declaration waitOne(ms?: number): boolean; Parameters ms number Returns boolean"
  },
  "api/threading-lockable/lockable_namespace.html": {
    "href": "api/threading-lockable/lockable_namespace.html",
    "title": "Namespace Lockable | @esfx API Reference",
    "keywords": "Namespace Lockable Functions Lockable.hasInstance(value) Declaration function hasInstance(value: unknown): value is Lockable; Parameters value unknown Returns value is Lockable"
  },
  "api/threading-lockable/lockable_interface.html": {
    "href": "api/threading-lockable/lockable_interface.html",
    "title": "Interface Lockable | @esfx API Reference",
    "keywords": "Interface Lockable Methods [Lockable.lock](ms) Declaration [Lockable.lock](ms?: number): boolean; Parameters ms number Returns boolean [Lockable.tryLock]() Declaration [Lockable.tryLock]?(): boolean; Returns boolean [Lockable.unlock]() Declaration [Lockable.unlock](): boolean; Returns boolean"
  },
  "api/threading-countdown/countdownevent_class.html": {
    "href": "api/threading-countdown/countdownevent_class.html",
    "title": "Class CountdownEvent | @esfx API Reference",
    "keywords": "Class CountdownEvent Constructors (constructor)(initialCount) Constructs a new instance of the CountdownEvent class Declaration constructor(initialCount: number); Parameters initialCount number (constructor)(buffer, byteOffset) Constructs a new instance of the CountdownEvent class Declaration constructor(buffer: SharedArrayBuffer, byteOffset?: number); Parameters buffer SharedArrayBuffer byteOffset number Properties buffer Declaration readonly buffer: SharedArrayBuffer; Property Value SharedArrayBuffer byteLength Declaration readonly byteLength: number; Property Value number byteOffset Declaration readonly byteOffset: number; Property Value number initialCount Declaration readonly initialCount: number; Property Value number isSet Declaration readonly isSet: boolean; Property Value boolean remainingCount Declaration readonly remainingCount: number; Property Value number SIZE Declaration static readonly SIZE = 12; Methods [Disposable.dispose]() Declaration [Disposable.dispose](): void; Returns void add(count) Declaration add(count?: number): void; Parameters count number Returns void close() Declaration close(): void; Returns void reset(count) Declaration reset(count?: number): void; Parameters count number Returns void signal(count) Declaration signal(count?: number): boolean; Parameters count number Returns boolean tryAdd(count) Declaration tryAdd(count?: number): boolean; Parameters count number Returns boolean wait(ms) Declaration wait(ms?: number): boolean; Parameters ms number Returns boolean"
  },
  "api/ref/ref_namespace.html": {
    "href": "api/ref/ref_namespace.html",
    "title": "Namespace ref | @esfx API Reference",
    "keywords": "Namespace ref Functions ref._for(value) Creates a ref for an initial value. Declaration function _for<T>(value: T): Reference<T>; Parameters value T Returns Reference <T> Type Parameters Name Description T ref._is(value) Determines whether value is a [[ref]]. Declaration function _is(value: unknown): value is Reference<any>; Parameters value unknown Returns value is Reference <any> ref.at(object, key, readonly) Creates a ref to a property of an object. Declaration function at<T, K extends keyof T>(object: T, key: K, readonly?: boolean): Reference<T[K]>; Parameters object T key K readonly boolean Returns Reference <T[K]> Type Parameters Name Description T K ref.deref(value) Declaration function deref<T>(value: T | Reference<T>): T; Parameters value T | Reference <T> Returns T Type Parameters Name Description T ref.out() Creates a ref that must be set before it can be read. Declaration function out<T>(): Reference<T>; Returns Reference <T> Type Parameters Name Description T ref.out(get, set) Declaration function out<T>(get: () => T, set: (value: T) => void): Reference<T>; Parameters get () => T set (value: T) => void Returns Reference <T> Type Parameters Name Description T"
  },
  "api/ref/reference_interface.html": {
    "href": "api/ref/reference_interface.html",
    "title": "Interface Reference | @esfx API Reference",
    "keywords": "Interface Reference A reference to a lexical value. Properties [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string value Declaration value: T; Property Value T"
  },
  "api/lazy/lazy_class.html": {
    "href": "api/lazy/lazy_class.html",
    "title": "Class Lazy | @esfx API Reference",
    "keywords": "Class Lazy Constructors (constructor)(factory) Constructs a new instance of the Lazy class Declaration constructor(factory: () => T); Parameters factory () => T Properties hasValue Declaration readonly hasValue: boolean; Property Value boolean value Declaration readonly value: T; Property Value T Methods for(value) Declaration static for<T>(value: T): Lazy<T>; Parameters value T Returns Lazy <T> Type Parameters Name Description T from(factory, args) Declaration static from<T, A extends any[]>(factory: (...args: A) => T, ...args: A): Lazy<T>; Parameters factory (...args: A) => T args A Returns Lazy <T> Type Parameters Name Description T A"
  },
  "api/indexed-object/integerindexedobject_class.html": {
    "href": "api/indexed-object/integerindexedobject_class.html",
    "title": "Class IntegerIndexedObject | @esfx API Reference",
    "keywords": "Class IntegerIndexedObject Represents an object that can be indexed by an integer value similar to a native Array or TypedArray. Constructors (constructor)() Constructs a new instance of the IntegerIndexedObject class Declaration constructor(); Methods deleteIndex(index) Deletes the value at the specified index/ Declaration protected deleteIndex(index: number): boolean; Parameters index number Returns boolean true if the value was successfully deleted; otherwise, false <!-- --> . getIndex(index) Gets the value at the specified index. Declaration protected abstract getIndex(index: number): T; Parameters index number Returns T getLength() Gets the \"length\" of the indexed object, which should be one more than the largest index stored in the object. Declaration protected abstract getLength(): number; Returns number hasIndex(index) Determines whether the object contains a value at the specified index. Declaration protected hasIndex(index: number): boolean; Parameters index number Returns boolean setIndex(index, value) Sets the value at the specified index. Declaration protected setIndex(index: number, value: T): boolean; Parameters index number value T Returns boolean true if the value could be set; otherwise, false <!-- --> ."
  },
  "api/equatable/comparer_interface.html": {
    "href": "api/equatable/comparer_interface.html",
    "title": "Interface Comparer | @esfx API Reference",
    "keywords": "Interface Comparer Represents an object that can be used to perform a relational comparison between two values. Methods compare(x, y) Compares two values: - A negative value indicates x is lesser than y <!-- --> . - A positive value indicates x is greater than y <!-- --> . - A zero value indicates x and y are equivalent. Declaration compare(x: T, y: T): number; Parameters x T y T Returns number"
  },
  "api/equatable/comparable_namespace.html": {
    "href": "api/equatable/comparable_namespace.html",
    "title": "Namespace Comparable | @esfx API Reference",
    "keywords": "Namespace Comparable Functions Comparable.hasInstance(value) Determines whether a value is Comparable. Declaration function hasInstance(value: unknown): value is Comparable; Parameters value unknown Returns value is Comparable Comparable.isComparable(value) Determines whether a value is Comparable. Declaration function isComparable(value: unknown): value is Comparable; Parameters value unknown Returns value is Comparable"
  },
  "api/equatable/comparer_namespace.html": {
    "href": "api/equatable/comparer_namespace.html",
    "title": "Namespace Comparer | @esfx API Reference",
    "keywords": "Namespace Comparer Functions Comparer.create(comparison) Creates a Comparer from a comparison function. Declaration function create<T>(comparison: Comparison<T>): Comparer<T>; Parameters comparison Comparison <T> Returns Comparer <T> Type Parameters Name Description T"
  },
  "api/disposable/disposable_interface.html": {
    "href": "api/disposable/disposable_interface.html",
    "title": "Interface Disposable | @esfx API Reference",
    "keywords": "Interface Disposable Indicates an object that has resources that can be explicitly disposed. Methods [Disposable.dispose]() Dispose this object's resources. Declaration [Disposable.dispose](): void; Returns void"
  },
  "api/disposable/asyncdisposable_namespace.html": {
    "href": "api/disposable/asyncdisposable_namespace.html",
    "title": "Namespace AsyncDisposable | @esfx API Reference",
    "keywords": "Namespace AsyncDisposable Functions AsyncDisposable.create(dispose) Creates an AsyncDisposable wrapper around a callback used to dispose resources. Declaration function create(dispose: () => void | PromiseLike<void>): AsyncDisposable; Parameters dispose () => void | PromiseLike <void> Returns AsyncDisposable AsyncDisposable.from(resources) Creates an AsyncDisposable wrapper around a set of other disposables. Declaration function from(resources: Iterable<AsyncDisposable | Disposable | null | undefined>): AsyncDisposable; Parameters resources Iterable < AsyncDisposable | Disposable | null | undefined> Returns AsyncDisposable AsyncDisposable.hasInstance(value) Determines whether a value is [[AsyncDisposable]]. Declaration function hasInstance(value: unknown): value is AsyncDisposable; Parameters value unknown Returns value is AsyncDisposable AsyncDisposable.isAsyncDisposable(value) Determines whether a value is [[AsyncDisposable]]. Declaration function isAsyncDisposable(value: unknown): value is AsyncDisposable; Parameters value unknown Returns value is AsyncDisposable AsyncDisposable.use(resource, callback) Executes a callback with the provided AsyncDisposable resource, disposing the resource when the callback completes asynchronously. Declaration function use<T extends AsyncDisposable | Disposable | null | undefined, U>(resource: T, callback: (resource: T) => U | PromiseLike<U>): Promise<U>; Parameters resource T callback (resource: T) => U | PromiseLike <U> Returns Promise <U> Type Parameters Name Description T U"
  },
  "api/disposable/asyncdisposable_interface.html": {
    "href": "api/disposable/asyncdisposable_interface.html",
    "title": "Interface AsyncDisposable | @esfx API Reference",
    "keywords": "Interface AsyncDisposable Indicates an object that has resources that can be explicitly disposed asynchronously. Methods [AsyncDisposable.asyncDispose]() Dispose this object's resources. Declaration [AsyncDisposable.asyncDispose](): Promise<void>; Returns Promise <void>"
  },
  "api/decorators-stage1-core/parameterdescriptor_interface.html": {
    "href": "api/decorators-stage1-core/parameterdescriptor_interface.html",
    "title": "Interface ParameterDescriptor | @esfx API Reference",
    "keywords": "Interface ParameterDescriptor Properties index Declaration index: number; Property Value number key Declaration key: string | symbol; Property Value string | symbol kind Declaration kind: \"parameter\"; Property Value \"parameter\" target Declaration target: object; Property Value object"
  },
  "api/collections-hashset/readonlyhashset_interface.html": {
    "href": "api/collections-hashset/readonlyhashset_interface.html",
    "title": "Interface ReadonlyHashSet | @esfx API Reference",
    "keywords": "Interface ReadonlyHashSet Properties equaler Declaration readonly equaler: Equaler<T>; Property Value Equaler <T> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/collections-hashset/hashset_class.html": {
    "href": "api/collections-hashset/hashset_class.html",
    "title": "Class HashSet | @esfx API Reference",
    "keywords": "Class HashSet Constructors (constructor)(equaler) Constructs a new instance of the HashSet class Declaration constructor(equaler?: Equaler<T>); Parameters equaler Equaler <T> (constructor)(iterable, equaler) Constructs a new instance of the HashSet class Declaration constructor(iterable?: Iterable<T>, equaler?: Equaler<T>); Parameters iterable Iterable <T> equaler Equaler <T> (constructor)(capacity, equaler) Constructs a new instance of the HashSet class Declaration constructor(capacity: number, equaler?: Equaler<T>); Parameters capacity number equaler Equaler <T> Properties [Collection.size] Declaration readonly [Collection.size]: number; Property Value number [Symbol.toStringTag] Declaration [Symbol.toStringTag]: string; Property Value string equaler Declaration readonly equaler: Equaler<T>; Property Value Equaler <T> size Declaration readonly size: number; Property Value number Methods [Collection.add](value) Declaration [Collection.add](value: T): void; Parameters value T Returns void [Collection.clear]() Declaration [Collection.clear](): void; Returns void [Collection.delete](value) Declaration [Collection.delete](value: T): boolean; Parameters value T Returns boolean [Collection.has](value) Declaration [Collection.has](value: T): boolean; Parameters value T Returns boolean [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<T>; Returns IterableIterator <T> add(value) Declaration add(value: T): this; Parameters value T Returns this clear() Declaration clear(): void; Returns void delete(value) Declaration delete(value: T): boolean; Parameters value T Returns boolean ensureCapacity(capacity) Declaration ensureCapacity(capacity: number): number; Parameters capacity number Returns number entries() Declaration entries(): IterableIterator<[T, T]>; Returns IterableIterator <[T, T]> forEach(callback, thisArg) Declaration forEach(callback: (value: T, key: T, map: this) => void, thisArg?: any): void; Parameters callback (value: T, key: T, map: this) => void thisArg any Returns void has(value) Declaration has(value: T): boolean; Parameters value T Returns boolean keys() Declaration keys(): IterableIterator<T>; Returns IterableIterator <T> trimExcess(capacity) Declaration trimExcess(capacity?: number): void; Parameters capacity number Returns void values() Declaration values(): IterableIterator<T>; Returns IterableIterator <T>"
  },
  "api/collections-hashmap/readonlyhashmap_interface.html": {
    "href": "api/collections-hashmap/readonlyhashmap_interface.html",
    "title": "Interface ReadonlyHashMap | @esfx API Reference",
    "keywords": "Interface ReadonlyHashMap Properties equaler Declaration readonly equaler: Equaler<K>; Property Value Equaler <K> Methods [Symbol.iterator]() Declaration [Symbol.iterator](): IterableIterator<[K, V]>; Returns IterableIterator <[K, V]>"
  },
  "api/collections-sortedset.html": {
    "href": "api/collections-sortedset.html",
    "title": "Package @esfx/collections-sortedset | @esfx API Reference",
    "keywords": "Package @esfx/collections-sortedset"
  },
  "api/collections-multimap.html": {
    "href": "api/collections-multimap.html",
    "title": "Package @esfx/collections-multimap | @esfx API Reference",
    "keywords": "Package @esfx/collections-multimap"
  },
  "api/async-lazy.html": {
    "href": "api/async-lazy.html",
    "title": "Package @esfx/async-lazy | @esfx API Reference",
    "keywords": "Package @esfx/async-lazy"
  },
  "api/events/eventsource_class.html": {
    "href": "api/events/eventsource_class.html",
    "title": "Class EventSource | @esfx API Reference",
    "keywords": "Class EventSource Properties event Declaration readonly event: Event<F>; Property Value Event <F> owner Declaration readonly owner: ThisParameterType<F>; Property Value ThisParameterType <F> Methods emit(args) Declaration emit(...args: Parameters<F>): boolean; Parameters args Parameters <F> Returns boolean"
  }
}